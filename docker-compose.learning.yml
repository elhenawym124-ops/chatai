# Docker Compose للتعلم المستمر
# يشمل جميع الخدمات المطلوبة لتشغيل نظام التعلم المستمر

version: '3.8'

services:
  # قاعدة البيانات
  postgres:
    image: postgres:15-alpine
    container_name: learning_postgres
    environment:
      POSTGRES_DB: chatbot_learning
      POSTGRES_USER: learning_user
      POSTGRES_PASSWORD: learning_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_learning_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - learning_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learning_user -d chatbot_learning"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis للتخزين المؤقت
  redis:
    image: redis:7-alpine
    container_name: learning_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_learning_data:/data
    networks:
      - learning_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: learning_backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://learning_user:learning_password_2024@postgres:5432/chatbot_learning
      REDIS_URL: redis://redis:6379
      JWT_SECRET: learning_jwt_secret_2024_very_secure
      PORT: 3000
      
      # إعدادات التعلم المستمر
      LEARNING_ENABLED: "true"
      LEARNING_SPEED: "medium"
      AUTO_APPLY_IMPROVEMENTS: "false"
      DATA_RETENTION_DAYS: "90"
      MINIMUM_SAMPLE_SIZE: "50"
      CONFIDENCE_THRESHOLD: "0.8"
      
      # إعدادات الأمان
      CORS_ORIGIN: "http://localhost:3001"
      RATE_LIMIT_WINDOW: "900000"
      RATE_LIMIT_MAX: "100"
      
      # إعدادات المراقبة
      LOG_LEVEL: "info"
      ENABLE_METRICS: "true"
      METRICS_PORT: "9090"
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    networks:
      - learning_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: http://localhost:3000/api/v1
        REACT_APP_ENV: production
        REACT_APP_VERSION: 2.0.0
    container_name: learning_frontend
    environment:
      NODE_ENV: production
    ports:
      - "3001:80"
    networks:
      - learning_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: learning_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - learning_network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Prometheus للمراقبة
  prometheus:
    image: prom/prometheus:latest
    container_name: learning_prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - learning_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana للتصور
  grafana:
    image: grafana/grafana:latest
    container_name: learning_grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: learning_admin_2024
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - learning_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ElasticSearch للبحث والتحليل
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: learning_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - learning_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Kibana للتصور والتحليل
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: learning_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - learning_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# الشبكات
networks:
  learning_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# التخزين المستمر
volumes:
  postgres_learning_data:
    driver: local
  redis_learning_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# إعدادات إضافية
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# تطبيق الإعدادات على جميع الخدمات
x-common-variables: &common-variables
  logging: *default-logging
