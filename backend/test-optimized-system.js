const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testOptimizedSystem() {
  console.log('๐ ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุญุณู ูุน Cache ููุฑุงูุจุฉ ุงูุฃุฏุงุก...\n');
  
  const baseURL = 'http://localhost:3001';
  const companyId = 'cmd5c0c9y0000ymzdd7wtv7ib';
  
  // ุงุฎุชุจุงุฑ 1: ุชูุฑูุฑ ุงูุตุญุฉ ุงูุนุงูุฉ
  console.log('--- ุงุฎุชุจุงุฑ 1: ุชูุฑูุฑ ุงูุตุญุฉ ุงูุนุงูุฉ ---');
  try {
    const response = await fetch(`${baseURL}/api/v1/performance/health`);
    const data = await response.json();
    
    if (data.success) {
      console.log('โ ุชู ุฌูุจ ุชูุฑูุฑ ุงูุตุญุฉ');
      console.log(`๐ฅ ุญุงูุฉ ุงููุธุงู: ${data.data.status}`);
      console.log(`๐ ููุงุท ุงูุตุญุฉ: ${data.data.score}/100`);
      console.log(`๐ ูุนุฏู ุงููุฌุงุญ: ${data.data.summary.successRate}`);
      console.log(`โฑ๏ธ ูุชูุณุท ููุช ุงูุงุณุชุฌุงุจุฉ: ${data.data.summary.averageResponseTime}`);
      console.log(`๐พ ูุนุฏู ุฅุตุงุจุฉ Cache: ${data.data.summary.cacheHitRate}`);
    } else {
      console.log(`โ ูุดู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ: ${error.message}`);
  }
  
  // ุงุฎุชุจุงุฑ 2: ุฅุญุตุงุฆูุงุช Cache
  console.log('\n--- ุงุฎุชุจุงุฑ 2: ุฅุญุตุงุฆูุงุช Cache ---');
  try {
    const response = await fetch(`${baseURL}/api/v1/performance/cache`);
    const data = await response.json();
    
    if (data.success) {
      console.log('โ ุชู ุฌูุจ ุฅุญุตุงุฆูุงุช Cache');
      console.log(`๐ฆ ุญุฌู Cache: ${data.data.cache.size} ุนูุตุฑ`);
      console.log(`๐พ ุงุณุชุฎุฏุงู ุงูุฐุงูุฑุฉ: ${data.data.cache.memoryUsage.kb}KB`);
      console.log(`๐ฏ ูุนุฏู ุงูุฅุตุงุจุฉ: ${data.data.performance.hitRate}`);
    } else {
      console.log(`โ ูุดู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ: ${error.message}`);
  }
  
  // ุงุฎุชุจุงุฑ 3: ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก ูุน Cache
  console.log('\n--- ุงุฎุชุจุงุฑ 3: ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก ูุน Cache ---');
  
  const testMessage = 'ุฃุฑูุฏ ุฃู ุฃุฑู ุงูููุชุฌุงุช ุงูุดุงุฆุนุฉ';
  
  // ุงูุทูุจ ุงูุฃูู (Cache Miss)
  console.log('๐ ุงูุทูุจ ุงูุฃูู (Cache Miss)...');
  const firstStart = Date.now();
  try {
    const response = await fetch(`${baseURL}/api/v1/ai/generate-response-hybrid`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: testMessage,
        companyId: companyId,
        aiSettings: { useAdvancedTools: true }
      })
    });
    
    const firstEnd = Date.now();
    const data = await response.json();
    
    if (data.success) {
      console.log(`โ ุงูุทูุจ ุงูุฃูู ูุฌุญ ูู ${firstEnd - firstStart}ms`);
      console.log(`๐ง ุงูุฃุฏูุงุช ุงููุณุชุฎุฏูุฉ: ${data.data.usedTools.join(', ') || 'ูุง ููุฌุฏ'}`);
    } else {
      console.log(`โ ูุดู ุงูุทูุจ ุงูุฃูู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ ูู ุงูุทูุจ ุงูุฃูู: ${error.message}`);
  }
  
  // ุงูุชุธุงุฑ ูุตูุฑ
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // ุงูุทูุจ ุงูุซุงูู (Cache Hit ูุญุชูู)
  console.log('๐ ุงูุทูุจ ุงูุซุงูู (Cache Hit ูุญุชูู)...');
  const secondStart = Date.now();
  try {
    const response = await fetch(`${baseURL}/api/v1/ai/generate-response-hybrid`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: testMessage,
        companyId: companyId,
        aiSettings: { useAdvancedTools: true }
      })
    });
    
    const secondEnd = Date.now();
    const data = await response.json();
    
    if (data.success) {
      console.log(`โ ุงูุทูุจ ุงูุซุงูู ูุฌุญ ูู ${secondEnd - secondStart}ms`);
      console.log(`๐ง ุงูุฃุฏูุงุช ุงููุณุชุฎุฏูุฉ: ${data.data.usedTools.join(', ') || 'ูุง ููุฌุฏ'}`);
    } else {
      console.log(`โ ูุดู ุงูุทูุจ ุงูุซุงูู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ ูู ุงูุทูุจ ุงูุซุงูู: ${error.message}`);
  }
  
  // ุงุฎุชุจุงุฑ 4: ููุฎุต ุงูุฃุฏุงุก
  console.log('\n--- ุงุฎุชุจุงุฑ 4: ููุฎุต ุงูุฃุฏุงุก ---');
  try {
    const response = await fetch(`${baseURL}/api/v1/performance/summary`);
    const data = await response.json();
    
    if (data.success) {
      console.log('โ ุชู ุฌูุจ ููุฎุต ุงูุฃุฏุงุก');
      console.log(`๐ ุฅุฌูุงูู ุงูุทูุจุงุช: ${data.data.overview.totalRequests}`);
      console.log(`โ ูุนุฏู ุงููุฌุงุญ: ${data.data.overview.successRate}`);
      console.log(`โฑ๏ธ ูุชูุณุท ููุช ุงูุงุณุชุฌุงุจุฉ: ${data.data.overview.averageResponseTime}`);
      console.log(`๐พ ูุนุฏู ุฅุตุงุจุฉ Cache: ${data.data.overview.cacheHitRate}`);
      
      console.log('\n๐ ููุงุฑูุฉ ุงูุฃูุธูุฉ:');
      console.log(`๐ฑ ุงููุธุงู ุงูุชูููุฏู: ${data.data.systems.traditional.requests} ุทูุจุ ${data.data.systems.traditional.averageTime}`);
      console.log(`๐ ุงููุธุงู ุงููุชูุฏู: ${data.data.systems.advanced.requests} ุทูุจุ ${data.data.systems.advanced.averageTime}`);
      
      if (data.data.recommendations.length > 0) {
        console.log('\n๐ก ุงูุชูุตูุงุช:');
        data.data.recommendations.forEach((rec, index) => {
          console.log(`   ${index + 1}. [${rec.priority}] ${rec.message}`);
        });
      }
    } else {
      console.log(`โ ูุดู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ: ${error.message}`);
  }
  
  // ุงุฎุชุจุงุฑ 5: ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก ุงููุชูุฏู
  console.log('\n--- ุงุฎุชุจุงุฑ 5: ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก ุงููุชูุฏู ---');
  try {
    const response = await fetch(`${baseURL}/api/v1/performance/test`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        iterations: 5,
        message: 'ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก'
      })
    });
    
    const data = await response.json();
    
    if (data.success) {
      console.log('โ ุชู ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก');
      console.log(`๐ ุนุฏุฏ ุงูุชูุฑุงุฑุงุช: ${data.data.iterations}`);
      console.log(`โฑ๏ธ ูุชูุณุท ุงูููุช: ${data.data.summary.averageTime.toFixed(2)}ms`);
      console.log(`โก ุฃุณุฑุน ููุช: ${data.data.summary.minTime}ms`);
      console.log(`๐ ุฃุจุทุฃ ููุช: ${data.data.summary.maxTime}ms`);
      console.log(`โ ูุนุฏู ุงููุฌุงุญ: ${data.data.summary.successRate.toFixed(2)}%`);
    } else {
      console.log(`โ ูุดู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ: ${error.message}`);
  }
  
  // ุงุฎุชุจุงุฑ 6: ุงุฎุชุจุงุฑ ุทูุจุงุช ูุชุนุฏุฏุฉ ูููุงุณ Cache
  console.log('\n--- ุงุฎุชุจุงุฑ 6: ุงุฎุชุจุงุฑ ุทูุจุงุช ูุชุนุฏุฏุฉ ูููุงุณ Cache ---');
  
  const testMessages = [
    'ุฃุฑูุฏ ุงูููุชุฌุงุช ุงูุฌุฏูุฏุฉ',
    'ุนุงูุฒุฉ ููุชุดู ุฑูุงุถู',
    'ุฃุฑูุฏ ุงูููุชุฌุงุช ุงูุฌุฏูุฏุฉ', // ุชูุฑุงุฑ ูุงุฎุชุจุงุฑ Cache
    'ุนุงูุฒุฉ ููุชุดู ุฑูุงุถู' // ุชูุฑุงุฑ ูุงุฎุชุจุงุฑ Cache
  ];
  
  for (let i = 0; i < testMessages.length; i++) {
    const message = testMessages[i];
    const isRepeat = i >= 2;
    
    console.log(`๐ ุทูุจ ${i + 1}: "${message}" ${isRepeat ? '(ุชูุฑุงุฑ)' : '(ุฌุฏูุฏ)'}`);
    
    const start = Date.now();
    try {
      const response = await fetch(`${baseURL}/api/v1/ai/generate-response-hybrid`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: message,
          companyId: companyId,
          aiSettings: { useAdvancedTools: true }
        })
      });
      
      const end = Date.now();
      const data = await response.json();
      
      if (data.success) {
        console.log(`   โ ูุฌุญ ูู ${end - start}ms`);
      } else {
        console.log(`   โ ูุดู: ${data.error}`);
      }
    } catch (error) {
      console.log(`   โ ุฎุทุฃ: ${error.message}`);
    }
    
    // ุงูุชุธุงุฑ ูุตูุฑ ุจูู ุงูุทูุจุงุช
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  // ุงุฎุชุจุงุฑ 7: ุงูุชูุฑูุฑ ุงูููุงุฆู
  console.log('\n--- ุงุฎุชุจุงุฑ 7: ุงูุชูุฑูุฑ ุงูููุงุฆู ---');
  try {
    const response = await fetch(`${baseURL}/api/v1/performance/health`);
    const data = await response.json();
    
    if (data.success) {
      console.log('โ ุงูุชูุฑูุฑ ุงูููุงุฆู:');
      console.log(`๐ฅ ุญุงูุฉ ุงููุธุงู: ${data.data.status}`);
      console.log(`๐ ููุงุท ุงูุตุญุฉ: ${data.data.score}/100`);
      console.log(`๐ ุฅุฌูุงูู ุงูุทูุจุงุช: ${data.data.summary.totalRequests}`);
      console.log(`โ ูุนุฏู ุงููุฌุงุญ: ${data.data.summary.successRate}`);
      console.log(`๐พ ุญุฌู Cache: ${data.data.cache.size} ุนูุตุฑ`);
      console.log(`๐ฏ ูุนุฏู ุฅุตุงุจุฉ Cache: ${data.data.cache.hitRate}`);
    } else {
      console.log(`โ ูุดู: ${data.error}`);
    }
  } catch (error) {
    console.log(`โ ุฎุทุฃ: ${error.message}`);
  }
  
  console.log('\n๐ ุงูุชูู ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุญุณู!');
  
  console.log('\n๐ ููุฎุต ุงูุชุญุณููุงุช:');
  console.log('โ ูุธุงู Cache ููุจุญุซ ูู ุงูููุชุฌุงุช');
  console.log('โ ูุฑุงูุจุฉ ุงูุฃุฏุงุก ูู ุงูููุช ุงููุนูู');
  console.log('โ ุฅุญุตุงุฆูุงุช ููุตูุฉ ููุฃูุธูุฉ');
  console.log('โ ุชูุงุฑูุฑ ุงูุตุญุฉ ุงูุนุงูุฉ');
  console.log('โ ุชูุตูุงุช ุชููุงุฆูุฉ ููุชุญุณูู');
  console.log('โ ุงุฎุชุจุงุฑุงุช ุงูุฃุฏุงุก ุงููุชูุฏูุฉ');
}

// ุชุดุบูู ุงุฎุชุจุงุฑ ุงููุธุงู ุงููุญุณู
testOptimizedSystem();
