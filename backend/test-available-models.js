const { GoogleGenerativeAI } = require('@google/generative-ai');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAvailableModels() {
  console.log('üîç Testing Available Gemini Models...\n');
  
  try {
    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸÜÿ¥ÿ∑
    const activeKey = await prisma.geminiKey.findFirst({
      where: { isActive: true }
    });
    
    if (!activeKey) {
      console.log('‚ùå No active key found');
      return;
    }
    
    console.log('üîë Current API Key:', activeKey.apiKey.substring(0, 20) + '...');
    console.log('üìã Current Model:', activeKey.model);
    
    // ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ© ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ±
    const modelsToTest = [
      {
        name: 'gemini-1.5-flash',
        description: 'Fast and efficient - 1,500 requests/day',
        quota: '1,500/day'
      },
      {
        name: 'gemini-1.5-pro',
        description: 'More capable - 50 requests/day',
        quota: '50/day'
      },
      {
        name: 'gemini-pro',
        description: 'Legacy model - Good quota',
        quota: 'Variable'
      },
      {
        name: 'gemini-2.0-flash-exp',
        description: 'Experimental 2.0 - Higher quota',
        quota: 'Higher'
      }
    ];
    
    console.log('\nüß™ Testing models with current API key...\n');
    
    const genAI = new GoogleGenerativeAI(activeKey.apiKey);
    
    for (const modelInfo of modelsToTest) {
      try {
        console.log(`üîÑ Testing ${modelInfo.name}...`);
        console.log(`   Description: ${modelInfo.description}`);
        console.log(`   Expected Quota: ${modelInfo.quota}`);
        
        const model = genAI.getGenerativeModel({
          model: modelInfo.name,
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 100,
          }
        });
        
        const result = await model.generateContent('ŸÖÿ±ÿ≠ÿ®ÿßÿå Ÿáÿ∞ÿß ÿßÿÆÿ™ÿ®ÿßÿ± ÿ®ÿ≥Ÿäÿ∑');
        const response = await result.response;
        const text = response.text();
        
        console.log(`   ‚úÖ SUCCESS: ${text.substring(0, 50)}...`);
        console.log(`   üìä Model works with current API key`);
        
      } catch (error) {
        console.log(`   ‚ùå FAILED: ${error.message}`);
        
        if (error.status === 429) {
          console.log(`   üö® Quota exceeded for ${modelInfo.name}`);
        } else if (error.status === 404) {
          console.log(`   ‚ö†Ô∏è Model ${modelInfo.name} not found or not accessible`);
        } else {
          console.log(`   üîß Other error: ${error.status || 'Unknown'}`);
        }
      }
      
      console.log('');
      
      // ÿ™ÿ£ÿÆŸäÿ± ÿ®ŸäŸÜ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('üéØ Recommendations:');
    console.log('1. gemini-1.5-flash: Best balance of speed and quota (1,500/day)');
    console.log('2. gemini-2.0-flash-exp: Experimental but potentially higher quota');
    console.log('3. gemini-pro: Legacy but stable');
    console.log('4. gemini-1.5-pro: Most capable but lowest quota (50/day)');
    
    console.log('\nüí° Next steps:');
    console.log('- Update to the model with highest available quota');
    console.log('- Test quota limits for each working model');
    console.log('- Implement model rotation based on quota availability');
    
  } catch (error) {
    console.error('‚ùå Error testing models:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAvailableModels();
