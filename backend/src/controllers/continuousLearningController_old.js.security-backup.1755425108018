/**
 * Continuous Learning Controller
 * 
 * تحكم في جميع API endpoints الخاصة بنظام التعلم المستمر
 */

const ContinuousLearningServiceV2 = require('../services/continuousLearningServiceV2');
const aiAgentService = require('../services/aiAgentService');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const learningService = new ContinuousLearningServiceV2();

class ContinuousLearningController {
  
  /**
   * الحصول على لوحة تحكم التعلم المستمر
   * GET /api/learning/dashboard
   */
  async getDashboard(req, res) {
    try {
      const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };

      console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);

      // الحصول على البيانات الأساسية من قاعدة البيانات مباشرة
      const totalInteractions = await prisma.learningData.count({
        where: { companyId }
      });

      const discoveredPatterns = await prisma.discoveredPattern.count({
        where: { companyId }
      });

      const appliedImprovements = await prisma.appliedImprovement.count({
        where: { companyId }
      });

      // حساب معدل النجاح
      const successfulInteractions = await prisma.learningData.count({
        where: {
          companyId,
          outcome: { in: ['satisfied', 'resolved', 'purchase_intent'] }
        }
      });

      const successRate = totalInteractions > 0
        ? Math.round((successfulInteractions / totalInteractions) * 100)
        : 0;

      // الحصول على النشاط الحديث
      const recentActivity = await prisma.learningData.findMany({
        where: { companyId },
        orderBy: { createdAt: 'desc' },
        take: 5,
        select: {
          id: true,
          type: true,
          outcome: true,
          createdAt: true,
          data: true
        }
      });

      // تجميع بيانات لوحة التحكم
      const dashboardData = {
        overview: {
          totalInteractions,
          discoveredPatterns,
          appliedImprovements,
          successRate
        },
        aiStats: {
          averageResponseTime: 1500,
          accuracyRate: 89,
          satisfactionScore: 4.2
        },
        recentActivity: recentActivity.map(activity => ({
          id: activity.id,
          type: activity.type,
          outcome: activity.outcome,
          timestamp: activity.createdAt,
          description: this.getActivityDescription(activity)
        })),
        systemStatus: {
          learningEnabled: true,
          dataCollection: totalInteractions > 0,
          patternAnalysis: discoveredPatterns > 0,
          improvementApplication: appliedImprovements > 0
        }
      };

      console.log('✅ [Dashboard] Dashboard data prepared:', {
        totalInteractions,
        discoveredPatterns,
        appliedImprovements,
        successRate
      });

      res.json({
        success: true,
        data: dashboardData,
        message: 'تم جلب بيانات لوحة التحكم بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getDashboard:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * وصف النشاط للعرض
   */
  getActivityDescription(activity) {
    try {
      const data = JSON.parse(activity.data);
      const userMessage = data.userMessage || 'رسالة غير محددة';
      return userMessage.length > 50
        ? userMessage.substring(0, 50) + '...'
        : userMessage;
    } catch {
      return 'نشاط تعلم';
    }
  }

  /**
   * الحصول على تحليلات التعلم المفصلة
   * GET /api/learning/analytics
   */
  async getAnalytics(req, res) {
    try {
      const { companyId } = req.user;
      const { period = 'week' } = req.query;

      // التحقق من صحة المدة
      const validPeriods = ['day', 'week', 'month'];
      if (!validPeriods.includes(period)) {
        return res.status(400).json({
          success: false,
          message: 'مدة غير صحيحة. استخدم: day, week, month'
        });
      }

      const analytics = await learningService.getLearningAnalytics(companyId, period);
      
      if (!analytics.success) {
        return res.status(500).json({
          success: false,
          message: 'خطأ في جلب التحليلات',
          error: analytics.error
        });
      }

      res.json({
        success: true,
        data: analytics.data,
        period: period,
        message: 'تم جلب التحليلات بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getAnalytics:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * الحصول على الأنماط المكتشفة
   * GET /api/learning/patterns
   */
  async getPatterns(req, res) {
    try {
      const { companyId } = req.user;
      const { type, minConfidence = 0.5 } = req.query;

      // بناء شروط البحث
      const whereClause = {
        companyId: companyId,
        confidence: {
          gte: parseFloat(minConfidence)
        }
      };

      if (type) {
        whereClause.patternType = type;
      }

      // جلب الأنماط من قاعدة البيانات
      const patterns = await prisma.discoveredPattern.findMany({
        where: whereClause,
        orderBy: [
          { confidence: 'desc' },
          { occurrences: 'desc' }
        ],
        take: 50 // حد أقصى 50 نمط
      });

      // تحويل البيانات للعرض
      const formattedPatterns = patterns.map(pattern => ({
        id: pattern.id,
        type: pattern.patternType,
        pattern: pattern.pattern,
        description: pattern.description,
        confidence: Math.round(pattern.confidence * 100),
        occurrences: pattern.occurrences,
        status: pattern.status || 'discovered',
        contexts: pattern.contexts ? JSON.parse(pattern.contexts) : {},
        insights: pattern.actionableInsights ? JSON.parse(pattern.actionableInsights) : [],
        impact: pattern.impact ? JSON.parse(pattern.impact) : {},
        createdAt: pattern.createdAt,
        lastValidated: pattern.lastValidated
      }));

      res.json({
        success: true,
        data: {
          patterns: formattedPatterns,
          total: formattedPatterns.length,
          filters: {
            type: type || 'all',
            minConfidence: parseFloat(minConfidence)
          }
        },
        message: 'تم جلب الأنماط بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getPatterns:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * الحصول على التحسينات المطبقة
   * GET /api/learning/improvements
   */
  async getImprovements(req, res) {
    try {
      const { companyId } = req.user;
      const { status, type } = req.query;

      // بناء شروط البحث
      const whereClause = { companyId: companyId };
      
      if (status) {
        whereClause.status = status;
      }
      
      if (type) {
        whereClause.type = type;
      }

      // جلب التحسينات من قاعدة البيانات
      const improvements = await prisma.appliedImprovement.findMany({
        where: whereClause,
        orderBy: { createdAt: 'desc' },
        take: 100 // حد أقصى 100 تحسين
      });

      // تحويل البيانات للعرض
      const formattedImprovements = improvements.map(improvement => ({
        id: improvement.id,
        type: improvement.type,
        description: improvement.description,
        status: improvement.status || 'active',
        rolloutPercentage: improvement.rolloutPercentage || 0,
        implementation: improvement.implementation ? JSON.parse(improvement.implementation) : {},
        createdAt: improvement.createdAt,
        updatedAt: improvement.updatedAt
      }));

      res.json({
        success: true,
        data: {
          improvements: formattedImprovements,
          total: formattedImprovements.length,
          filters: {
            status: status || 'all',
            type: type || 'all'
          }
        },
        message: 'تم جلب التحسينات بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getImprovements:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * الحصول على إعدادات التعلم
   * GET /api/learning/settings
   */
  async getSettings(req, res) {
    try {
      const { companyId } = req.user;

      // الحصول على إعدادات التعلم
      const learningSettings = await learningService.getLearningSettings(companyId);
      
      // الحصول على إعدادات AI Agent
      const aiSettings = await aiAgentService.getSettings();

      const settings = {
        learning: {
          enabled: learningSettings?.enabled || false,
          learningSpeed: learningSettings?.learningSpeed || 'medium',
          autoApplyImprovements: learningSettings?.autoApplyImprovements || false,
          dataRetentionDays: learningSettings?.dataRetentionDays || 90,
          minimumSampleSize: learningSettings?.minimumSampleSize || 50,
          confidenceThreshold: learningSettings?.confidenceThreshold || 0.8
        },
        ai: {
          learningEnabled: aiSettings.learningEnabled || false,
          isEnabled: aiSettings.isEnabled || false
        }
      };

      res.json({
        success: true,
        data: settings,
        message: 'تم جلب الإعدادات بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getSettings:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * تحديث إعدادات التعلم
   * PUT /api/learning/settings
   */
  async updateSettings(req, res) {
    try {
      const { companyId } = req.user;
      const settings = req.body;

      // التحقق من صحة البيانات
      if (!settings || typeof settings !== 'object') {
        return res.status(400).json({
          success: false,
          message: 'بيانات الإعدادات مطلوبة'
        });
      }

      // تحديث إعدادات التعلم المستمر
      if (settings.learning) {
        await prisma.learningSettings.upsert({
          where: { companyId: companyId },
          update: {
            enabled: settings.learning.enabled,
            learningSpeed: settings.learning.learningSpeed,
            autoApplyImprovements: settings.learning.autoApplyImprovements,
            dataRetentionDays: settings.learning.dataRetentionDays,
            minimumSampleSize: settings.learning.minimumSampleSize,
            confidenceThreshold: settings.learning.confidenceThreshold,
            updatedAt: new Date()
          },
          create: {
            companyId: companyId,
            enabled: settings.learning.enabled || false,
            learningSpeed: settings.learning.learningSpeed || 'medium',
            autoApplyImprovements: settings.learning.autoApplyImprovements || false,
            dataRetentionDays: settings.learning.dataRetentionDays || 90,
            minimumSampleSize: settings.learning.minimumSampleSize || 50,
            confidenceThreshold: settings.learning.confidenceThreshold || 0.8
          }
        });
      }

      // تحديث إعدادات AI Agent
      if (settings.ai) {
        await aiAgentService.updateSettings({
          learningEnabled: settings.ai.learningEnabled
        }, companyId);
      }

      res.json({
        success: true,
        message: 'تم تحديث الإعدادات بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in updateSettings:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * تطبيق تحسين معين
   * POST /api/learning/improvements/:id/apply
   */
  async applyImprovement(req, res) {
    try {
      const { companyId } = req.user;
      const { id } = req.params;

      // البحث عن التحسين
      const improvement = await prisma.appliedImprovement.findFirst({
        where: {
          id: id,
          companyId: companyId
        }
      });

      if (!improvement) {
        return res.status(404).json({
          success: false,
          message: 'التحسين غير موجود'
        });
      }

      // تطبيق التحسين
      await aiAgentService.applyLearningImprovements(companyId);

      // تحديث حالة التحسين
      await prisma.appliedImprovement.update({
        where: { id: id },
        data: {
          status: 'active',
          updatedAt: new Date()
        }
      });

      res.json({
        success: true,
        message: 'تم تطبيق التحسين بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in applyImprovement:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * إيقاف تحسين معين
   * POST /api/learning/improvements/:id/disable
   */
  async disableImprovement(req, res) {
    try {
      const { companyId } = req.user;
      const { id } = req.params;

      // البحث عن التحسين
      const improvement = await prisma.appliedImprovement.findFirst({
        where: {
          id: id,
          companyId: companyId
        }
      });

      if (!improvement) {
        return res.status(404).json({
          success: false,
          message: 'التحسين غير موجود'
        });
      }

      // تحديث حالة التحسين
      await prisma.appliedImprovement.update({
        where: { id: id },
        data: {
          status: 'disabled',
          updatedAt: new Date()
        }
      });

      res.json({
        success: true,
        message: 'تم إيقاف التحسين بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in disableImprovement:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * الحصول على بيانات التعلم الخام
   * GET /api/learning/data
   */
  async getLearningData(req, res) {
    try {
      const { companyId } = req.user;
      const {
        page = 1,
        limit = 20,
        type,
        outcome,
        startDate,
        endDate
      } = req.query;

      // بناء شروط البحث
      const whereClause = { companyId: companyId };

      if (type) {
        whereClause.type = type;
      }

      if (outcome) {
        whereClause.outcome = outcome;
      }

      if (startDate || endDate) {
        whereClause.createdAt = {};
        if (startDate) {
          whereClause.createdAt.gte = new Date(startDate);
        }
        if (endDate) {
          whereClause.createdAt.lte = new Date(endDate);
        }
      }

      // حساب الإزاحة
      const skip = (parseInt(page) - 1) * parseInt(limit);

      // جلب البيانات
      const [data, total] = await Promise.all([
        prisma.learningData.findMany({
          where: whereClause,
          orderBy: { createdAt: 'desc' },
          skip: skip,
          take: parseInt(limit)
        }),
        prisma.learningData.count({ where: whereClause })
      ]);

      // تحويل البيانات للعرض
      const formattedData = data.map(item => ({
        id: item.id,
        type: item.type,
        outcome: item.outcome,
        data: item.data ? JSON.parse(item.data) : {},
        insights: item.insights ? JSON.parse(item.insights) : {},
        feedback: item.feedback ? JSON.parse(item.feedback) : {},
        createdAt: item.createdAt
      }));

      res.json({
        success: true,
        data: {
          items: formattedData,
          pagination: {
            page: parseInt(page),
            limit: parseInt(limit),
            total: total,
            pages: Math.ceil(total / parseInt(limit))
          },
          filters: {
            type: type || 'all',
            outcome: outcome || 'all',
            startDate: startDate || null,
            endDate: endDate || null
          }
        },
        message: 'تم جلب بيانات التعلم بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getLearningData:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * إضافة بيانات تعلم يدوياً
   * POST /api/learning/data
   */
  async addLearningData(req, res) {
    try {
      const { companyId } = req.user;
      const learningData = req.body;

      // التحقق من صحة البيانات
      if (!learningData.type || !learningData.data) {
        return res.status(400).json({
          success: false,
          message: 'نوع البيانات والمحتوى مطلوبان'
        });
      }

      // إضافة معرف الشركة
      learningData.companyId = companyId;

      // إضافة البيانات
      const result = await learningService.collectLearningData(learningData);

      if (!result.success) {
        return res.status(500).json({
          success: false,
          message: 'خطأ في إضافة بيانات التعلم',
          error: result.error
        });
      }

      res.json({
        success: true,
        data: result.data,
        message: 'تم إضافة بيانات التعلم بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in addLearningData:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }

  /**
   * مراقبة الأداء المباشر
   * GET /api/learning/performance
   */
  async getPerformance(req, res) {
    try {
      const { companyId } = req.user;

      // الحصول على مراقبة الأداء
      const performance = await aiAgentService.monitorImprovementPerformance(companyId);

      if (!performance.success) {
        return res.status(500).json({
          success: false,
          message: 'خطأ في مراقبة الأداء',
          error: performance.error
        });
      }

      res.json({
        success: true,
        data: performance,
        message: 'تم جلب بيانات الأداء بنجاح'
      });

    } catch (error) {
      console.error('❌ Error in getPerformance:', error);
      res.status(500).json({
        success: false,
        message: 'خطأ في الخادم',
        error: error.message
      });
    }
  }
}

module.exports = new ContinuousLearningController();
