/**
 * Middleware ูุฅูุดุงุก ุงูุดุฑูุงุช ูุน ุฅุนุฏุงุฏุงุช ูุฎุตุตุฉ ุชููุงุฆูุฉ
 * 
 * ูุถูู ุฃู ูู ุดุฑูุฉ ุฌุฏูุฏุฉ ุชุญุตู ุนูู:
 * - ุฅุนุฏุงุฏุงุช AI ูุฎุตุตุฉ
 * - Prompts ูุฎุตุตุฉ
 * - ููุงุชูุญ Gemini (ุฅุฐุง ูุงูุช ูุชููุฑุฉ)
 * - ุฅุนุฏุงุฏุงุช ุงูุชุฑุงุถูุฉ ุขููุฉ
 */

// ุชู ุฅุฒุงูุฉ DynamicPromptService - ุงูุดุฑูุงุช ุชูุชุจ prompts ุจููุณูุง
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

class CompanyCreationMiddleware {
  constructor() {
    // ูุง ูุญุชุงุฌ promptService - ุงูุดุฑูุงุช ุชูุชุจ prompts ุจููุณูุง
  }

  /**
   * ุฅูุดุงุก ุดุฑูุฉ ุฌุฏูุฏุฉ ูุน ุฌููุน ุงูุฅุนุฏุงุฏุงุช ุงููุทููุจุฉ
   */
  async createCompanyWithDefaults(companyData) {
    const transaction = await prisma.$transaction(async (tx) => {
      try {
        console.log(`๐ข ุฅูุดุงุก ุดุฑูุฉ ุฌุฏูุฏุฉ: ${companyData.name}`);

        // 1. ุฅูุดุงุก ุงูุดุฑูุฉ
        const company = await tx.company.create({
          data: {
            ...companyData,
            currency: companyData.currency || 'EGP',
            plan: companyData.plan || 'BASIC',
            isActive: true
          }
        });

        console.log(`โ ุชู ุฅูุดุงุก ุงูุดุฑูุฉ: ${company.name} (${company.id})`);

        // 2. ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI ูุฎุตุตุฉ
        const aiResult = await this.createAISettings(tx, company);
        if (!aiResult.success) {
          throw new Error(`ูุดู ูู ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI: ${aiResult.error}`);
        }

        // 3. ุฅูุดุงุก warehouse ุงูุชุฑุงุถู
        const warehouse = await this.createDefaultWarehouse(tx, company);

        // 4. ุฅูุดุงุก ูุณุชุฎุฏู admin ููุดุฑูุฉ (ุฅุฐุง ุชู ุชูุฑูุฑ ุจูุงูุงุช ุงููุณุชุฎุฏู)
        let adminUser = null;
        if (companyData.adminUser) {
          adminUser = await this.createAdminUser(tx, company, companyData.adminUser);
        }

        console.log(`๐ ุชู ุฅูุดุงุก ุงูุดุฑูุฉ ุจูุฌุงุญ ูุน ุฌููุน ุงูุฅุนุฏุงุฏุงุช ุงููุทููุจุฉ`);

        return {
          success: true,
          company,
          aiSettings: aiResult.aiSettings,
          warehouse,
          adminUser,
          requiresAISetup: aiResult.requiresSetup,
          setupMessage: aiResult.message
        };

      } catch (error) {
        console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุดุฑูุฉ:`, error);
        throw error;
      }
    });

    return transaction;
  }

  /**
   * ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI ุฃุณุงุณูุฉ ููุดุฑูุฉ (ุจุฏูู prompts)
   */
  async createAISettings(tx, company) {
    try {
      console.log(`๐ค ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI ุฃุณุงุณูุฉ ููุดุฑูุฉ: ${company.name}`);

      // ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI ุจุฏูู prompts (ุงูุดุฑูุฉ ุณุชูุชุจูุง ุจููุณูุง)
      const aiSettings = await tx.aiSettings.create({
        data: {
          companyId: company.id,
          personalityPrompt: `# ูุฌุจ ุฅุนุฏุงุฏ ุดุฎุตูุฉ ุงููุณุงุนุฏ ุงูุฐูู

ูุฑุฌู ูุชุงุจุฉ ุดุฎุตูุฉ ุงููุณุงุนุฏ ุงูุฐูู ุงูุฎุงุต ุจุดุฑูุฉ ${company.name} ููุง.

ูุซุงู:
ุฃูุช [ุงุณู ุงููุณุงุนุฏ]ุ ูุณุงุนุฏุฉ ูุจูุนุงุช ูุชุฎุตุตุฉ ูู ${company.name}.

ุฃุณููุจู:
- ูุฏูุฏ ููููู
- ูุชุฎุตุต ูู [ููุน ุงูููุชุฌุงุช]
- ูุณุชุฎุฏู ุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุงุถุญุฉ

ููุงูู:
- ูุณุงุนุฏุฉ ุงูุนููุงุก ูู ุงุฎุชูุงุฑ ุงูููุชุฌุงุช
- ุชูุฏูู ูุนูููุงุช ุฏูููุฉ ุนู ุงูุฃุณุนุงุฑ
- ุงูุฅุฌุงุจุฉ ุนูู ุงูุงุณุชูุณุงุฑุงุช ุจุทุฑููุฉ ูููุฏุฉ`,

          responsePrompt: `# ููุงุนุฏ ุงูุงุณุชุฌุงุจุฉ

ูุฑุฌู ูุชุงุจุฉ ููุงุนุฏ ุงูุงุณุชุฌุงุจุฉ ุงูุฎุงุตุฉ ุจุดุฑูุฉ ${company.name} ููุง.

ูุซุงู:
1. ุงุณุชุฎุฏู ููุท ุงููุนูููุงุช ุงูููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
2. ูุง ุชุฐูุฑ ููุชุฌุงุช ุบูุฑ ูุชููุฑุฉ
3. ุงุฐูุฑ ุงูุฃุณุนุงุฑ ุจุนููุฉ ${company.currency || 'ุฌููู'}
4. ูู ูููุฏุงู ููุฏูุฏุงู ูู ุฌููุน ุงูุฑุฏูุฏ`,

          autoReplyEnabled: true,
          confidenceThreshold: 0.7,
          maxRepliesPerCustomer: 10,
          multimodalEnabled: true,
          ragEnabled: true,
          workingHoursEnabled: false,
          autoCreateOrders: false,
          autoSuggestProducts: true,
          includeImages: true,
          maxSuggestions: 3,
          useAdvancedTools: false,
          qualityEvaluationEnabled: true
        }
      });

      console.log(`โ ุชู ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI ุฃุณุงุณูุฉ - ูุฌุจ ุนูู ุงูุดุฑูุฉ ุฅุนุฏุงุฏ ุงูู prompts`);

      return {
        success: true,
        aiSettings,
        requiresSetup: true,
        message: 'ูุฌุจ ุนูู ุงูุดุฑูุฉ ุฅุนุฏุงุฏ ุดุฎุตูุฉ ุงููุณุงุนุฏ ุงูุฐูู ูู ููุญุฉ ุงูุชุญูู'
      };

    } catch (error) {
      console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุฅุนุฏุงุฏุงุช AI:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * ุฅูุดุงุก warehouse ุงูุชุฑุงุถู ููุดุฑูุฉ
   */
  async createDefaultWarehouse(tx, company) {
    try {
      console.log(`๐ฆ ุฅูุดุงุก ูุณุชูุฏุน ุงูุชุฑุงุถู ููุดุฑูุฉ: ${company.name}`);

      const warehouse = await tx.warehouse.create({
        data: {
          name: 'ุงููุณุชูุฏุน ุงูุฑุฆูุณู',
          location: 'ุงูููุฑ ุงูุฑุฆูุณู',
          type: 'main',
          isActive: true,
          companyId: company.id
        }
      });

      console.log(`โ ุชู ุฅูุดุงุก ุงููุณุชูุฏุน ุงูุงูุชุฑุงุถู`);
      return warehouse;

    } catch (error) {
      console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ุงููุณุชูุฏุน:`, error);
      throw error;
    }
  }

  /**
   * ุฅูุดุงุก ูุณุชุฎุฏู admin ููุดุฑูุฉ
   */
  async createAdminUser(tx, company, userData) {
    try {
      console.log(`๐ค ุฅูุดุงุก ูุณุชุฎุฏู admin ููุดุฑูุฉ: ${company.name}`);

      const adminUser = await tx.user.create({
        data: {
          email: userData.email,
          password: userData.password, // ูุฌุจ ุฃู ูููู ููุดูุฑ ูุณุจูุงู
          firstName: userData.firstName,
          lastName: userData.lastName,
          role: 'COMPANY_ADMIN',
          isActive: true,
          isEmailVerified: userData.isEmailVerified || false,
          companyId: company.id
        }
      });

      console.log(`โ ุชู ุฅูุดุงุก ูุณุชุฎุฏู admin: ${adminUser.email}`);
      return adminUser;

    } catch (error) {
      console.error(`โ ุฎุทุฃ ูู ุฅูุดุงุก ูุณุชุฎุฏู admin:`, error);
      throw error;
    }
  }

  /**
   * ุงูุชุญูู ูู ุตุญุฉ ุจูุงูุงุช ุงูุดุฑูุฉ ูุจู ุงูุฅูุดุงุก
   */
  validateCompanyData(companyData) {
    const errors = [];

    // ุงูุชุญูู ูู ุงูุญููู ุงููุทููุจุฉ
    if (!companyData.name || companyData.name.trim() === '') {
      errors.push('ุงุณู ุงูุดุฑูุฉ ูุทููุจ');
    }

    if (!companyData.email || !this.isValidEmail(companyData.email)) {
      errors.push('ุจุฑูุฏ ุฅููุชุฑููู ุตุญูุญ ูุทููุจ');
    }

    // ุงูุชุญูู ูู ุงูุนููุฉ
    const validCurrencies = ['EGP', 'USD', 'EUR', 'SAR'];
    if (companyData.currency && !validCurrencies.includes(companyData.currency)) {
      errors.push('ุนููุฉ ุบูุฑ ุตุญูุญุฉ');
    }

    // ุงูุชุญูู ูู ุฎุทุฉ ุงูุงุดุชุฑุงู
    const validPlans = ['BASIC', 'PRO', 'ENTERPRISE'];
    if (companyData.plan && !validPlans.includes(companyData.plan)) {
      errors.push('ุฎุทุฉ ุงุดุชุฑุงู ุบูุฑ ุตุญูุญุฉ');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * ุงูุชุญูู ูู ุตุญุฉ ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
   */
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  /**
   * ุฅูุดุงุก ุฅุนุฏุงุฏุงุช ููุดุฑูุงุช ุงูููุฌูุฏุฉ ุงูุชู ุชูุชูุฑ ููุฅุนุฏุงุฏุงุช
   */
  async fixExistingCompanies() {
    try {
      console.log('๐ง ูุญุต ุงูุดุฑูุงุช ุงูููุฌูุฏุฉ ูุฅุตูุงุญ ุงูุฅุนุฏุงุฏุงุช ุงูููููุฏุฉ...');

      // ุงูุจุญุซ ุนู ุงูุดุฑูุงุช ุจุฏูู ุฅุนุฏุงุฏุงุช AI
      const companiesWithoutAI = await prisma.company.findMany({
        where: {
          aiSettings: null
        }
      });

      // ุงูุจุญุซ ุนู ุงูุดุฑูุงุช ุจุฏูู ูุณุชูุฏุนุงุช
      const companiesWithoutWarehouses = await prisma.company.findMany({
        where: {
          warehouses: {
            none: {}
          }
        }
      });

      console.log(`๐ ุงูุดุฑูุงุช ุงูุชู ุชุญุชุงุฌ ุฅุตูุงุญ:`);
      console.log(`   - ุจุฏูู ุฅุนุฏุงุฏุงุช AI: ${companiesWithoutAI.length}`);
      console.log(`   - ุจุฏูู ูุณุชูุฏุนุงุช: ${companiesWithoutWarehouses.length}`);

      // ุฅุตูุงุญ ุฅุนุฏุงุฏุงุช AI
      for (const company of companiesWithoutAI) {
        console.log(`๐ค ุฅุถุงูุฉ ุฅุนุฏุงุฏุงุช AI ููุดุฑูุฉ: ${company.name}`);
        await this.promptService.createCompanyAISettings(company.id, company);
      }

      // ุฅุตูุงุญ ุงููุณุชูุฏุนุงุช
      for (const company of companiesWithoutWarehouses) {
        console.log(`๐ฆ ุฅุถุงูุฉ ูุณุชูุฏุน ููุดุฑูุฉ: ${company.name}`);
        await prisma.warehouse.create({
          data: {
            name: 'ุงููุณุชูุฏุน ุงูุฑุฆูุณู',
            location: 'ุงูููุฑ ุงูุฑุฆูุณู',
            type: 'main',
            isActive: true,
            companyId: company.id
          }
        });
      }

      console.log('โ ุชู ุฅุตูุงุญ ุฌููุน ุงูุดุฑูุงุช ุงูููุฌูุฏุฉ');

      return {
        success: true,
        fixedAI: companiesWithoutAI.length,
        fixedWarehouses: companiesWithoutWarehouses.length
      };

    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุฅุตูุงุญ ุงูุดุฑูุงุช ุงูููุฌูุฏุฉ:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = CompanyCreationMiddleware;
