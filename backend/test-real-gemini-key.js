const axios = require('axios');

async function testRealGeminiKey() {
  console.log('๐ ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ููุชุงุญ Gemini ุญูููู ูุน ุงูุนุฒู...\n');

  const baseURL = 'http://localhost:3001';
  const realApiKey = 'AIzaSyDfva6184QKvdAMRey3Pp6oKdFHdpxrr-U';
  
  try {
    // 1. ุชุณุฌูู ุงูุฏุฎูู
    console.log('1๏ธโฃ ุชุณุฌูู ุงูุฏุฎูู:');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

    const loginResponse = await axios.post(`${baseURL}/api/v1/auth/login`, {
      email: 'admin@example.com',
      password: 'admin123'
    });

    const token = loginResponse.data.data.token;
    const user = loginResponse.data.data.user;
    console.log('โ ุชุณุฌูู ุงูุฏุฎูู ูุฌุญ');
    console.log('๐ข Company ID:', user.companyId);

    // 2. ูุญุต ุงูููุงุชูุญ ุงูุญุงููุฉ
    console.log('\n2๏ธโฃ ูุญุต ุงูููุงุชูุญ ุงูุญุงููุฉ:');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

    try {
      const currentKeysResponse = await axios.get(`${baseURL}/api/v1/ai/gemini-keys`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      console.log('โ ุชู ุฌูุจ ุงูููุงุชูุญ ุงูุญุงููุฉ');
      console.log('๐ ุนุฏุฏ ุงูููุงุชูุญ:', currentKeysResponse.data.summary?.totalKeys || 0);
      console.log('๐ข Company ID:', currentKeysResponse.data.companyId);

      if (currentKeysResponse.data.data && currentKeysResponse.data.data.length > 0) {
        console.log('\n๐ ุงูููุงุชูุญ ุงูููุฌูุฏุฉ:');
        currentKeysResponse.data.data.forEach((key, index) => {
          console.log(`${index + 1}. ${key.name}`);
          console.log(`   ๐ ID: ${key.id}`);
          console.log(`   โ ูุดุท: ${key.isActive ? 'ูุนู' : 'ูุง'}`);
        });
      }

    } catch (error) {
      console.log('โ ุฎุทุฃ ูู ุฌูุจ ุงูููุงุชูุญ ุงูุญุงููุฉ:', error.response?.data);
    }

    // 3. ุฅุถุงูุฉ ููุชุงุญ ุญูููู ุฌุฏูุฏ
    console.log('\n3๏ธโฃ ุฅุถุงูุฉ ููุชุงุญ ุญูููู ุฌุฏูุฏ:');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

    try {
      console.log('๐ ุฅุถุงูุฉ ููุชุงุญ Gemini ุญูููู...');
      console.log('๐ API Key:', realApiKey.substring(0, 20) + '...');

      const addKeyResponse = await axios.post(`${baseURL}/api/v1/ai/gemini-keys`, {
        name: 'ููุชุงุญ Gemini ุญูููู - ุงุฎุชุจุงุฑ ุงูุนุฒู',
        apiKey: realApiKey,
        description: 'ููุชุงุญ ุญูููู ูุงุฎุชุจุงุฑ ุงูุนุฒู ุจูู ุงูุดุฑูุงุช'
      }, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      console.log('โ ุชู ุฅุถุงูุฉ ุงูููุชุงุญ ุจูุฌุงุญ!');
      console.log('๐ ุงุณุชุฌุงุจุฉ ุงูุฎุงุฏู:', JSON.stringify(addKeyResponse.data, null, 2));

    } catch (error) {
      console.log('โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุชุงุญ:');
      console.log('- Status:', error.response?.status);
      console.log('- Status Text:', error.response?.statusText);
      console.log('- Error Data:', JSON.stringify(error.response?.data, null, 2));
      console.log('- Error Message:', error.message);
      
      if (error.response?.data?.details) {
        console.log('- Server Details:', error.response.data.details);
      }
    }

    // 4. ูุญุต ุงูููุงุชูุญ ุจุนุฏ ุงูุฅุถุงูุฉ
    console.log('\n4๏ธโฃ ูุญุต ุงูููุงุชูุญ ุจุนุฏ ุงูุฅุถุงูุฉ:');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

    try {
      const finalKeysResponse = await axios.get(`${baseURL}/api/v1/ai/gemini-keys`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      console.log('โ ุชู ุฌูุจ ุงูููุงุชูุญ ุงูููุงุฆูุฉ');
      console.log('๐ ุนุฏุฏ ุงูููุงุชูุญ:', finalKeysResponse.data.summary?.totalKeys || 0);
      console.log('๐ข Company ID:', finalKeysResponse.data.companyId);

      if (finalKeysResponse.data.data && finalKeysResponse.data.data.length > 0) {
        console.log('\n๐ ุฌููุน ุงูููุงุชูุญ:');
        finalKeysResponse.data.data.forEach((key, index) => {
          console.log(`${index + 1}. ${key.name}`);
          console.log(`   ๐ ID: ${key.id}`);
          console.log(`   ๐ API Key: ${key.apiKey || 'ูุฎูู'}`);
          console.log(`   โ ูุดุท: ${key.isActive ? 'ูุนู' : 'ูุง'}`);
          console.log(`   ๐ข Company ID: ${key.companyId || 'ุบูุฑ ูุญุฏุฏ'}`);
          console.log('   โ'.repeat(40));
        });
      }

    } catch (error) {
      console.log('โ ุฎุทุฃ ูู ุฌูุจ ุงูููุงุชูุญ ุงูููุงุฆูุฉ:', error.response?.data);
    }

    // 5. ุงุฎุชุจุงุฑ ุงูุนุฒู ูุน ุดุฑูุฉ ุฃุฎุฑู
    console.log('\n5๏ธโฃ ุงุฎุชุจุงุฑ ุงูุนุฒู ูุน ุดุฑูุฉ ุฃุฎุฑู:');
    console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

    try {
      // ุชุณุฌูู ุงูุฏุฎูู ุจุดุฑูุฉ ุฃุฎุฑู
      const company2LoginResponse = await axios.post(`${baseURL}/api/v1/auth/login`, {
        email: 'company1@test.com',
        password: 'password123'
      });

      const token2 = company2LoginResponse.data.data.token;
      const user2 = company2LoginResponse.data.data.user;
      console.log('โ ุชุณุฌูู ุงูุฏุฎูู ูุฌุญ ููุดุฑูุฉ ุงูุซุงููุฉ');
      console.log('๐ข Company ID:', user2.companyId);

      // ูุญุต ููุงุชูุญ ุงูุดุฑูุฉ ุงูุซุงููุฉ
      const company2KeysResponse = await axios.get(`${baseURL}/api/v1/ai/gemini-keys`, {
        headers: { 'Authorization': `Bearer ${token2}` }
      });

      console.log('\n๐ ููุงุชูุญ ุงูุดุฑูุฉ ุงูุซุงููุฉ:');
      console.log('- ุนุฏุฏ ุงูููุงุชูุญ:', company2KeysResponse.data.summary?.totalKeys || 0);
      console.log('- Company ID:', company2KeysResponse.data.companyId);

      if (company2KeysResponse.data.data && company2KeysResponse.data.data.length > 0) {
        console.log('\n๐ ููุงุชูุญ ุงูุดุฑูุฉ ุงูุซุงููุฉ:');
        company2KeysResponse.data.data.forEach((key, index) => {
          console.log(`${index + 1}. ${key.name} - Company: ${key.companyId}`);
        });
      } else {
        console.log('๐ญ ูุง ุชูุฌุฏ ููุงุชูุญ ููุดุฑูุฉ ุงูุซุงููุฉ (ูุฐุง ุตุญูุญ!)');
      }

      // 6. ุงูุชุญูู ูู ุงูุนุฒู ุงูููุงุฆู
      console.log('\n6๏ธโฃ ุงูุชุญูู ูู ุงูุนุฒู ุงูููุงุฆู:');
      console.log('โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ');

      const company1Keys = finalKeysResponse.data.summary?.totalKeys || 0;
      const company2Keys = company2KeysResponse.data.summary?.totalKeys || 0;
      const company1Id = user.companyId;
      const company2Id = user2.companyId;

      console.log('๐ ููุฎุต ุงูุนุฒู:');
      console.log(`- ุงูุดุฑูุฉ ุงูุฃููู (${company1Id}): ${company1Keys} ููุชุงุญ`);
      console.log(`- ุงูุดุฑูุฉ ุงูุซุงููุฉ (${company2Id}): ${company2Keys} ููุชุงุญ`);

      if (company1Id !== company2Id && company1Keys > company2Keys) {
        console.log('\n๐ข ุงูุนุฒู ูุนูู ุจุดูู ูุซุงูู!');
        console.log('โ ูู ุดุฑูุฉ ููุง ููุงุชูุญูุง ุงููููุตูุฉ');
        console.log('โ ุงูููุชุงุญ ุงูุฌุฏูุฏ ุฃุถูู ููุดุฑูุฉ ุงูุตุญูุญุฉ ููุท');
        console.log('โ ูุง ููุฌุฏ ุชุฏุงุฎู ูู ุงูุจูุงูุงุช');
      } else {
        console.log('\n๐ด ูุดููุฉ ูู ุงูุนุฒู!');
        console.log('โ ููุงู ุชุฏุงุฎู ูู ุงูููุงุชูุญ ุจูู ุงูุดุฑูุงุช');
      }

    } catch (error) {
      console.log('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุนุฒู:', error.response?.data || error.message);
    }

  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู ูู ุงูุงุฎุชุจุงุฑ:', error.message);
    if (error.response) {
      console.log('๐ฅ ุชูุงุตูู ุงูุฎุทุฃ:', error.response.data);
    }
  }
}

testRealGeminiKey();
