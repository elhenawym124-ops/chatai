// ุชู ุฅุฒุงูุฉ hardcoded company IDs - ุงุณุชุฎุฏู ุทุฑู ุฏููุงููููุฉ ููุญุตูู ุนูู ูุนุฑูุงุช ุงูุดุฑูุงุช

/**
 * ุงุฎุชุจุงุฑ ููุงุฆู ุดุงูู ูุนุฒู ุงูุฐุงูุฑุฉ
 * ููุญุต ุฌููุน ุฌูุงูุจ ุงูุนุฒู ุจุนุฏ ุงูุฅุตูุงุญุงุช
 */

const memoryService = require('./src/services/memoryService');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function finalMemoryIsolationTest() {
  console.log('๐ ุงูุงุฎุชุจุงุฑ ุงูููุงุฆู ุงูุดุงูู ูุนุฒู ุงูุฐุงูุฑุฉ');
  console.log('='.repeat(70));
  console.log('ููุญุต ุฌููุน ุฌูุงูุจ ุงูุนุฒู ุจุนุฏ ุงูุฅุตูุงุญุงุช ุงููุทุจูุฉ');
  console.log('');

  const company1 = 'cme8oj1fo000cufdcg2fquia9';
  const company2 = 'DYNAMIC_COMPANY_ID_NEEDED';
  const testCustomer = 'final-test-customer-999';

  let testResults = {
    memoryServiceIsolation: false,
    memoryStatsIsolation: false,
    databaseIsolation: false,
    shortTermMemoryIsolation: false,
    crossCompanyPrevention: false,
    apiSecurity: false,
    errors: []
  };

  try {
    // 1. ุงุฎุชุจุงุฑ ุนุฒู memoryService ุงูุฃุณุงุณู
    console.log('1๏ธโฃ ุงุฎุชุจุงุฑ ุนุฒู memoryService ุงูุฃุณุงุณู...');
    console.log('-'.repeat(50));

    // ุฅุถุงูุฉ ุจูุงูุงุช ููุดุฑูุฉ ุงูุฃููู
    await memoryService.saveInteraction({
      conversationId: 'final-conv-1',
      senderId: testCustomer,
      companyId: company1,
      userMessage: 'ุฑุณุงูุฉ ุณุฑูุฉ ููุดุฑูุฉ ุงูุฃููู - ููุงุฆู',
      aiResponse: 'ุฑุฏ ุณุฑู ููุดุฑูุฉ ุงูุฃููู',
      intent: 'secret_final_1',
      sentiment: 'positive'
    });

    // ุฅุถุงูุฉ ุจูุงูุงุช ููุดุฑูุฉ ุงูุซุงููุฉ
    await memoryService.saveInteraction({
      conversationId: 'final-conv-2',
      senderId: testCustomer,
      companyId: company2,
      userMessage: 'ุฑุณุงูุฉ ุณุฑูุฉ ููุดุฑูุฉ ุงูุซุงููุฉ - ููุงุฆู',
      aiResponse: 'ุฑุฏ ุณุฑู ููุดุฑูุฉ ุงูุซุงููุฉ',
      intent: 'secret_final_2',
      sentiment: 'positive'
    });

    // ูุญุต ุงูุนุฒู
    const memory1 = await memoryService.getConversationMemory(
      'final-conv-1', testCustomer, 10, company1
    );
    const memory2 = await memoryService.getConversationMemory(
      'final-conv-2', testCustomer, 10, company2
    );

    const hasCompany1Data = memory1.some(m => m.intent === 'secret_final_1');
    const hasCompany2Data = memory2.some(m => m.intent === 'secret_final_2');
    const company1HasCompany2Data = memory1.some(m => m.intent === 'secret_final_2');
    const company2HasCompany1Data = memory2.some(m => m.intent === 'secret_final_1');

    if (hasCompany1Data && hasCompany2Data && !company1HasCompany2Data && !company2HasCompany1Data) {
      testResults.memoryServiceIsolation = true;
      console.log('โ ุนุฒู memoryService ูุนูู ุจุดูู ูุซุงูู');
    } else {
      testResults.errors.push('ูุดู ูู ุนุฒู memoryService ุงูุฃุณุงุณู');
      console.log('โ ูุดููุฉ ูู ุนุฒู memoryService');
    }

    // 2. ุงุฎุชุจุงุฑ ุนุฒู ุฅุญุตุงุฆูุงุช ุงูุฐุงูุฑุฉ
    console.log('\n2๏ธโฃ ุงุฎุชุจุงุฑ ุนุฒู ุฅุญุตุงุฆูุงุช ุงูุฐุงูุฑุฉ...');
    console.log('-'.repeat(50));

    const stats1 = await memoryService.getMemoryStats(company1);
    const stats2 = await memoryService.getMemoryStats(company2);
    const statsAll = await memoryService.getMemoryStats();

    const statsIsolationChecks = {
      company1Isolated: stats1.isolated === true && stats1.companyId === company1,
      company2Isolated: stats2.isolated === true && stats2.companyId === company2,
      allNotIsolated: statsAll.isolated === false && statsAll.companyId === 'all_companies',
      differentStats: stats1.conversationMemoryRecords !== stats2.conversationMemoryRecords,
      sumCorrect: statsAll.conversationMemoryRecords >= (stats1.conversationMemoryRecords + stats2.conversationMemoryRecords)
    };

    console.log('ูุญุต ุนุฒู ุงูุฅุญุตุงุฆูุงุช:');
    Object.entries(statsIsolationChecks).forEach(([check, passed]) => {
      const status = passed ? 'โ' : 'โ';
      console.log(`   ${status} ${check}: ${passed}`);
    });

    if (Object.values(statsIsolationChecks).every(check => check === true)) {
      testResults.memoryStatsIsolation = true;
      console.log('โ ุนุฒู ุฅุญุตุงุฆูุงุช ุงูุฐุงูุฑุฉ ูุนูู ุจุดูู ูุซุงูู');
    } else {
      testResults.errors.push('ูุดู ูู ุนุฒู ุฅุญุตุงุฆูุงุช ุงูุฐุงูุฑุฉ');
    }

    // 3. ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('\n3๏ธโฃ ูุญุต ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    console.log('-'.repeat(50));

    const allRecords = await prisma.conversationMemory.findMany({
      where: {
        senderId: testCustomer
      },
      select: { companyId: true, intent: true }
    });

    const company1Records = allRecords.filter(r => r.companyId === company1);
    const company2Records = allRecords.filter(r => r.companyId === company2);

    const dbIsolationChecks = {
      company1HasOwnRecords: company1Records.length > 0,
      company2HasOwnRecords: company2Records.length > 0,
      noMixedIntents: !company1Records.some(r => r.intent === 'secret_final_2') &&
                     !company2Records.some(r => r.intent === 'secret_final_1'),
      allRecordsHaveCompanyId: allRecords.every(r => r.companyId && r.companyId.length > 0)
    };

    console.log('ูุญุต ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    Object.entries(dbIsolationChecks).forEach(([check, passed]) => {
      const status = passed ? 'โ' : 'โ';
      console.log(`   ${status} ${check}: ${passed}`);
    });

    if (Object.values(dbIsolationChecks).every(check => check === true)) {
      testResults.databaseIsolation = true;
      console.log('โ ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุนูู ุจุดูู ูุซุงูู');
    } else {
      testResults.errors.push('ูุดู ูู ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }

    // 4. ูุญุต ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู
    console.log('\n4๏ธโฃ ูุญุต ุนุฒู ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู...');
    console.log('-'.repeat(50));

    const shortTermKeys = Array.from(memoryService.shortTermMemory.keys());
    const company1Keys = shortTermKeys.filter(key => key.startsWith(`${company1}_`));
    const company2Keys = shortTermKeys.filter(key => key.startsWith(`${company2}_`));
    const invalidKeys = shortTermKeys.filter(key => key.split('_').length < 3);

    console.log(`ููุงุชูุญ ุงูุดุฑูุฉ ุงูุฃููู: ${company1Keys.length}`);
    console.log(`ููุงุชูุญ ุงูุดุฑูุฉ ุงูุซุงููุฉ: ${company2Keys.length}`);
    console.log(`ููุงุชูุญ ุบูุฑ ุตุญูุญุฉ: ${invalidKeys.length}`);

    if (invalidKeys.length === 0) {
      testResults.shortTermMemoryIsolation = true;
      console.log('โ ุนุฒู ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู ูุนูู ุจุดูู ูุซุงูู');
    } else {
      testResults.errors.push(`${invalidKeys.length} ููุชุงุญ ุบูุฑ ุตุญูุญ ูู ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู`);
      console.log('โ ูุดููุฉ ูู ุนุฒู ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู');
    }

    // 5. ุงุฎุชุจุงุฑ ููุน ุงููุตูู ุงููุชูุงุทุน
    console.log('\n5๏ธโฃ ุงุฎุชุจุงุฑ ููุน ุงููุตูู ุงููุชูุงุทุน...');
    console.log('-'.repeat(50));

    // ูุญุงููุฉ ุงูุดุฑูุฉ ุงูุฃููู ุงููุตูู ูุจูุงูุงุช ุงูุซุงููุฉ
    const crossAccess1 = await memoryService.getConversationMemory(
      'final-conv-2', testCustomer, 10, company1
    );

    // ูุญุงููุฉ ุงูุดุฑูุฉ ุงูุซุงููุฉ ุงููุตูู ูุจูุงูุงุช ุงูุฃููู
    const crossAccess2 = await memoryService.getConversationMemory(
      'final-conv-1', testCustomer, 10, company2
    );

    if (crossAccess1.length === 0 && crossAccess2.length === 0) {
      testResults.crossCompanyPrevention = true;
      console.log('โ ููุน ุงููุตูู ุงููุชูุงุทุน ูุนูู ุจุดูู ูุซุงูู');
    } else {
      testResults.errors.push('ูุดู ูู ููุน ุงููุตูู ุงููุชูุงุทุน');
      console.log('โ ูุดููุฉ ูู ููุน ุงููุตูู ุงููุชูุงุทุน');
    }

    // 6. ูุญุต ุฃูุงู API
    console.log('\n6๏ธโฃ ูุญุต ุฃูุงู API...');
    console.log('-'.repeat(50));

    // ูุญุงูุงุฉ ุงุณุชุฏุนุงุก getMemoryStats ุจุฏูู companyId
    try {
      const unsafeStats = await memoryService.getMemoryStats();
      if (unsafeStats.isolated === false && unsafeStats.companyId === 'all_companies') {
        console.log('โ API ูุชุทูุจ companyId ููุนุฒู ุงูุฃููู');
        testResults.apiSecurity = true;
      } else {
        testResults.errors.push('ูุดููุฉ ูู ุฃูุงู API');
      }
    } catch (error) {
      testResults.errors.push(`ุฎุทุฃ ูู ูุญุต ุฃูุงู API: ${error.message}`);
    }

    // 7. ุชุญููู ููุงุฆู ุดุงูู
    console.log('\n๐ ุงูุชุญููู ุงูููุงุฆู ุงูุดุงูู');
    console.log('='.repeat(70));

    const passedTests = Object.values(testResults).filter(result => result === true).length;
    const totalTests = Object.keys(testResults).length - 1; // ุงุณุชุซูุงุก errors

    console.log('๐ ูุชุงุฆุฌ ุงูุงุฎุชุจุงุฑุงุช:');
    Object.entries(testResults).forEach(([test, passed]) => {
      if (test !== 'errors') {
        const status = passed ? 'โ ูุฌุญ' : 'โ ูุดู';
        console.log(`   ${status} ${test}`);
      }
    });

    if (testResults.errors.length > 0) {
      console.log('\n๐จ ุงูุฃุฎุทุงุก ุงูููุชุดูุฉ:');
      testResults.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error}`);
      });
    }

    console.log(`\n๐ฏ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ: ${passedTests}/${totalTests} ุงุฎุชุจุงุฑ ูุฌุญ`);

    if (passedTests === totalTests && testResults.errors.length === 0) {
      console.log('\n๐๐๐ ุงููุฌุงุญ ุงููุงูู! ๐๐๐');
      console.log('โ ุงูุนุฒู ูู ุงูุฐุงูุฑุฉ ูุทุจู ุจุดูู ูุซุงูู ููุชูุงูู');
      console.log('โ ุฌููุน ูุดุงูู ุงูุนุฒู ุชู ุฅุตูุงุญูุง ุจูุฌุงุญ');
      console.log('โ ุงููุธุงู ุขูู ููุนุฒูู ุจุงููุงูู');
      console.log('โ ุฌุงูุฒ ููุฅูุชุงุฌ ูู ูุงุญูุฉ ุงูุนุฒู ูุงูุฃูุงู');
      console.log('๐ ุงูุฎุตูุตูุฉ ูุงูุฃูุงู ูุถูููุงู 100%');
      console.log('๐ ุชู ุญู ุฌููุน ูุดุงูู ุนุฏู ุงูุนุฒู ูู ุฅุฏุงุฑุฉ ุงูุฐุงูุฑุฉ!');
    } else {
      console.log('\n๐จ ูุง ุชุฒุงู ููุงู ูุดุงูู ุชุญุชุงุฌ ุฅุตูุงุญ!');
      console.log('โ ุงููุธุงู ุบูุฑ ุขูู ููุฅูุชุงุฌ');
    }

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ ุงูููุงุฆู:', error.message);
    testResults.errors.push(`ุฎุทุฃ ุนุงู: ${error.message}`);
  } finally {
    await prisma.$disconnect();
  }
}

finalMemoryIsolationTest().catch(console.error);
