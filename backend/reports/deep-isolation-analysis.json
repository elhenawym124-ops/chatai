{
  "metadata": {
    "timestamp": "2025-08-16T03:19:10.783Z",
    "scanType": "DEEP_ISOLATION_ANALYSIS",
    "version": "2.0.0"
  },
  "summary": {
    "filesScanned": 181,
    "codeLines": 90547,
    "totalIssues": 902,
    "criticalIssues": 39,
    "highIssues": 295,
    "mediumIssues": 211,
    "lowIssues": 357
  },
  "metrics": {
    "isolationCoverage": 80,
    "riskScore": 42,
    "complianceLevel": 58
  },
  "issues": [
    {
      "file": "src\\config\\database.ts",
      "line": 45,
      "content": "await prisma.$queryRaw`SELECT 1`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "    \n    // Run a simple query to verify the connection",
        "current": "    await prisma.$queryRaw`SELECT 1`;",
        "after": "    \n    logger.info('Database connection established successfully');"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\database.ts",
      "line": 83,
      "content": "await prisma.$queryRaw`SELECT 1`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "    }\n",
        "current": "    await prisma.$queryRaw`SELECT 1`;",
        "after": "    return true;\n  } catch (error) {"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\database.ts",
      "line": 148,
      "content": "const tables = await client.$queryRaw<Array<{ TABLE_NAME: string }>>`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  \n  // Get all table names (MySQL version)",
        "current": "  const tables = await client.$queryRaw<Array<{ TABLE_NAME: string }>>`",
        "after": "    SELECT TABLE_NAME FROM information_schema.tables\n    WHERE table_schema = DATABASE() AND table_type = 'BASE TABLE'"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\database.ts",
      "line": 154,
      "content": "await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 0;`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "\n  // Disable foreign key checks (MySQL)",
        "current": "  await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 0;`;",
        "after": "\n  // Truncate all tables"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\database.ts",
      "line": 159,
      "content": "await client.$executeRawUnsafe(`TRUNCATE TABLE \\`${table.TABLE_NAME}\\`;`);",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  for (const table of tables) {\n    if (table.TABLE_NAME !== '_prisma_migrations') {",
        "current": "      await client.$executeRawUnsafe(`TRUNCATE TABLE \\`${table.TABLE_NAME}\\`;`);",
        "after": "    }\n  }"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\database.ts",
      "line": 164,
      "content": "await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 1;`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "\n  // Re-enable foreign key checks (MySQL)",
        "current": "  await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 1;`;",
        "after": "\n  logger.info('Database cleaned up for testing');"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\config\\index.ts",
      "line": 15,
      "content": "env: process.env.NODE_ENV || 'development',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "export const config = {\n  // Environment",
        "current": "  env: process.env.NODE_ENV || 'development',",
        "after": "  port: parseInt(process.env.PORT || '3001', 10),\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 16,
      "content": "port: parseInt(process.env.PORT || '3001', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Environment\n  env: process.env.NODE_ENV || 'development',",
        "current": "  port: parseInt(process.env.PORT || '3001', 10),",
        "after": "\n  // Database"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 20,
      "content": "url: process.env.DATABASE_URL || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Database\n  database: {",
        "current": "    url: process.env.DATABASE_URL || '',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 25,
      "content": "url: process.env.REDIS_URL || 'redis://localhost:6379',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Redis\n  redis: {",
        "current": "    url: process.env.REDIS_URL || 'redis://localhost:6379',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 30,
      "content": "secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // JWT Configuration\n  jwt: {",
        "current": "    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
        "after": "    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\n    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 31,
      "content": "expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  jwt: {\n    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
        "current": "    expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
        "after": "    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 32,
      "content": "refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',\n    expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
        "current": "    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 37,
      "content": "secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Session Configuration\n  session: {",
        "current": "    secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
        "after": "    maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 38,
      "content": "maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  session: {\n    secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
        "current": "    maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 43,
      "content": "origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // CORS Configuration\n  cors: {",
        "current": "    origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 48,
      "content": "appId: process.env.FACEBOOK_APP_ID || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Facebook Configuration\n  facebook: {",
        "current": "    appId: process.env.FACEBOOK_APP_ID || '',",
        "after": "    appSecret: process.env.FACEBOOK_APP_SECRET || '',\n    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 49,
      "content": "appSecret: process.env.FACEBOOK_APP_SECRET || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  facebook: {\n    appId: process.env.FACEBOOK_APP_ID || '',",
        "current": "    appSecret: process.env.FACEBOOK_APP_SECRET || '',",
        "after": "    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 50,
      "content": "verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    appId: process.env.FACEBOOK_APP_ID || '',\n    appSecret: process.env.FACEBOOK_APP_SECRET || '',",
        "current": "    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 58,
      "content": "maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    apiKey: '', // لا يُستخدم - يتم الحصول على المفتاح من قاعدة البيانات\n    model: 'gemini-pro',",
        "current": "    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
        "after": "    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),\n    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 59,
      "content": "temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    model: 'gemini-pro',\n    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
        "current": "    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
        "after": "    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 60,
      "content": "timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),\n    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
        "current": "    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 66,
      "content": "host: process.env.SMTP_HOST || 'smtp.gmail.com',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  email: {\n    smtp: {",
        "current": "      host: process.env.SMTP_HOST || 'smtp.gmail.com',",
        "after": "      port: parseInt(process.env.SMTP_PORT || '587', 10),\n      user: process.env.SMTP_USER || '',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 67,
      "content": "port: parseInt(process.env.SMTP_PORT || '587', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    smtp: {\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',",
        "current": "      port: parseInt(process.env.SMTP_PORT || '587', 10),",
        "after": "      user: process.env.SMTP_USER || '',\n      pass: process.env.SMTP_PASS || '',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 68,
      "content": "user: process.env.SMTP_USER || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587', 10),",
        "current": "      user: process.env.SMTP_USER || '',",
        "after": "      pass: process.env.SMTP_PASS || '',\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 69,
      "content": "pass: process.env.SMTP_PASS || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      port: parseInt(process.env.SMTP_PORT || '587', 10),\n      user: process.env.SMTP_USER || '',",
        "current": "      pass: process.env.SMTP_PASS || '',",
        "after": "    },\n    from: {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 72,
      "content": "email: process.env.FROM_EMAIL || 'noreply@example.com',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    },\n    from: {",
        "current": "      email: process.env.FROM_EMAIL || 'noreply@example.com',",
        "after": "      name: process.env.FROM_NAME || 'Communication Platform',\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 73,
      "content": "name: process.env.FROM_NAME || 'Communication Platform',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    from: {\n      email: process.env.FROM_EMAIL || 'noreply@example.com',",
        "current": "      name: process.env.FROM_NAME || 'Communication Platform',",
        "after": "    },\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 80,
      "content": "accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  sms: {\n    twilio: {",
        "current": "      accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
        "after": "      authToken: process.env.TWILIO_AUTH_TOKEN || '',\n      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 81,
      "content": "authToken: process.env.TWILIO_AUTH_TOKEN || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    twilio: {\n      accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
        "current": "      authToken: process.env.TWILIO_AUTH_TOKEN || '',",
        "after": "      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 82,
      "content": "phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      accountSid: process.env.TWILIO_ACCOUNT_SID || '',\n      authToken: process.env.TWILIO_AUTH_TOKEN || '',",
        "current": "      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',",
        "after": "    },\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 89,
      "content": "secretKey: process.env.STRIPE_SECRET_KEY || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  payment: {\n    stripe: {",
        "current": "      secretKey: process.env.STRIPE_SECRET_KEY || '',",
        "after": "      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',\n      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 90,
      "content": "publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    stripe: {\n      secretKey: process.env.STRIPE_SECRET_KEY || '',",
        "current": "      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
        "after": "      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 91,
      "content": "webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      secretKey: process.env.STRIPE_SECRET_KEY || '',\n      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
        "current": "      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',",
        "after": "    },\n    paypal: {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 94,
      "content": "clientId: process.env.PAYPAL_CLIENT_ID || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    },\n    paypal: {",
        "current": "      clientId: process.env.PAYPAL_CLIENT_ID || '',",
        "after": "      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',\n      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 95,
      "content": "clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    paypal: {\n      clientId: process.env.PAYPAL_CLIENT_ID || '',",
        "current": "      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
        "after": "      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 96,
      "content": "mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      clientId: process.env.PAYPAL_CLIENT_ID || '',\n      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
        "current": "      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live",
        "after": "    },\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 102,
      "content": "maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // File Upload Configuration\n  upload: {",
        "current": "    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
        "after": "    uploadPath: process.env.UPLOAD_PATH || './uploads',\n    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 103,
      "content": "uploadPath: process.env.UPLOAD_PATH || './uploads',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  upload: {\n    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
        "current": "    uploadPath: process.env.UPLOAD_PATH || './uploads',",
        "after": "    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 104,
      "content": "allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB\n    uploadPath: process.env.UPLOAD_PATH || './uploads',",
        "current": "    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 109,
      "content": "windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Rate Limiting Configuration\n  rateLimit: {",
        "current": "    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
        "after": "    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 110,
      "content": "maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  rateLimit: {\n    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
        "current": "    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 115,
      "content": "level: process.env.LOG_LEVEL || 'info',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Logging Configuration\n  logging: {",
        "current": "    level: process.env.LOG_LEVEL || 'info',",
        "after": "    file: process.env.LOG_FILE || './logs/app.log',\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 116,
      "content": "file: process.env.LOG_FILE || './logs/app.log',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  logging: {\n    level: process.env.LOG_LEVEL || 'info',",
        "current": "    file: process.env.LOG_FILE || './logs/app.log',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 121,
      "content": "sentryDsn: process.env.SENTRY_DSN || '',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Monitoring Configuration\n  monitoring: {",
        "current": "    sentryDsn: process.env.SENTRY_DSN || '',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 126,
      "content": "baseUrl: process.env.WEBHOOK_BASE_URL || 'http://localhost:3001/webhooks',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Webhook Configuration\n  webhooks: {",
        "current": "    baseUrl: process.env.WEBHOOK_BASE_URL || 'http://localhost:3001/webhooks',",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 131,
      "content": "defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Company Settings\n  company: {",
        "current": "    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
        "after": "    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),\n    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 132,
      "content": "maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  company: {\n    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
        "current": "    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
        "after": "    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 133,
      "content": "maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',\n    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
        "current": "    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),",
        "after": "  },\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 138,
      "content": "enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Feature Flags\n  features: {",
        "current": "    enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
        "after": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',\n    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 139,
      "content": "enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  features: {\n    enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
        "current": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
        "after": "    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',\n    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 140,
      "content": "enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    enableAI: process.env.ENABLE_AI_FEATURES === 'true',\n    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
        "current": "    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
        "after": "    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\config\\index.ts",
      "line": 141,
      "content": "enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',\n    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
        "current": "    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
        "after": "  },\n} as const;"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\advancedAiController.js",
      "line": 33,
      "content": "console.log(`🤖 طلب رد متقدم من الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🤖 طلب رد متقدم من الشركة: ${companyId}`);",
        "after": "      console.log(`💬 الرسالة: \"${message}\"`);\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\advancedAiController.js",
      "line": 84,
      "content": "console.log(`🧪 اختبار الأدوات للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🧪 اختبار الأدوات للشركة: ${companyId}`);",
        "after": "\n      const result = await this.geminiService.testTools(companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\authController.ts",
      "line": 109,
      "content": "secure: process.env.NODE_ENV === 'production',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
        "current": "    secure: process.env.NODE_ENV === 'production',",
        "after": "    sameSite: 'strict',\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\authController.ts",
      "line": 154,
      "content": "secure: process.env.NODE_ENV === 'production',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
        "current": "    secure: process.env.NODE_ENV === 'production',",
        "after": "    sameSite: 'strict',\n    maxAge: cookieMaxAge,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\authController.ts",
      "line": 219,
      "content": "secure: process.env.NODE_ENV === 'production',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
        "current": "    secure: process.env.NODE_ENV === 'production',",
        "after": "    sameSite: 'strict',\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 22,
      "content": "const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "  async getDashboard(req, res) {\n    try {",
        "current": "      const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };",
        "after": "\n      console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 24,
      "content": "console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };\n",
        "current": "      console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);",
        "after": "\n      // الحصول على البيانات الأساسية من قاعدة البيانات مباشرة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 28,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على البيانات الأساسية من قاعدة البيانات مباشرة\n      const totalInteractions = await prisma.learningData.count({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 32,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const discoveredPatterns = await prisma.discoveredPattern.count({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 36,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const appliedImprovements = await prisma.appliedImprovement.count({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 53,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على النشاط الحديث\n      const recentActivity = await prisma.learningData.findMany({",
        "current": "        where: { companyId },",
        "after": "        orderBy: { createdAt: 'desc' },\n        take: 5,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 373,
      "content": "where: { companyId: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (settings.learning) {\n        await prisma.learningSettings.upsert({",
        "current": "          where: { companyId: companyId },",
        "after": "          update: {\n            enabled: settings.learning.enabled,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 446,
      "content": "where: { id: id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث حالة التحسين\n      await prisma.appliedImprovement.update({",
        "current": "        where: { id: id },",
        "after": "        data: {\n          status: 'active',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\controllers\\continuousLearningController_old.js",
      "line": 494,
      "content": "where: { id: id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث حالة التحسين\n      await prisma.appliedImprovement.update({",
        "current": "        where: { id: id },",
        "after": "        data: {\n          status: 'disabled',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 38,
      "content": "console.log(`🔀 طلب رد هجين من الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      const aiSettings = await this.getAiSettings(companyId);\n",
        "current": "      console.log(`🔀 طلب رد هجين من الشركة: ${companyId}`);",
        "after": "      console.log(`💬 الرسالة: \"${message}\"`);\n      console.log(`⚙️ النظام المتقدم مفعل: ${aiSettings?.useAdvancedTools ? 'نعم' : 'لا'}`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 91,
      "content": "console.log(`🚀 تفعيل النظام المتقدم للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🚀 تفعيل النظام المتقدم للشركة: ${companyId}`);",
        "after": "\n      const result = await this.hybridService.enableAdvancedSystem(companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 124,
      "content": "console.log(`📱 إلغاء تفعيل النظام المتقدم للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`📱 إلغاء تفعيل النظام المتقدم للشركة: ${companyId}`);",
        "after": "\n      const result = await this.hybridService.disableAdvancedSystem(companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 162,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 240,
      "content": "console.log(`🧪 اختبار النظام الهجين للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🧪 اختبار النظام الهجين للشركة: ${companyId}`);",
        "after": "\n      // اختبار النظام التقليدي"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\controllers\\hybridAiController.js",
      "line": 301,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const systemConfig = await this.prisma.systemConfig.findUnique({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\controllers\\intelligentChatController.js",
      "line": 40,
      "content": "console.log(`🏢 الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      console.log('🚀 طلب رد ذكي جديد...');\n      console.log(`💬 الرسالة: \"${message}\"`);",
        "current": "      console.log(`🏢 الشركة: ${companyId}`);",
        "after": "      console.log(`👤 العميل: ${customerId || 'غير محدد'}`);\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\ai\\controllers\\AIController.ts",
      "line": 161,
      "content": "where: { companyId: user.companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get AI settings from database\n    const settings = await this.prisma.aiSettings.findUnique({",
        "current": "      where: { companyId: user.companyId },",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\controllers\\AIController.ts",
      "line": 291,
      "content": "where: { id: customerId, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get customer info\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: customerId, companyId },",
        "after": "        include: {\n          orders: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\controllers\\AIController.ts",
      "line": 313,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get company info\n      const company = await this.prisma.company.findUnique({",
        "current": "        where: { id: companyId },",
        "after": "        include: {\n          products: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\controllers\\AIController.ts",
      "line": 325,
      "content": "where: { conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (conversationId) {\n        const messages = await this.prisma.message.findMany({",
        "current": "          where: { conversationId },",
        "after": "          orderBy: { createdAt: 'desc' },\n          take: 10,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 19,
      "content": "router.post('/generate-response', aiController.generateResponse);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// AI response generation",
        "current": "router.post('/generate-response', aiController.generateResponse);",
        "after": "\n// Analysis endpoints"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 22,
      "content": "router.post('/analyze-sentiment', aiController.analyzeSentiment);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Analysis endpoints",
        "current": "router.post('/analyze-sentiment', aiController.analyzeSentiment);",
        "after": "router.post('/recommend-products', aiController.recommendProducts);\nrouter.get('/insights/:conversationId', aiController.getConversationInsights);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 23,
      "content": "router.post('/recommend-products', aiController.recommendProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Analysis endpoints\nrouter.post('/analyze-sentiment', aiController.analyzeSentiment);",
        "current": "router.post('/recommend-products', aiController.recommendProducts);",
        "after": "router.get('/insights/:conversationId', aiController.getConversationInsights);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 24,
      "content": "router.get('/insights/:conversationId', aiController.getConversationInsights);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/analyze-sentiment', aiController.analyzeSentiment);\nrouter.post('/recommend-products', aiController.recommendProducts);",
        "current": "router.get('/insights/:conversationId', aiController.getConversationInsights);",
        "after": "\n// Analytics (managers and admins only)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 27,
      "content": "router.get('/analytics', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAnalytics);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Analytics (managers and admins only)",
        "current": "router.get('/analytics', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAnalytics);",
        "after": "\n// Settings management (managers and admins only)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 30,
      "content": "router.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Settings management (managers and admins only)",
        "current": "router.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
        "after": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 31,
      "content": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Settings management (managers and admins only)\nrouter.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
        "current": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);",
        "after": "\n// Testing (managers and admins only)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 34,
      "content": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.testResponse);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Testing (managers and admins only)",
        "current": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.testResponse);",
        "after": "\n// ==================== ADVANCED AI ROUTES ===================="
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 39,
      "content": "router.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Model management",
        "current": "router.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
        "after": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 40,
      "content": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Model management\nrouter.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
        "current": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);",
        "after": "\n// Advanced response generation"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 43,
      "content": "router.post('/generate-advanced-response', aiController.generateAdvancedResponse);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Advanced response generation",
        "current": "router.post('/generate-advanced-response', aiController.generateAdvancedResponse);",
        "after": "\n// ==================== PROMPT MANAGEMENT ROUTES ===================="
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 48,
      "content": "router.get('/prompt-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getPromptTemplates);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Prompt templates",
        "current": "router.get('/prompt-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getPromptTemplates);",
        "after": "\n// Company prompts"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 51,
      "content": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Company prompts",
        "current": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
        "after": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);\nrouter.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 52,
      "content": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Company prompts\nrouter.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
        "current": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
        "after": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 53,
      "content": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);\nrouter.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
        "current": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);",
        "after": "\n// ==================== NEW PROMPT MANAGEMENT ROUTES ===================="
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 58,
      "content": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Static prompts management",
        "current": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
        "after": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);\nrouter.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 59,
      "content": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Static prompts management\nrouter.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
        "current": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
        "after": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);\nrouter.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 60,
      "content": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);\nrouter.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
        "current": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
        "after": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 61,
      "content": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);\nrouter.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
        "current": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);",
        "after": "\n// Business templates management"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 64,
      "content": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Business templates management",
        "current": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
        "after": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);\nrouter.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 65,
      "content": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Business templates management\nrouter.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
        "current": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
        "after": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 66,
      "content": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);\nrouter.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
        "current": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);",
        "after": "\n// Advanced services management"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 69,
      "content": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Advanced services management",
        "current": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
        "after": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);\nrouter.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 70,
      "content": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Advanced services management\nrouter.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
        "current": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
        "after": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);\nrouter.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 71,
      "content": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);\nrouter.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
        "current": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
        "after": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 72,
      "content": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);\nrouter.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
        "current": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);",
        "after": "\n// ==================== PRODUCT AI ROUTES ===================="
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 77,
      "content": "router.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Product AI settings",
        "current": "router.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
        "after": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 78,
      "content": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Product AI settings\nrouter.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
        "current": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);",
        "after": "\n// Product recommendations and analysis"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 81,
      "content": "router.post('/recommend-products-advanced', aiController.recommendProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Product recommendations and analysis",
        "current": "router.post('/recommend-products-advanced', aiController.recommendProducts);",
        "after": "router.post('/analyze-image', aiController.analyzeCustomerImage);\nrouter.post('/create-order', aiController.createOrderFromConversation);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 82,
      "content": "router.post('/analyze-image', aiController.analyzeCustomerImage);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Product recommendations and analysis\nrouter.post('/recommend-products-advanced', aiController.recommendProducts);",
        "current": "router.post('/analyze-image', aiController.analyzeCustomerImage);",
        "after": "router.post('/create-order', aiController.createOrderFromConversation);\nrouter.get('/product-image/:productId', aiController.getProductImage);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 83,
      "content": "router.post('/create-order', aiController.createOrderFromConversation);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/recommend-products-advanced', aiController.recommendProducts);\nrouter.post('/analyze-image', aiController.analyzeCustomerImage);",
        "current": "router.post('/create-order', aiController.createOrderFromConversation);",
        "after": "router.get('/product-image/:productId', aiController.getProductImage);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
      "line": 84,
      "content": "router.get('/product-image/:productId', aiController.getProductImage);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/analyze-image', aiController.analyzeCustomerImage);\nrouter.post('/create-order', aiController.createOrderFromConversation);",
        "current": "router.get('/product-image/:productId', aiController.getProductImage);",
        "after": "\nexport { router as aiRoutes };"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 71,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const activeKey = await this.prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { createdAt: 'desc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 306,
      "content": "where: { id: customerId, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get customer history\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: customerId, companyId },",
        "after": "        include: {\n          orders: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 326,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get company products\n      const products = await this.prisma.product.findMany({",
        "current": "        where: { companyId },",
        "after": "        take: 20,\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 387,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const company = await this.prisma.company.findUnique({",
        "current": "        where: { id: companyId },",
        "after": "        include: {\n          aiSettings: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 544,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const aiSettings = await this.prisma.aiSettings.upsert({",
        "current": "        where: { companyId },",
        "after": "        update: settings,\n        create: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\ai\\services\\GeminiService.ts",
      "line": 600,
      "content": "where: { ...where, requiresHumanIntervention: true }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.aiInteraction.count({",
        "current": "          where: { ...where, requiresHumanIntervention: true }",
        "after": "        })\n      ]);"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
      "line": 31,
      "content": "const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n    // Verify token",
        "current": "    const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
        "after": "    const decoded = jwt.verify(token, jwtSecret) as any;\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
      "line": 37,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    const prisma = getPrismaClient();\n    const user = await prisma.user.findUnique({",
        "current": "      where: { id: decoded.userId },",
        "after": "      include: {\n        company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
      "line": 167,
      "content": "const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n    const token = authHeader.substring(7);",
        "current": "    const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
        "after": "    \n    try {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
      "line": 174,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      const prisma = getPrismaClient();\n      const user = await prisma.user.findUnique({",
        "current": "        where: { id: decoded.userId },",
        "after": "        include: {\n          company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 66,
      "content": "this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  constructor() {\n    this.prisma = getPrismaClient();",
        "current": "    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
        "after": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\n    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 67,
      "content": "this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    this.prisma = getPrismaClient();\n    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
        "current": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
        "after": "    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';\n    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 68,
      "content": "this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';\n    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
        "current": "    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
        "after": "    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 69,
      "content": "this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\n    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
        "current": "    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 79,
      "content": "where: { email: data.email }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if user already exists\n      const existingUser = await this.prisma.user.findUnique({",
        "current": "        where: { email: data.email }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 160,
      "content": "where: { email },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Find user with company\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { email },",
        "after": "        include: {\n          company: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 188,
      "content": "where: { id: user.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update last login\n      await this.prisma.user.update({",
        "current": "        where: { id: user.id },",
        "after": "        data: { lastLoginAt: new Date() }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 233,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Find user\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { id: decoded.userId },",
        "after": "        include: { company: true }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 234,
      "content": "include: { company: true }",
      "description": "Prisma include without isolation verification",
      "severity": "LOW",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "      const user = await this.prisma.user.findUnique({\n        where: { id: decoded.userId },",
        "current": "        include: { company: true }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 271,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { id: userId },",
        "after": "        include: {\n          company: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 294,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const user = await this.prisma.user.update({",
        "current": "        where: { id: userId },",
        "after": "        data: updateData,\n        select: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 327,
      "content": "where: { id: userId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get current user\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { id: userId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 345,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update password\n      await this.prisma.user.update({",
        "current": "        where: { id: userId },",
        "after": "        data: { password: hashedNewPassword }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\auth\\services\\AuthService.ts",
      "line": 362,
      "content": "where: { email }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { email }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 8,
      "content": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Campaign routes",
        "current": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
        "after": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));\nrouter.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 9,
      "content": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Campaign routes\nrouter.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
        "current": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
        "after": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));\nrouter.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 10,
      "content": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));\nrouter.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
        "current": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
        "after": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));\nrouter.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 11,
      "content": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));\nrouter.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
        "current": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
        "after": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 12,
      "content": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));\nrouter.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
        "current": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
        "after": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 13,
      "content": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));\nrouter.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
        "current": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
        "after": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 14,
      "content": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
        "current": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
        "after": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 15,
      "content": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
        "current": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));",
        "after": "\n// Analytics routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 18,
      "content": "router.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Analytics routes",
        "current": "router.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
        "after": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 19,
      "content": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Analytics routes\nrouter.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
        "current": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));",
        "after": "\n// Customer lists routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 22,
      "content": "router.get('/customer-lists', broadcastController.getCustomerLists.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer lists routes",
        "current": "router.get('/customer-lists', broadcastController.getCustomerLists.bind(broadcastController));",
        "after": "\n// Settings routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 25,
      "content": "router.get('/settings', broadcastController.getSettings.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Settings routes",
        "current": "router.get('/settings', broadcastController.getSettings.bind(broadcastController));",
        "after": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
      "line": 26,
      "content": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Settings routes\nrouter.get('/settings', broadcastController.getSettings.bind(broadcastController));",
        "current": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));",
        "after": "\nexport { router as broadcastRoutes };"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 108,
      "content": "where: { id: campaignId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "        where: { id: campaignId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 120,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update campaign status\n      await this.prisma.broadcastCampaign.update({",
        "current": "        where: { id: campaignId },",
        "after": "        data: { \n          status: 'sending',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 133,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update campaign with send results\n      await this.prisma.broadcastCampaign.update({",
        "current": "        where: { id: campaignId },",
        "after": "        data: {\n          status: 'sent',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 165,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update campaign status to failed\n      await this.prisma.broadcastCampaign.update({",
        "current": "        where: { id: campaignId },",
        "after": "        data: { \n          status: 'failed',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 181,
      "content": "where: { id: campaignId, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async getCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "      where: { id: campaignId, companyId },",
        "after": "      include: {\n        creator: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 202,
      "content": "where: { id: campaignId, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async getCampaignAnalytics(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "      where: { id: campaignId, companyId },",
        "after": "      include: {\n        analytics: true"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 531,
      "content": "where: { id: campaignId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async updateCampaign(campaignId: string, updateData: any, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "      where: { id: campaignId, companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 543,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    return await this.prisma.broadcastCampaign.update({",
        "current": "      where: { id: campaignId },",
        "after": "      data: {\n        ...updateData,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 556,
      "content": "where: { id: campaignId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async cancelCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "      where: { id: campaignId, companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 568,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    return await this.prisma.broadcastCampaign.update({",
        "current": "      where: { id: campaignId },",
        "after": "      data: {\n        status: 'cancelled',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 581,
      "content": "where: { id: campaignId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async togglePauseCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
        "current": "      where: { id: campaignId, companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 595,
      "content": "where: { id: campaignId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    return await this.prisma.broadcastCampaign.update({",
        "current": "      where: { id: campaignId },",
        "after": "      data: {\n        status: newStatus,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 608,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async getSettings(companyId: string) {\n    let settings = await this.prisma.broadcastSettings.findFirst({",
        "current": "      where: { companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
      "line": 640,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async updateSettings(companyId: string, updateData: any) {\n    return await this.prisma.broadcastSettings.upsert({",
        "current": "      where: { companyId },",
        "after": "      update: {\n        ...updateData,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 105,
      "content": "router.get('/', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// GET /api/v1/conversations - جلب جميع المحادثات",
        "current": "router.get('/', (req, res) => {",
        "after": "  try {\n    console.log('📞 Fetching conversations from real server');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 130,
      "content": "router.get('/:id', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// GET /api/v1/conversations/:id - جلب محادثة محددة",
        "current": "router.get('/:id', (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 159,
      "content": "router.get('/:id/messages', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// GET /api/v1/conversations/:id/messages - جلب رسائل المحادثة",
        "current": "router.get('/:id/messages', (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 187,
      "content": "router.post('/:id/send', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// POST /api/v1/conversations/:id/send - إرسال رسالة",
        "current": "router.post('/:id/send', (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 239,
      "content": "router.delete('/:id', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// DELETE /api/v1/conversations/:id - حذف محادثة",
        "current": "router.delete('/:id', (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
      "line": 282,
      "content": "router.post('/', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// POST /api/v1/conversations - إنشاء محادثة جديدة",
        "current": "router.post('/', (req, res) => {",
        "after": "  try {\n    const { customerId, customerName, message } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 19,
      "content": "router.get('/search', customerController.searchCustomers);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer search (before :id routes to avoid conflicts)",
        "current": "router.get('/search', customerController.searchCustomers);",
        "after": "\n// Customer segments and analytics"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 22,
      "content": "router.get('/segments', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.getCustomerSegments);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer segments and analytics",
        "current": "router.get('/segments', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.getCustomerSegments);",
        "after": "\n// Export customers"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 25,
      "content": "router.get('/export', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.exportCustomers);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Export customers",
        "current": "router.get('/export', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.exportCustomers);",
        "after": "\n// CRUD operations"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 28,
      "content": "router.get('/', customerController.getCustomers);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// CRUD operations",
        "current": "router.get('/', customerController.getCustomers);",
        "after": "router.post('/', customerController.createCustomer);\nrouter.get('/:id', customerController.getCustomer);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 29,
      "content": "router.post('/', customerController.createCustomer);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// CRUD operations\nrouter.get('/', customerController.getCustomers);",
        "current": "router.post('/', customerController.createCustomer);",
        "after": "router.get('/:id', customerController.getCustomer);\nrouter.put('/:id', customerController.updateCustomer);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 30,
      "content": "router.get('/:id', customerController.getCustomer);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/', customerController.getCustomers);\nrouter.post('/', customerController.createCustomer);",
        "current": "router.get('/:id', customerController.getCustomer);",
        "after": "router.put('/:id', customerController.updateCustomer);\nrouter.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 31,
      "content": "router.put('/:id', customerController.updateCustomer);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/', customerController.createCustomer);\nrouter.get('/:id', customerController.getCustomer);",
        "current": "router.put('/:id', customerController.updateCustomer);",
        "after": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 32,
      "content": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/:id', customerController.getCustomer);\nrouter.put('/:id', customerController.updateCustomer);",
        "current": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);",
        "after": "\n// Customer interactions"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 35,
      "content": "router.get('/:id/interactions', customerController.getCustomerInteractions);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer interactions",
        "current": "router.get('/:id/interactions', customerController.getCustomerInteractions);",
        "after": "router.get('/:id/stats', customerController.getCustomerStats);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 36,
      "content": "router.get('/:id/stats', customerController.getCustomerStats);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Customer interactions\nrouter.get('/:id/interactions', customerController.getCustomerInteractions);",
        "current": "router.get('/:id/stats', customerController.getCustomerStats);",
        "after": "\n// Customer notes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 39,
      "content": "router.get('/:id/notes', customerController.getCustomerNotes);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer notes",
        "current": "router.get('/:id/notes', customerController.getCustomerNotes);",
        "after": "router.post('/:id/notes', customerController.addCustomerNote);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
      "line": 40,
      "content": "router.post('/:id/notes', customerController.addCustomerNote);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Customer notes\nrouter.get('/:id/notes', customerController.getCustomerNotes);",
        "current": "router.post('/:id/notes', customerController.addCustomerNote);",
        "after": "\nexport { router as customerRoutes };"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 146,
      "content": "where: { id, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id, companyId },",
        "after": "        include: {\n          conversations: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 252,
      "content": "where: { id, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if customer exists and belongs to company\n      const existingCustomer = await this.prisma.customer.findFirst({",
        "current": "        where: { id, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 275,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const customer = await this.prisma.customer.update({",
        "current": "        where: { id },",
        "after": "        data: updateData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 305,
      "content": "where: { id, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if customer exists and belongs to company\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 314,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Soft delete by updating status\n      await this.prisma.customer.update({",
        "current": "        where: { id },",
        "after": "        data: { status: 'INACTIVE' as any }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 332,
      "content": "where: { id: customerId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: customerId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 363,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get orders\n      const orders = await this.prisma.order.findMany({",
        "current": "        where: { customerId },",
        "after": "        include: {\n          items: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 380,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get notes\n      const notes = await this.prisma.customerNote.findMany({",
        "current": "        where: { customerId },",
        "after": "        include: {\n          author: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 413,
      "content": "where: { id: noteData.customerId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: noteData.customerId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 447,
      "content": "where: { id: customerId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: customerId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 458,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      return await this.prisma.customerNote.findMany({",
        "current": "        where: { customerId },",
        "after": "        include: {\n          author: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 485,
      "content": "where: { id: customerId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
        "current": "        where: { id: customerId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 508,
      "content": "where: { customerId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.order.count({",
        "current": "          where: { customerId }",
        "after": "        }),\n        this.prisma.order.aggregate({"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 511,
      "content": "where: { customerId, status: { not: 'CANCELLED' } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.order.aggregate({",
        "current": "          where: { customerId, status: { not: 'CANCELLED' } },",
        "after": "          _sum: { total: true }\n        }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 515,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.order.findFirst({",
        "current": "          where: { customerId },",
        "after": "          orderBy: { createdAt: 'desc' }\n        }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 586,
      "content": "this.prisma.customer.count({ where: { companyId } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        recentCustomers\n      ] = await Promise.all([",
        "current": "        this.prisma.customer.count({ where: { companyId } }),",
        "after": "        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),\n        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 587,
      "content": "this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      ] = await Promise.all([\n        this.prisma.customer.count({ where: { companyId } }),",
        "current": "        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
        "after": "        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),\n        this.prisma.customer.count({ "
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\customers\\services\\CustomerService.ts",
      "line": 588,
      "content": "this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        this.prisma.customer.count({ where: { companyId } }),\n        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
        "current": "        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),",
        "after": "        this.prisma.customer.count({ \n          where: { "
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
      "line": 25,
      "content": "this.WEBHOOK_VERIFY_TOKEN = process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN || 'your-webhook-verify-token';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    super();\n    this.facebookService = new FacebookService();",
        "current": "    this.WEBHOOK_VERIFY_TOKEN = process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN || 'your-webhook-verify-token';",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
      "line": 204,
      "content": "webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      connectedPagesCount: connectedPages.length,\n      pages: connectedPages,",
        "current": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
        "after": "      verifyToken: this.WEBHOOK_VERIFY_TOKEN,\n    };"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
      "line": 246,
      "content": "appId: process.env.FACEBOOK_APP_ID,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  getAppConfig = this.asyncHandler(async (req: Request, res: Response) => {\n    const config = {",
        "current": "      appId: process.env.FACEBOOK_APP_ID,",
        "after": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,\n      verifyToken: this.WEBHOOK_VERIFY_TOKEN,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
      "line": 247,
      "content": "webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    const config = {\n      appId: process.env.FACEBOOK_APP_ID,",
        "current": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
        "after": "      verifyToken: this.WEBHOOK_VERIFY_TOKEN,\n      requiredPermissions: ["
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
      "line": 273,
      "content": "const appSecret = process.env.FACEBOOK_APP_SECRET;",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    try {\n      const signature = req.headers['x-hub-signature-256'] as string;",
        "current": "      const appSecret = process.env.FACEBOOK_APP_SECRET;",
        "after": "\n      if (!signature || !appSecret) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 16,
      "content": "router.get('/webhook', facebookController.verifyWebhook);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Webhook routes (no authentication required)",
        "current": "router.get('/webhook', facebookController.verifyWebhook);",
        "after": "router.post('/webhook', facebookController.handleWebhook);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 17,
      "content": "router.post('/webhook', facebookController.handleWebhook);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Webhook routes (no authentication required)\nrouter.get('/webhook', facebookController.verifyWebhook);",
        "current": "router.post('/webhook', facebookController.handleWebhook);",
        "after": "\n// Protected routes (authentication required)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 23,
      "content": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Page management (managers and admins only)",
        "current": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
        "after": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);\nrouter.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 24,
      "content": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Page management (managers and admins only)\nrouter.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
        "current": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
        "after": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 25,
      "content": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);\nrouter.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
        "current": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);",
        "after": "\n// General integration routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 28,
      "content": "router.get('/connected', facebookController.getConnectedPages);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// General integration routes",
        "current": "router.get('/connected', facebookController.getConnectedPages);",
        "after": "router.get('/status', facebookController.getIntegrationStatus);\nrouter.get('/config', facebookController.getAppConfig);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 29,
      "content": "router.get('/status', facebookController.getIntegrationStatus);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// General integration routes\nrouter.get('/connected', facebookController.getConnectedPages);",
        "current": "router.get('/status', facebookController.getIntegrationStatus);",
        "after": "router.get('/config', facebookController.getAppConfig);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 30,
      "content": "router.get('/config', facebookController.getAppConfig);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/connected', facebookController.getConnectedPages);\nrouter.get('/status', facebookController.getIntegrationStatus);",
        "current": "router.get('/config', facebookController.getAppConfig);",
        "after": "\n// Message sending"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 33,
      "content": "router.post('/send-message', facebookController.sendMessage);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Message sending",
        "current": "router.post('/send-message', facebookController.sendMessage);",
        "after": "\n// Testing and configuration"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
      "line": 36,
      "content": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.testConnection);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Testing and configuration",
        "current": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.testConnection);",
        "after": "\nexport { router as facebookRoutes };"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\integrations\\services\\FacebookService.ts",
      "line": 483,
      "content": "where: { id: conversation.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update conversation timestamp\n      await this.prisma.conversation.update({",
        "current": "        where: { id: conversation.id },",
        "after": "        data: { updatedAt: timestamp },\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\controllers\\ProductController.ts",
      "line": 258,
      "content": "console.log('🔍 Getting categories for company:', user.companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const user = this.getAuthenticatedUser(req);\n",
        "current": "    console.log('🔍 Getting categories for company:', user.companyId);",
        "after": "\n    const categories = await this.productService.getCategories(user.companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 166,
      "content": "where: { id, companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const product = await this.prisma.product.findFirst({",
        "current": "        where: { id, companyId },",
        "after": "        include: {\n          category: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 268,
      "content": "where: { id, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if product exists and belongs to company\n      const existingProduct = await this.prisma.product.findFirst({",
        "current": "        where: { id, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 291,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const product = await this.prisma.product.update({",
        "current": "        where: { id },",
        "after": "        data: updateData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 323,
      "content": "where: { id, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if product exists and belongs to company\n      const product = await this.prisma.product.findFirst({",
        "current": "        where: { id, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 332,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Soft delete by updating isActive\n      await this.prisma.product.update({",
        "current": "        where: { id },",
        "after": "        data: { isActive: false }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 387,
      "content": "console.log('🔍 ProductService: Getting categories for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async getCategories(companyId: string): Promise<any[]> {\n    try {",
        "current": "      console.log('🔍 ProductService: Getting categories for company:', companyId);",
        "after": "\n      const categories = await this.prisma.category.findMany({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 390,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const categories = await this.prisma.category.findMany({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          _count: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 488,
      "content": "where: { id: categoryId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const category = await this.prisma.category.update({",
        "current": "        where: { id: categoryId },",
        "after": "        data: categoryData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 537,
      "content": "where: { id: categoryId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      await this.prisma.category.delete({",
        "current": "        where: { id: categoryId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 557,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get all categories for the company\n      const categories = await this.prisma.category.findMany({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          _count: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 585,
      "content": "where: { id: categoryIds[i] }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "            if (category && category._count.products === 0) {\n              await this.prisma.category.delete({",
        "current": "                where: { id: categoryIds[i] }",
        "after": "              });\n              deletedCount++;"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 600,
      "content": "where: { id: category.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      for (const category of numericEmptyCategories) {\n        await this.prisma.category.delete({",
        "current": "          where: { id: category.id }",
        "after": "        });\n        deletedCount++;"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 632,
      "content": "where: { id: productId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const product = await this.prisma.product.findFirst({",
        "current": "        where: { id: productId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 658,
      "content": "where: { id: productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const updatedProduct = await this.prisma.product.update({",
        "current": "        where: { id: productId },",
        "after": "        data: { stock: newStock },\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 749,
      "content": "this.prisma.product.count({ where: { ...where, isActive: true } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      ] = await Promise.all([\n        this.prisma.product.count({ where }),",
        "current": "        this.prisma.product.count({ where: { ...where, isActive: true } }),",
        "after": "        this.prisma.product.count({\n          where: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 767,
      "content": "where: { ...where, isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.product.aggregate({",
        "current": "          where: { ...where, isActive: true },",
        "after": "          _sum: { price: true }\n        }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\products\\services\\ProductService.ts",
      "line": 771,
      "content": "where: { ...where, isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        }),\n        this.prisma.product.findMany({",
        "current": "          where: { ...where, isActive: true },",
        "after": "          include: {\n            _count: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
      "line": 8,
      "content": "router.post('/image',",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Single image upload",
        "current": "router.post('/image', ",
        "after": "  uploadController.uploadSingleImage,\n  uploadController.handleSingleImageUpload.bind(uploadController)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
      "line": 14,
      "content": "router.post('/images',",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Multiple images upload",
        "current": "router.post('/images', ",
        "after": "  uploadController.uploadMultipleImages,\n  uploadController.handleMultipleImageUpload.bind(uploadController)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
      "line": 20,
      "content": "router.delete('/image/:filename', uploadController.deleteImage.bind(uploadController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Delete image",
        "current": "router.delete('/image/:filename', uploadController.deleteImage.bind(uploadController));",
        "after": "\n// Get image info"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
      "line": 23,
      "content": "router.get('/image/:filename', uploadController.getImageInfo.bind(uploadController));",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get image info",
        "current": "router.get('/image/:filename', uploadController.getImageInfo.bind(uploadController));",
        "after": "\nexport { router as uploadRoutes };"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\index.ts",
      "line": 8,
      "content": "const PORT = process.env.PORT || 3001;",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\nconst app = express();",
        "current": "const PORT = process.env.PORT || 3001;",
        "after": "\n// Middleware"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\index.ts",
      "line": 12,
      "content": "origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "// Middleware\napp.use(cors({",
        "current": "  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
        "after": "  credentials: true,\n}));"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\index.ts",
      "line": 38,
      "content": "environment: process.env.NODE_ENV || 'development',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),",
        "current": "    environment: process.env.NODE_ENV || 'development',",
        "after": "    version: '1.0.0',\n  });"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\index.ts",
      "line": 67,
      "content": "await prisma.$queryRaw`SELECT 1 as test`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "\n    // Test database connection",
        "current": "    await prisma.$queryRaw`SELECT 1 as test`;",
        "after": "\n    // Get counts from tables"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\index.ts",
      "line": 117,
      "content": "console.log('📞 Fetching real conversations from database for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log('📞 Fetching real conversations from database for company:', companyId);",
        "after": "\n    // Get conversations with customer info - فلترة بـ companyId"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\index.ts",
      "line": 121,
      "content": "where: { companyId }, // إضافة فلترة الشركة",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get conversations with customer info - فلترة بـ companyId\n    const conversations = await prisma.conversation.findMany({",
        "current": "      where: { companyId }, // إضافة فلترة الشركة",
        "after": "      include: {\n        customer: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\index.ts",
      "line": 276,
      "content": "where: { id: conversationId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Check if conversation exists\n    const conversation = await prisma.conversation.findUnique({",
        "current": "      where: { id: conversationId }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\index.ts",
      "line": 310,
      "content": "where: { id: conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update conversation last message\n    await prisma.conversation.update({",
        "current": "      where: { id: conversationId },",
        "after": "      data: {\n        lastMessageAt: new Date(),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\index.ts",
      "line": 353,
      "content": "error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    success: false,\n    message: 'Internal server error',",
        "current": "    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',",
        "after": "  });\n});"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\index.ts",
      "line": 402,
      "content": "console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    app.listen(PORT, () => {\n      console.log(`🚀 Server running on port ${PORT}`);",
        "current": "      console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);",
        "after": "      console.log(`🌐 API URL: http://localhost:${PORT}`);\n      console.log(`💚 Health check: http://localhost:${PORT}/health`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\auth.ts",
      "line": 59,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    const prisma = getPrismaClient();\n    const user = await prisma.user.findUnique({",
        "current": "      where: { id: decoded.userId },",
        "after": "      select: {\n        id: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\middleware\\auth.ts",
      "line": 80,
      "content": "req.user = {",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "\n    // Attach user to request",
        "current": "    req.user = {",
        "after": "      id: user.id,\n      email: user.email,"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\middleware\\comprehensiveIsolation.js",
      "line": 93,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'order':\n          resource = await prisma.order.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\comprehensiveIsolation.js",
      "line": 100,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'product':\n          resource = await prisma.product.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\comprehensiveIsolation.js",
      "line": 107,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'customer':\n          resource = await prisma.customer.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\comprehensiveIsolation.js",
      "line": 114,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'conversation':\n          resource = await prisma.conversation.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\dataIsolation.js",
      "line": 69,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'order':\n          resource = await prisma.order.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\dataIsolation.js",
      "line": 76,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'product':\n          resource = await prisma.product.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\dataIsolation.js",
      "line": 83,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'customer':\n          resource = await prisma.customer.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\dataIsolation.js",
      "line": 90,
      "content": "where: { id: resourceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        case 'conversation':\n          resource = await prisma.conversation.findUnique({",
        "current": "            where: { id: resourceId },",
        "after": "            select: { companyId: true }\n          });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\middleware\\errorHandler.js",
      "line": 117,
      "content": "const isDevelopment = process.env.NODE_ENV === 'development';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n  // Don't leak error details in production",
        "current": "  const isDevelopment = process.env.NODE_ENV === 'development';",
        "after": "  \n  // Handle specific error types"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 135,
      "content": "console.log(`❌ [GLOBAL-AUTH] No token provided for: ${method} ${path}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    if (!token) {",
        "current": "      console.log(`❌ [GLOBAL-AUTH] No token provided for: ${method} ${path}`);",
        "after": "      return res.status(401).json({\n        success: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 146,
      "content": "decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    let decoded;\n    try {",
        "current": "      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');",
        "after": "    } catch (error) {\n      console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 148,
      "content": "console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');\n    } catch (error) {",
        "current": "      console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);",
        "after": "      return res.status(401).json({\n        success: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 157,
      "content": "req.user = decoded;",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "\n    // إضافة معلومات المستخدم للطلب",
        "current": "    req.user = decoded;",
        "after": "\n    // التحقق من صلاحيات الإدارة"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 162,
      "content": "console.log(`❌ [GLOBAL-AUTH] Admin access denied for user: ${decoded.id}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    if (isAdminRoute(method, path)) {\n      if (decoded.role !== 'SUPER_ADMIN') {",
        "current": "        console.log(`❌ [GLOBAL-AUTH] Admin access denied for user: ${decoded.id}`);",
        "after": "        return res.status(403).json({\n          success: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 198,
      "content": "console.log(`❌ [COMPANY-ISOLATION] No company info for: ${req.method} ${path}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    // التأكد من وجود معلومات المستخدم\n    if (!req.user || !req.user.companyId) {",
        "current": "      console.log(`❌ [COMPANY-ISOLATION] No company info for: ${req.method} ${path}`);",
        "after": "      return res.status(403).json({\n        success: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\globalSecurity.js",
      "line": 230,
      "content": "console.log(`✅ [COMPANY-ISOLATION] Company access granted: ${req.user.companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`✅ [COMPANY-ISOLATION] Company access granted: ${req.user.companyId}`);",
        "after": "    next();\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\requestLogger.ts",
      "line": 203,
      "content": "if (config.env === 'development' && (res.statusCode >= 400 || process.env.LOG_RESPONSE_BODY === 'true')) {",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n    // Add response body in development (only for errors or if explicitly enabled)",
        "current": "    if (config.env === 'development' && (res.statusCode >= 400 || process.env.LOG_RESPONSE_BODY === 'true')) {",
        "after": "      try {\n        if (responseBody) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\security.js",
      "line": 205,
      "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  try {\n    const jwt = require('jsonwebtoken');",
        "current": "    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
        "after": "    req.user = decoded;\n    next();"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\security.js",
      "line": 206,
      "content": "req.user = decoded;",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "    const jwt = require('jsonwebtoken');\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
        "current": "    req.user = decoded;",
        "after": "    next();\n  } catch (error) {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\middleware\\security.js",
      "line": 252,
      "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    try {\n      const jwt = require('jsonwebtoken');",
        "current": "      const decoded = jwt.verify(token, process.env.JWT_SECRET);",
        "after": "      req.user = decoded;\n    } catch (error) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\security.js",
      "line": 253,
      "content": "req.user = decoded;",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "      const jwt = require('jsonwebtoken');\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);",
        "current": "      req.user = decoded;",
        "after": "    } catch (error) {\n      // Log but don't fail"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\middleware\\security.js",
      "line": 310,
      "content": "const allowedOrigins = process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'];",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "const corsOptions = {\n  origin: function (origin, callback) {",
        "current": "    const allowedOrigins = process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'];",
        "after": "    \n    // Allow requests with no origin (mobile apps, etc.)"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\securityEnhancements.js",
      "line": 38,
      "content": "const isDevelopment = process.env.NODE_ENV === 'development';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": " */\nconst getAuthRateLimit = () => {",
        "current": "  const isDevelopment = process.env.NODE_ENV === 'development';",
        "after": "  const isProduction = process.env.NODE_ENV === 'production';\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\securityEnhancements.js",
      "line": 39,
      "content": "const isProduction = process.env.NODE_ENV === 'production';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "const getAuthRateLimit = () => {\n  const isDevelopment = process.env.NODE_ENV === 'development';",
        "current": "  const isProduction = process.env.NODE_ENV === 'production';",
        "after": "\n  if (isDevelopment) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\securityEnhancements.js",
      "line": 227,
      "content": "if (process.env.NODE_ENV !== 'production') {",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    \n    // In development, allow all IPs",
        "current": "    if (process.env.NODE_ENV !== 'production') {",
        "after": "      return next();\n    }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\superAdminMiddleware.js",
      "line": 19,
      "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    }\n",
        "current": "    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
        "after": "    \n    // Get user from database"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\middleware\\superAdminMiddleware.js",
      "line": 23,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get user from database\n    const user = await prisma.user.findUnique({",
        "current": "      where: { id: decoded.userId },",
        "after": "      include: {\n        company: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\middleware\\superAdminMiddleware.js",
      "line": 36,
      "content": "req.user = user;",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "    }\n",
        "current": "    req.user = user;",
        "after": "    next();\n  } catch (error) {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\middleware\\validation.js",
      "line": 466,
      "content": "where: { id: req.user.companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: req.user.companyId },",
        "after": "      select: { id: true, isActive: true }\n    });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 22,
      "content": "where: { createdAt: { gte: startDate } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get daily growth data using separate queries (safer approach)\n    const companies = await prisma.company.findMany({",
        "current": "      where: { createdAt: { gte: startDate } },",
        "after": "      select: { createdAt: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 27,
      "content": "where: { createdAt: { gte: startDate } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const users = await prisma.user.findMany({",
        "current": "      where: { createdAt: { gte: startDate } },",
        "after": "      select: { createdAt: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 32,
      "content": "where: { createdAt: { gte: startDate } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const customers = await prisma.customer.findMany({",
        "current": "      where: { createdAt: { gte: startDate } },",
        "after": "      select: { createdAt: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 37,
      "content": "where: { createdAt: { gte: startDate } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const conversations = await prisma.conversation.findMany({",
        "current": "      where: { createdAt: { gte: startDate } },",
        "after": "      select: { createdAt: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 76,
      "content": "prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const previousMetrics = await Promise.all([",
        "current": "      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "after": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 77,
      "content": "prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    const previousMetrics = await Promise.all([\n      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "current": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "after": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 78,
      "content": "prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "current": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "after": "      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 79,
      "content": "prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "current": "      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "after": "      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })\n    ]);"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 80,
      "content": "prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
        "current": "      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })",
        "after": "    ]);\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 84,
      "content": "prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const currentMetrics = await Promise.all([",
        "current": "      prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
        "after": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 85,
      "content": "prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    const currentMetrics = await Promise.all([\n      prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
        "current": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
        "after": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 86,
      "content": "prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.company.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
        "current": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
        "after": "      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.message.count({ where: { createdAt: { gte: startDate } } })"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 87,
      "content": "prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
        "current": "      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
        "after": "      prisma.message.count({ where: { createdAt: { gte: startDate } } })\n    ]);"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 88,
      "content": "prisma.message.count({ where: { createdAt: { gte: startDate } } })",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
        "current": "      prisma.message.count({ where: { createdAt: { gte: startDate } } })",
        "after": "    ]);\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 343,
      "content": "prisma.company.count({ where: { isActive: true } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      // Total active companies",
        "current": "      prisma.company.count({ where: { isActive: true } }),",
        "after": "\n      // Messages in last 24 hours"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 347,
      "content": "where: { createdAt: { gte: oneDayAgo } }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Messages in last 24 hours\n      prisma.message.count({",
        "current": "        where: { createdAt: { gte: oneDayAgo } }",
        "after": "      }),\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 352,
      "content": "where: { createdAt: { gte: oneDayAgo } }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Conversations in last 24 hours\n      prisma.conversation.count({",
        "current": "        where: { createdAt: { gte: oneDayAgo } }",
        "after": "      }),\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminAnalyticsRoutes.js",
      "line": 357,
      "content": "where: { createdAt: { gte: oneDayAgo } }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // New customers in last 24 hours\n      prisma.customer.count({",
        "current": "        where: { createdAt: { gte: oneDayAgo } }",
        "after": "      })\n    ]);"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminPlansRoutes.js",
      "line": 143,
      "content": "where: { plan: plan.planType, isActive: true }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      plans.map(async (plan) => {\n        const companiesCount = await prisma.company.count({",
        "current": "          where: { plan: plan.planType, isActive: true }",
        "after": "        });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\adminPlansRoutes.js",
      "line": 207,
      "content": "where: { planType },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update or create plan configuration\n    const planConfig = await prisma.planConfiguration.upsert({",
        "current": "      where: { planType },",
        "after": "      update: {\n        price: parseFloat(price),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 17,
      "content": "router.get('/capabilities', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get all capabilities settings",
        "current": "router.get('/capabilities', async (req, res) => {",
        "after": "  try {\n    console.log('📋 [AI-CAPABILITIES] Getting capabilities settings');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 36,
      "content": "router.put('/capabilities', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Update capabilities settings",
        "current": "router.put('/capabilities', async (req, res) => {",
        "after": "  try {\n    console.log('🔄 [AI-CAPABILITIES] Updating capabilities:', req.body);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 63,
      "content": "router.post('/test/:capabilityId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Test a specific capability",
        "current": "router.post('/test/:capabilityId', async (req, res) => {",
        "after": "  try {\n    const { capabilityId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 187,
      "content": "router.get('/performance', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get capability performance stats",
        "current": "router.get('/performance', async (req, res) => {",
        "after": "  try {\n    console.log('📊 [AI-CAPABILITIES] Getting performance stats');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 219,
      "content": "router.get('/analytics', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get capability usage analytics",
        "current": "router.get('/analytics', async (req, res) => {",
        "after": "  try {\n    console.log('📈 [AI-CAPABILITIES] Getting usage analytics');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 263,
      "content": "router.post('/test-chat', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Test endpoint to debug routing",
        "current": "router.post('/test-chat', async (req, res) => {",
        "after": "  console.log('🎯 [AI-CAPABILITIES] TEST CHAT endpoint hit!');\n  res.json({"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 273,
      "content": "router.post('/chat', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Interactive chat endpoint",
        "current": "router.post('/chat', async (req, res) => {",
        "after": "  try {\n    console.log('🔍 [AI-CAPABILITIES] Chat endpoint hit!');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiCapabilitiesRoutes.js",
      "line": 468,
      "content": "router.post('/reset', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Reset all capabilities to default",
        "current": "router.post('/reset', async (req, res) => {",
        "after": "  try {\n    console.log('🔄 [AI-CAPABILITIES] Resetting capabilities to default');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 29,
      "content": "router.get('/statistics', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على إحصائيات الجودة العامة\n */",
        "current": "router.get('/statistics', async (req, res) => {",
        "after": "  try {\n    const qualityService = getQualityMonitorService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 60,
      "content": "router.get('/evaluation/:messageId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على تقييم رسالة محددة\n */",
        "current": "router.get('/evaluation/:messageId', async (req, res) => {",
        "after": "  try {\n    const { messageId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 100,
      "content": "router.get('/recent', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على آخر التقييمات\n */",
        "current": "router.get('/recent', async (req, res) => {",
        "after": "  try {\n    const limit = parseInt(req.query.limit) || 10;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 134,
      "content": "router.get('/by-quality/:level', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على التقييمات حسب مستوى الجودة\n */",
        "current": "router.get('/by-quality/:level', async (req, res) => {",
        "after": "  try {\n    const { level } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 179,
      "content": "router.get('/problematic', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على التقييمات ذات المشاكل\n */",
        "current": "router.get('/problematic', async (req, res) => {",
        "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 213,
      "content": "router.get('/trends', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحليل الاتجاهات\n */",
        "current": "router.get('/trends', async (req, res) => {",
        "after": "  try {\n    const days = parseInt(req.query.days) || 7;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 246,
      "content": "router.get('/system-status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * حالة نظام التقييم\n */",
        "current": "router.get('/system-status', async (req, res) => {",
        "after": "  try {\n    const qualityService = getQualityMonitorService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 278,
      "content": "router.post('/settings', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحديث إعدادات التقييم\n */",
        "current": "router.post('/settings', async (req, res) => {",
        "after": "  try {\n    const qualityService = getQualityMonitorService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 321,
      "content": "router.get('/metrics-summary', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * ملخص المقاييس للوحة التحكم\n */",
        "current": "router.get('/metrics-summary', async (req, res) => {",
        "after": "  try {\n    const qualityService = getQualityMonitorService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 379,
      "content": "router.get('/sentiment-analysis', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على إحصائيات تحليل المشاعر\n */",
        "current": "router.get('/sentiment-analysis', async (req, res) => {",
        "after": "  try {\n    const qualityService = getQualityMonitorService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\aiQualityRoutes.js",
      "line": 414,
      "content": "router.post('/analyze-sentiment', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحليل مشاعر رسالة معينة\n */",
        "current": "router.post('/analyze-sentiment', async (req, res) => {",
        "after": "  try {\n    const { customerMessage, botResponse } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 26,
      "content": "router.post('/refresh', refreshToken);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/register', authRateLimiter, register);\nrouter.post('/login', authRateLimiter, login);",
        "current": "router.post('/refresh', refreshToken);",
        "after": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);\nrouter.post('/reset-password', passwordResetRateLimiter, resetPassword);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 27,
      "content": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/login', authRateLimiter, login);\nrouter.post('/refresh', refreshToken);",
        "current": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
        "after": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 28,
      "content": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/refresh', refreshToken);\nrouter.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
        "current": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);",
        "after": "\n// Protected routes (authentication required)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 33,
      "content": "router.post('/logout', logout);",
      "description": "API route without authentication middleware",
      "severity": "MEDIUM",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.use(authenticateToken);\n",
        "current": "router.post('/logout', logout);",
        "after": "router.get('/me', getCurrentUser);\nrouter.post('/change-password', changePassword);"
      },
      "mitigation": true,
      "riskScore": 3
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 34,
      "content": "router.get('/me', getCurrentUser);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\nrouter.post('/logout', logout);",
        "current": "router.get('/me', getCurrentUser);",
        "after": "router.post('/change-password', changePassword);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\authRoutes.ts",
      "line": 35,
      "content": "router.post('/change-password', changePassword);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/logout', logout);\nrouter.get('/me', getCurrentUser);",
        "current": "router.post('/change-password', changePassword);",
        "after": "\nexport default router;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 14,
      "content": "router.get('/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على حالة خدمة الاكتشاف التلقائي\n */",
        "current": "router.get('/status', async (req, res) => {",
        "after": "  try {\n    const status = autoPatternService.getStatus();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 41,
      "content": "router.post('/start', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * بدء خدمة الاكتشاف التلقائي\n */",
        "current": "router.post('/start', async (req, res) => {",
        "after": "  try {\n    autoPatternService.start();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 64,
      "content": "router.post('/stop', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إيقاف خدمة الاكتشاف التلقائي\n */",
        "current": "router.post('/stop', async (req, res) => {",
        "after": "  try {\n    autoPatternService.stop();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 87,
      "content": "router.post('/detect-now', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تشغيل اكتشاف فوري للأنماط\n */",
        "current": "router.post('/detect-now', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 122,
      "content": "router.put('/interval', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تغيير فترة الاكتشاف التلقائي\n */",
        "current": "router.put('/interval', async (req, res) => {",
        "after": "  try {\n    const { minutes } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 154,
      "content": "router.post('/companies', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إضافة شركة للمراقبة\n */",
        "current": "router.post('/companies', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 187,
      "content": "router.delete('/companies/:companyId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إزالة شركة من المراقبة\n */",
        "current": "router.delete('/companies/:companyId', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 212,
      "content": "router.get('/history', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على تاريخ الاكتشافات\n */",
        "current": "router.get('/history', async (req, res) => {",
        "after": "  try {\n    const status = autoPatternService.getStatus();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\autoPatternRoutes.js",
      "line": 240,
      "content": "router.get('/health', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * فحص صحة الخدمة\n */",
        "current": "router.get('/health', async (req, res) => {",
        "after": "  try {\n    const status = autoPatternService.getStatus();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 295,
      "content": "router.post('/campaigns', broadcastController.createCampaign);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Campaign routes",
        "current": "router.post('/campaigns', broadcastController.createCampaign);",
        "after": "router.get('/campaigns', broadcastController.getCampaigns);\nrouter.get('/campaigns/:id', broadcastController.getCampaign);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 296,
      "content": "router.get('/campaigns', broadcastController.getCampaigns);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Campaign routes\nrouter.post('/campaigns', broadcastController.createCampaign);",
        "current": "router.get('/campaigns', broadcastController.getCampaigns);",
        "after": "router.get('/campaigns/:id', broadcastController.getCampaign);\nrouter.post('/campaigns/:id/send', broadcastController.sendCampaign);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 297,
      "content": "router.get('/campaigns/:id', broadcastController.getCampaign);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/campaigns', broadcastController.createCampaign);\nrouter.get('/campaigns', broadcastController.getCampaigns);",
        "current": "router.get('/campaigns/:id', broadcastController.getCampaign);",
        "after": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 298,
      "content": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/campaigns', broadcastController.getCampaigns);\nrouter.get('/campaigns/:id', broadcastController.getCampaign);",
        "current": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);",
        "after": "\n// Analytics routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 301,
      "content": "router.get('/analytics', broadcastController.getAnalytics);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Analytics routes",
        "current": "router.get('/analytics', broadcastController.getAnalytics);",
        "after": "\n// Customer lists routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 304,
      "content": "router.get('/customer-lists', broadcastController.getCustomerLists);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Customer lists routes",
        "current": "router.get('/customer-lists', broadcastController.getCustomerLists);",
        "after": "\n// Settings routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 307,
      "content": "router.get('/settings', broadcastController.getSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Settings routes",
        "current": "router.get('/settings', broadcastController.getSettings);",
        "after": "router.put('/settings', broadcastController.updateSettings);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\broadcastRoutes.js",
      "line": 308,
      "content": "router.put('/settings', broadcastController.updateSettings);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Settings routes\nrouter.get('/settings', broadcastController.getSettings);",
        "current": "router.put('/settings', broadcastController.updateSettings);",
        "after": "\nmodule.exports = router;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 17,
      "content": "router.get('/', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * جلب جميع الشركات مع pagination\n */",
        "current": "router.get('/', async (req, res) => {",
        "after": "  try {\n    const {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 116,
      "content": "router.get('/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * جلب تفاصيل شركة محددة\n */",
        "current": "router.get('/:id', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 121,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        users: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 174,
      "content": "router.get('/plans', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * جلب خطط الاشتراك المتاحة\n */",
        "current": "router.get('/plans', async (req, res) => {",
        "after": "  try {\n    const plans = {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 259,
      "content": "router.get('/:id/usage', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * جلب إحصائيات استخدام الشركة\n */",
        "current": "router.get('/:id/usage', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 265,
      "content": "where: { id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 289,
      "content": "prisma.user.count({ where: { companyId: id, isActive: true } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      recentOrders\n    ] = await Promise.all([",
        "current": "      prisma.user.count({ where: { companyId: id, isActive: true } }),",
        "after": "      prisma.customer.count({ where: { companyId: id } }),\n      prisma.product.count({ where: { companyId: id, isActive: true } }),"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 290,
      "content": "prisma.customer.count({ where: { companyId: id } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    ] = await Promise.all([\n      prisma.user.count({ where: { companyId: id, isActive: true } }),",
        "current": "      prisma.customer.count({ where: { companyId: id } }),",
        "after": "      prisma.product.count({ where: { companyId: id, isActive: true } }),\n      prisma.order.count({ "
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\companiesRoutes.ts",
      "line": 291,
      "content": "prisma.product.count({ where: { companyId: id, isActive: true } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.user.count({ where: { companyId: id, isActive: true } }),\n      prisma.customer.count({ where: { companyId: id } }),",
        "current": "      prisma.product.count({ where: { companyId: id, isActive: true } }),",
        "after": "      prisma.order.count({ \n        where: { "
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 26,
      "content": "router.get('/', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced\n */",
        "current": "router.get('/', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 139,
      "content": "router.post('/migrate-from-files', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/orders-enhanced/migrate-from-files\n */",
        "current": "router.post('/migrate-from-files', async (req, res) => {",
        "after": "    try {\n        const fs = require('fs');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 173,
      "content": "where: { orderNumber: orderData.orderNumber }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "                // تحقق من وجود الطلب\n                const existingOrder = await prisma.order.findUnique({",
        "current": "                    where: { orderNumber: orderData.orderNumber }",
        "after": "                });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 199,
      "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "                            phone: orderData.customerPhone || '',\n                            email: orderData.customerEmail || '',",
        "current": "                            companyId: 'cmdt8nrjq003vufuss47dqc45'",
        "after": "                        }\n                    });"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 209,
      "content": "companyId: 'cmdt8nrjq003vufuss47dqc45', // Company ID الافتراضي",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "                        orderNumber: orderData.orderNumber,\n                        customerId: customer.id,",
        "current": "                        companyId: 'cmdt8nrjq003vufuss47dqc45', // Company ID الافتراضي",
        "after": "                        total: orderData.total || 0,\n                        subtotal: orderData.subtotal || 0,"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 280,
      "content": "router.get('/stats', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced/stats\n */",
        "current": "router.get('/stats', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 311,
      "content": "router.get('/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced/:id\n */",
        "current": "router.get('/:id', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 317,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    \n    const order = await enhancedOrderService.prisma.order.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        customer: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 359,
      "content": "router.post('/', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/orders-enhanced\n */",
        "current": "router.post('/', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 393,
      "content": "router.patch('/:id/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * PATCH /api/v1/orders-enhanced/:id/status\n */",
        "current": "router.patch('/:id/status', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 400,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    \n    const updatedOrder = await enhancedOrderService.prisma.order.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        status,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 435,
      "content": "router.patch('/:id/validation', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * PATCH /api/v1/orders-enhanced/:id/validation\n */",
        "current": "router.patch('/:id/validation', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 442,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    \n    const updatedOrder = await enhancedOrderService.prisma.order.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        validationStatus,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 472,
      "content": "router.delete('/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * DELETE /api/v1/orders-enhanced/:id\n */",
        "current": "router.delete('/:id', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 479,
      "content": "where: { orderId: id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // حذف عناصر الطلب أولاً\n    await enhancedOrderService.prisma.orderItem.deleteMany({",
        "current": "      where: { orderId: id }",
        "after": "    });\n    "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 484,
      "content": "where: { id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // حذف الطلب\n    await enhancedOrderService.prisma.order.delete({",
        "current": "      where: { id }",
        "after": "    });\n    "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 508,
      "content": "router.get('/conversations/stats', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced/conversations/stats\n */",
        "current": "router.get('/conversations/stats', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 539,
      "content": "router.get('/conversations', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced/conversations\n */",
        "current": "router.get('/conversations', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 582,
      "content": "router.get('/compare/systems', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/orders-enhanced/compare\n */",
        "current": "router.get('/compare/systems', async (req, res) => {",
        "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\enhancedOrders.js",
      "line": 623,
      "content": "router.get('/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get single order details",
        "current": "router.get('/:id', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 27,
      "content": "environment: process.env.NODE_ENV,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),",
        "current": "      environment: process.env.NODE_ENV,",
        "after": "      version: process.env.npm_package_version || '1.0.0',\n    });"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 28,
      "content": "version: process.env.npm_package_version || '1.0.0',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,",
        "current": "      version: process.env.npm_package_version || '1.0.0',",
        "after": "    });\n  });"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 33,
      "content": "if (process.env.NODE_ENV === 'development') {",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n  // API documentation endpoint (development only)",
        "current": "  if (process.env.NODE_ENV === 'development') {",
        "after": "    app.get('/api/docs', (req, res) => {\n      res.json({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 116,
      "content": "router.get('/auth/status', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "const setupPlaceholderRoutes = (router: Router): void => {\n  // Authentication placeholder",
        "current": "  router.get('/auth/status', (req, res) => {",
        "after": "    res.json({\n      message: 'Authentication service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 131,
      "content": "router.get('/users', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Users placeholder",
        "current": "  router.get('/users', (req, res) => {",
        "after": "    res.json({\n      message: 'User management service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 145,
      "content": "router.get('/companies', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Companies routes",
        "current": "  router.get('/companies', async (req, res) => {",
        "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 246,
      "content": "router.get('/companies/plans', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Company plans",
        "current": "  router.get('/companies/plans', (req, res) => {",
        "after": "    const plans = {\n      BASIC: {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 296,
      "content": "router.get('/companies/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Company details",
        "current": "  router.get('/companies/:id', async (req, res) => {",
        "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 322,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const company = await prisma.company.findUnique({",
        "current": "        where: { id },",
        "after": "        include: {\n          users: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 374,
      "content": "router.get('/customers', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Customers endpoint with proper company isolation",
        "current": "  router.get('/customers', async (req, res) => {",
        "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 388,
      "content": "console.log('👥 Fetching customers for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log('👥 Fetching customers for company:', companyId);",
        "after": "\n      // Get customers with company filter"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 392,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get customers with company filter\n      const customers = await prisma.customer.findMany({",
        "current": "        where: { companyId },",
        "after": "        select: {\n          id: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 430,
      "content": "router.get('/conversations', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Conversations endpoint with proper company isolation",
        "current": "  router.get('/conversations', async (req, res) => {",
        "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 444,
      "content": "console.log('💬 Fetching conversations for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log('💬 Fetching conversations for company:', companyId);",
        "after": "\n      // Get conversations with company filter"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 448,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get conversations with company filter\n      const conversations = await prisma.conversation.findMany({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          customer: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 512,
      "content": "router.get('/products', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Products placeholder",
        "current": "  router.get('/products', (req, res) => {",
        "after": "    res.json({\n      message: 'Product management service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 527,
      "content": "router.get('/orders', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Orders placeholder",
        "current": "  router.get('/orders', (req, res) => {",
        "after": "    res.json({\n      message: 'Order management service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 542,
      "content": "router.get('/reports', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Reports placeholder",
        "current": "  router.get('/reports', (req, res) => {",
        "after": "    res.json({\n      message: 'Reports and analytics service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\index.ts",
      "line": 556,
      "content": "router.get('/notifications', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n  // Notifications placeholder",
        "current": "  router.get('/notifications', (req, res) => {",
        "after": "    res.json({\n      message: 'Notification service is ready',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 15,
      "content": "router.post('/intelligent-response', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/ai/intelligent-response\n */",
        "current": "router.post('/intelligent-response', async (req, res) => {",
        "after": "  await intelligentChatController.generateIntelligentResponse(req, res);\n});"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 23,
      "content": "router.get('/intelligent-analytics', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/ai/intelligent-analytics\n */",
        "current": "router.get('/intelligent-analytics', async (req, res) => {",
        "after": "  await intelligentChatController.getSystemAnalytics(req, res);\n});"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 31,
      "content": "router.get('/conversation-memory/:customerId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/ai/conversation-memory/:customerId\n */",
        "current": "router.get('/conversation-memory/:customerId', async (req, res) => {",
        "after": "  await intelligentChatController.getConversationMemory(req, res);\n});"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 39,
      "content": "router.post('/cleanup-memory', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/ai/cleanup-memory\n */",
        "current": "router.post('/cleanup-memory', async (req, res) => {",
        "after": "  await intelligentChatController.cleanupMemory(req, res);\n});"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 47,
      "content": "router.post('/test-intelligent', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/ai/test-intelligent\n */",
        "current": "router.post('/test-intelligent', async (req, res) => {",
        "after": "  await intelligentChatController.testIntelligentSystem(req, res);\n});"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\intelligentChatRoutes.js",
      "line": 55,
      "content": "router.get('/intelligent-info', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/ai/intelligent-info\n */",
        "current": "router.get('/intelligent-info', (req, res) => {",
        "after": "  res.json({\n    success: true,"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 128,
      "content": "where: { status: 'PAID' },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Calculate total revenue\n    const totalRevenue = await prisma.invoice.aggregate({",
        "current": "      where: { status: 'PAID' },",
        "after": "      _sum: {\n        totalAmount: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 173,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const invoice = await prisma.invoice.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        company: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 228,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 328,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const invoice = await prisma.invoice.update({",
        "current": "      where: { id },",
        "after": "      data: updateData,\n      include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 369,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const invoice = await prisma.invoice.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        company: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 385,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update invoice status to SENT\n    const updatedInvoice = await prisma.invoice.update({",
        "current": "      where: { id },",
        "after": "      data: { status: 'SENT' },\n      include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 438,
      "content": "prisma.invoice.count({ where: { status: 'PAID' } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    ] = await Promise.all([\n      prisma.invoice.count(),",
        "current": "      prisma.invoice.count({ where: { status: 'PAID' } }),",
        "after": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),\n      prisma.invoice.aggregate({"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 439,
      "content": "prisma.invoice.count({ where: { status: 'OVERDUE' } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.invoice.count(),\n      prisma.invoice.count({ where: { status: 'PAID' } }),",
        "current": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),",
        "after": "      prisma.invoice.aggregate({\n        where: { status: 'PAID' },"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\invoiceRoutes.js",
      "line": 441,
      "content": "where: { status: 'PAID' },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),\n      prisma.invoice.aggregate({",
        "current": "        where: { status: 'PAID' },",
        "after": "        _sum: { totalAmount: true }\n      }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 24,
      "content": "router.get('/stats', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على الإحصائيات الكاملة\n */",
        "current": "router.get('/stats', (req, res) => {",
        "after": "  try {\n    console.log('📊 [MONITOR] Stats endpoint called');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 56,
      "content": "router.get('/health', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * فحص سريع لحالة النظام\n */",
        "current": "router.get('/health', (req, res) => {",
        "after": "  try {\n    console.log('🏥 [MONITOR] Health check requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 93,
      "content": "router.get('/errors', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على قائمة الأخطاء الأخيرة\n */",
        "current": "router.get('/errors', (req, res) => {",
        "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 140,
      "content": "router.post('/reset', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إعادة تعيين الإحصائيات\n */",
        "current": "router.post('/reset', (req, res) => {",
        "after": "  try {\n    console.log('🔄 [MONITOR] Reset requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 175,
      "content": "router.get('/performance', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على بيانات الأداء للرسوم البيانية\n */",
        "current": "router.get('/performance', (req, res) => {",
        "after": "  try {\n    const limit = parseInt(req.query.limit) || 100;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 222,
      "content": "router.get('/alerts', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على التنبيهات النشطة\n */",
        "current": "router.get('/alerts', (req, res) => {",
        "after": "  try {\n    const activeAlerts = simpleAlerts.getActiveAlerts();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 254,
      "content": "router.get('/alerts/history', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على تاريخ التنبيهات\n */",
        "current": "router.get('/alerts/history', (req, res) => {",
        "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 290,
      "content": "router.post('/alerts/check', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * فحص فوري للنظام وإرسال التنبيهات\n */",
        "current": "router.post('/alerts/check', (req, res) => {",
        "after": "  try {\n    console.log('🔍 [MONITOR] Manual alert check requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 328,
      "content": "router.post('/alerts/:alertId/resolve', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * حل تنبيه يدوياً\n */",
        "current": "router.post('/alerts/:alertId/resolve', (req, res) => {",
        "after": "  try {\n    const { alertId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 368,
      "content": "router.put('/alerts/thresholds', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحديث عتبات التنبيهات\n */",
        "current": "router.put('/alerts/thresholds', (req, res) => {",
        "after": "  try {\n    const newThresholds = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 403,
      "content": "router.post('/test-response', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * اختبار تسجيل رد (للاختبار فقط)\n */",
        "current": "router.post('/test-response', (req, res) => {",
        "after": "  try {\n    const { responseTime = 5000, isEmpty = false, isSuccessful = true } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 441,
      "content": "router.get('/charts', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على بيانات الرسوم البيانية\n */",
        "current": "router.get('/charts', (req, res) => {",
        "after": "  try {\n    const period = req.query.period || 'hourly';"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 487,
      "content": "router.get('/charts/summary', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على ملخص بيانات الرسوم البيانية\n */",
        "current": "router.get('/charts/summary', (req, res) => {",
        "after": "  try {\n    console.log('📊 [MONITOR] Chart summary requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 516,
      "content": "router.post('/charts/save', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * حفظ البيانات التاريخية فوراً (للاختبار)\n */",
        "current": "router.post('/charts/save', (req, res) => {",
        "after": "  try {\n    console.log('📊 [MONITOR] Manual chart data save requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 547,
      "content": "router.get('/alerts/settings', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على إعدادات التنبيهات المتقدمة\n */",
        "current": "router.get('/alerts/settings', (req, res) => {",
        "after": "  try {\n    console.log('⚙️ [MONITOR] Alert settings requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 576,
      "content": "router.put('/alerts/settings', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحديث إعدادات التنبيهات المتقدمة\n */",
        "current": "router.put('/alerts/settings', (req, res) => {",
        "after": "  try {\n    const newSettings = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 611,
      "content": "router.post('/alerts/test-email', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * اختبار إرسال تنبيه عبر البريد الإلكتروني\n */",
        "current": "router.post('/alerts/test-email', (req, res) => {",
        "after": "  try {\n    console.log('📧 [MONITOR] Test email alert requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 662,
      "content": "router.delete('/alerts/suppressed', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * مسح التنبيهات المكبوتة\n */",
        "current": "router.delete('/alerts/suppressed', (req, res) => {",
        "after": "  try {\n    console.log('🔇 [MONITOR] Clear suppressed alerts requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 696,
      "content": "router.get('/reports/daily', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إنشاء تقرير يومي\n */",
        "current": "router.get('/reports/daily', (req, res) => {",
        "after": "  try {\n    const date = req.query.date ? new Date(req.query.date) : new Date();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 727,
      "content": "router.get('/reports/weekly', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إنشاء تقرير أسبوعي\n */",
        "current": "router.get('/reports/weekly', (req, res) => {",
        "after": "  try {\n    const endDate = req.query.endDate ? new Date(req.query.endDate) : new Date();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 758,
      "content": "router.get('/reports/summary', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على ملخص سريع للتقارير\n */",
        "current": "router.get('/reports/summary', (req, res) => {",
        "after": "  try {\n    console.log('📊 [REPORTS] Report summary requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 795,
      "content": "router.post('/reports/export', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تصدير التقرير (محاكاة)\n */",
        "current": "router.post('/reports/export', (req, res) => {",
        "after": "  try {\n    const { type = 'daily', format = 'json', date } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 847,
      "content": "router.post('/quality/rating', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تسجيل تقييم جديد من العميل\n */",
        "current": "router.post('/quality/rating', (req, res) => {",
        "after": "  try {\n    const { messageId, conversationId, customerId, rating, comment } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 905,
      "content": "router.get('/quality/stats', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على إحصائيات الجودة\n */",
        "current": "router.get('/quality/stats', (req, res) => {",
        "after": "  try {\n    const stats = qualityMonitor.getQualityStats();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 932,
      "content": "router.get('/quality/performance', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على مقاييس الأداء المتقدمة\n */",
        "current": "router.get('/quality/performance', (req, res) => {",
        "after": "  try {\n    // console.log('📊 [QUALITY] Performance metrics requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 961,
      "content": "router.get('/quality/insights', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على الرؤى اليومية والاتجاهات\n */",
        "current": "router.get('/quality/insights', (req, res) => {",
        "after": "  try {\n    // console.log('📊 [QUALITY] Daily insights requested');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\monitoringRoutes.js",
      "line": 990,
      "content": "router.post('/quality/response', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تسجيل رد جديد مع مقاييس الأداء\n */",
        "current": "router.post('/quality/response', (req, res) => {",
        "after": "  try {\n    const { messageId, conversationId, metrics } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\notifications.js",
      "line": 26,
      "content": "req.user = null;",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    // لا يوجد token - مستخدم غير مسجل دخول",
        "current": "    req.user = null;",
        "after": "    return next();\n  }"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\notifications.js",
      "line": 37,
      "content": "router.get('/recent', optionalAuth, async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * Get recent notifications for user\n */",
        "current": "router.get('/recent', optionalAuth, async (req, res) => {",
        "after": "  try {\n    // إذا لم يكن المستخدم مسجل دخول، أرجع قائمة فارغة"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 10,
      "content": "router.get('/simple', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// الحصول على الطلبات البسيطة",
        "current": "router.get('/simple', async (req, res) => {",
        "after": "  try {\n    const orders = await simpleOrderService.getAllOrdersFromFiles();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 31,
      "content": "router.get('/simple/stats', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إحصائيات الطلبات البسيطة",
        "current": "router.get('/simple/stats', async (req, res) => {",
        "after": "  try {\n    const stats = await simpleOrderService.getSimpleStats();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 51,
      "content": "router.post('/simple/:orderNumber/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// تحديث حالة الطلب البسيط",
        "current": "router.post('/simple/:orderNumber/status', async (req, res) => {",
        "after": "  try {\n    const { orderNumber } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 82,
      "content": "router.get('/', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// الحصول على جميع الطلبات",
        "current": "router.get('/', async (req, res) => {",
        "after": "  try {\n    const { page = 1, limit = 20, status, customerId } = req.query;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 158,
      "content": "router.get('/:orderNumber', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// الحصول على طلب محدد",
        "current": "router.get('/:orderNumber', async (req, res) => {",
        "after": "  try {\n    const { orderNumber } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 187,
      "content": "router.patch('/:orderNumber/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// تحديث حالة الطلب",
        "current": "router.patch('/:orderNumber/status', async (req, res) => {",
        "after": "  try {\n    const { orderNumber } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 226,
      "content": "router.post('/:orderNumber/confirm', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// تأكيد الطلب",
        "current": "router.post('/:orderNumber/confirm', async (req, res) => {",
        "after": "  try {\n    const { orderNumber } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 250,
      "content": "router.post('/:orderNumber/cancel', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إلغاء الطلب",
        "current": "router.post('/:orderNumber/cancel', async (req, res) => {",
        "after": "  try {\n    const { orderNumber } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 274,
      "content": "router.get('/stats/summary', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إحصائيات الطلبات",
        "current": "router.get('/stats/summary', async (req, res) => {",
        "after": "  try {\n    const { days = 30, companyId } = req.query;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 303,
      "content": "router.get('/customer/:customerId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// طلبات العميل",
        "current": "router.get('/customer/:customerId', async (req, res) => {",
        "after": "  try {\n    const { customerId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 326,
      "content": "router.post('/create-simple', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إنشاء طلب بسيط (للاختبار)",
        "current": "router.post('/create-simple', async (req, res) => {",
        "after": "  try {\n    const orderData = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\orders.js",
      "line": 363,
      "content": "router.post('/create', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إنشاء طلب يدوي (للاختبار)",
        "current": "router.post('/create', async (req, res) => {",
        "after": "  try {\n    const orderData = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\paymentRoutes.js",
      "line": 162,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const payment = await prisma.payment.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        company: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\paymentRoutes.js",
      "line": 218,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\paymentRoutes.js",
      "line": 232,
      "content": "where: { id: invoiceId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    if (invoiceId) {\n      invoice = await prisma.invoice.findUnique({",
        "current": "        where: { id: invoiceId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\paymentRoutes.js",
      "line": 280,
      "content": "where: { id: invoiceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    if (invoice && amount >= invoice.totalAmount) {\n      await prisma.invoice.update({",
        "current": "        where: { id: invoiceId },",
        "after": "        data: {\n          status: 'PAID',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 18,
      "content": "router.get('/:companyId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على إعدادات الأولوية للشركة\n */",
        "current": "router.get('/:companyId', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 22,
      "content": "console.log(`📊 [API] Getting priority settings for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { companyId } = req.params;\n    ",
        "current": "    console.log(`📊 [API] Getting priority settings for company: ${companyId}`);",
        "after": "    \n    const aiSettings = await prisma.aiSettings.findFirst({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 25,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    \n    const aiSettings = await prisma.aiSettings.findFirst({",
        "current": "      where: { companyId }",
        "after": "    });\n    "
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 63,
      "content": "router.put('/:companyId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تحديث إعدادات الأولوية للشركة\n */",
        "current": "router.put('/:companyId', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 76,
      "content": "console.log(`💾 [API] Updating priority settings for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    } = req.body;\n    ",
        "current": "    console.log(`💾 [API] Updating priority settings for company: ${companyId}`);",
        "after": "    \n    // التحقق من صحة القيم"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 106,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // تحديث الإعدادات\n    const updatedSettings = await prisma.aiSettings.update({",
        "current": "      where: { companyId },",
        "after": "      data: {\n        promptPriority: promptPriority || undefined,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 148,
      "content": "router.post('/:companyId/test-conflict', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * اختبار كشف التعارض\n */",
        "current": "router.post('/:companyId/test-conflict', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 153,
      "content": "console.log(`🧪 [API] Testing conflict detection for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { prompt, patterns } = req.body;\n    ",
        "current": "    console.log(`🧪 [API] Testing conflict detection for company: ${companyId}`);",
        "after": "    \n    if (!prompt || !patterns) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 192,
      "content": "router.get('/:companyId/conflict-reports', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * الحصول على تقارير التعارض\n */",
        "current": "router.get('/:companyId/conflict-reports', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 197,
      "content": "console.log(`📊 [API] Getting conflict reports for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { page = 1, limit = 10, severity, resolved } = req.query;\n    ",
        "current": "    console.log(`📊 [API] Getting conflict reports for company: ${companyId}`);",
        "after": "    \n    const whereClause = { companyId };"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\prioritySettingsRoutes.js",
      "line": 246,
      "content": "router.put('/:companyId/conflict-reports/:reportId/resolve', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * حل تقرير تعارض\n */",
        "current": "router.put('/:companyId/conflict-reports/:reportId/resolve', async (req, res) => {",
        "after": "  try {\n    const { companyId, reportId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 23,
      "content": "req.user = {",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "  // Accept mock token from login or development mock token\n  if (token === 'mock-access-token' || token.includes('mock-signature')) {",
        "current": "    req.user = {",
        "after": "      id: 'dev-user',\n      email: 'dev@example.com',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 27,
      "content": "companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "      email: 'dev@example.com',\n      role: 'COMPANY_ADMIN',",
        "current": "      companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
        "after": "    };\n    return next();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 56,
      "content": "console.log('Fetching products from database for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log('Fetching products from database for company:', companyId);",
        "after": "\n      // بناء where clause مع فلترة companyId الإجبارية"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 68,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          company: true,\n          variants: {",
        "current": "            where: { isActive: true },",
        "after": "            orderBy: { sortOrder: 'asc' }\n          }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 141,
      "content": "where: { id: productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get product from database with variants\n      const product = await prisma.product.findUnique({",
        "current": "        where: { id: productId },",
        "after": "        include: {\n          category: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 205,
      "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "\n      // Get user from auth middleware",
        "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
        "after": "\n      // Get categories from database"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 212,
      "content": "where: { companyId: user.companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const categories = await prisma.category.findMany({",
        "current": "        where: { companyId: user.companyId },",
        "after": "        include: {\n          _count: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 252,
      "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "\n      // Get user from auth middleware",
        "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
        "after": "\n      // Create category in database"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 304,
      "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "\n      // Get user from auth middleware",
        "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
        "after": "\n      // Update category in database"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 327,
      "content": "where: { id: id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const category = await prisma.category.update({",
        "current": "        where: { id: id },",
        "after": "        data: {\n          name: name.trim(),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 400,
      "content": "where: { categoryId: duplicate.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          if (duplicate.products.length > 0) {\n            await prisma.product.updateMany({",
        "current": "              where: { categoryId: duplicate.id },",
        "after": "              data: { categoryId: original.id }\n            });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 408,
      "content": "where: { id: duplicate.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // Delete the duplicate category\n          await prisma.category.delete({",
        "current": "            where: { id: duplicate.id }",
        "after": "          });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 462,
      "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "\n      // Get user from auth middleware",
        "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
        "after": "\n      // Delete category from database"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 499,
      "content": "where: { id: id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      await prisma.category.delete({",
        "current": "        where: { id: id }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 536,
      "content": "const firstCompany = await prisma.company.findFirst();",
      "description": "Prisma findFirst without filters - CRITICAL DATA EXPOSURE",
      "severity": "HIGH",
      "category": "DATA_EXPOSURE",
      "impact": "HIGH",
      "cwe": "CWE-200",
      "context": {
        "before": "\n      // Get the first company ID from database",
        "current": "      const firstCompany = await prisma.company.findFirst();",
        "after": "      const companyId = firstCompany ? firstCompany.id : null;\n"
      },
      "mitigation": true,
      "riskScore": 3
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 571,
      "content": "const skuExists = await prisma.product.findUnique({ where: { sku } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (sku) {\n        // Ensure SKU is unique if provided",
        "current": "        const skuExists = await prisma.product.findUnique({ where: { sku } });",
        "after": "        if (skuExists) {\n          return res.status(400).json({"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 654,
      "content": "where: { id: updateData.category }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // If not found by name, try to use it as an ID directly\n          const categoryById = await prisma.category.findUnique({",
        "current": "            where: { id: updateData.category }",
        "after": "          });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 677,
      "content": "where: { id: productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update product in database\n      const updatedProduct = await prisma.product.update({",
        "current": "        where: { id: productId },",
        "after": "        data: updateData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 723,
      "content": "where: { id: productId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Delete product from database\n      await prisma.product.delete({",
        "current": "        where: { id: productId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 765,
      "content": "where: { productId: productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get product variants from database\n      const variants = await prisma.productVariant.findMany({",
        "current": "        where: { productId: productId },",
        "after": "        orderBy: { sortOrder: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 800,
      "content": "const variantSkuExists = await prisma.productVariant.findUnique({ where: { sku: variantSku } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (variantSku) {\n        // Ensure variant SKU is unique if provided",
        "current": "        const variantSkuExists = await prisma.productVariant.findUnique({ where: { sku: variantSku } });",
        "after": "        if (variantSkuExists) {\n          return res.status(400).json({"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 904,
      "content": "where: { id: variantId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update variant in database\n      const variant = await prisma.productVariant.update({",
        "current": "        where: { id: variantId },",
        "after": "        data: processedData\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 946,
      "content": "where: { id: variantId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Delete variant from database\n      await prisma.productVariant.delete({",
        "current": "        where: { id: variantId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 978,
      "content": "router.get('/categories', productController.getCategories);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Public routes (no authentication required)",
        "current": "router.get('/categories', productController.getCategories);",
        "after": "router.post('/categories', productController.createCategory);\nrouter.post('/categories/cleanup', productController.cleanupCategories);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 979,
      "content": "router.post('/categories', productController.createCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Public routes (no authentication required)\nrouter.get('/categories', productController.getCategories);",
        "current": "router.post('/categories', productController.createCategory);",
        "after": "router.post('/categories/cleanup', productController.cleanupCategories);\nrouter.put('/categories/:id', productController.updateCategory);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 980,
      "content": "router.post('/categories/cleanup', productController.cleanupCategories);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/categories', productController.getCategories);\nrouter.post('/categories', productController.createCategory);",
        "current": "router.post('/categories/cleanup', productController.cleanupCategories);",
        "after": "router.put('/categories/:id', productController.updateCategory);\nrouter.delete('/categories/:id', productController.deleteCategory);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 981,
      "content": "router.put('/categories/:id', productController.updateCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/categories', productController.createCategory);\nrouter.post('/categories/cleanup', productController.cleanupCategories);",
        "current": "router.put('/categories/:id', productController.updateCategory);",
        "after": "router.delete('/categories/:id', productController.deleteCategory);\nrouter.get('/', productController.getProducts);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 982,
      "content": "router.delete('/categories/:id', productController.deleteCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/categories/cleanup', productController.cleanupCategories);\nrouter.put('/categories/:id', productController.updateCategory);",
        "current": "router.delete('/categories/:id', productController.deleteCategory);",
        "after": "router.get('/', productController.getProducts);\nrouter.post('/', productController.createProduct);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 983,
      "content": "router.get('/', productController.getProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.put('/categories/:id', productController.updateCategory);\nrouter.delete('/categories/:id', productController.deleteCategory);",
        "current": "router.get('/', productController.getProducts);",
        "after": "router.post('/', productController.createProduct);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 984,
      "content": "router.post('/', productController.createProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.delete('/categories/:id', productController.deleteCategory);\nrouter.get('/', productController.getProducts);",
        "current": "router.post('/', productController.createProduct);",
        "after": "\n// Product Variants routes (public for testing) - specific routes first"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 987,
      "content": "router.get('/:id/variants', productController.getProductVariants);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Product Variants routes (public for testing) - specific routes first",
        "current": "router.get('/:id/variants', productController.getProductVariants);",
        "after": "router.post('/:id/variants', productController.createProductVariant);\nrouter.patch('/variants/:variantId', productController.updateProductVariant);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 988,
      "content": "router.post('/:id/variants', productController.createProductVariant);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Product Variants routes (public for testing) - specific routes first\nrouter.get('/:id/variants', productController.getProductVariants);",
        "current": "router.post('/:id/variants', productController.createProductVariant);",
        "after": "router.patch('/variants/:variantId', productController.updateProductVariant);\nrouter.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 989,
      "content": "router.patch('/variants/:variantId', productController.updateProductVariant);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/:id/variants', productController.getProductVariants);\nrouter.post('/:id/variants', productController.createProductVariant);",
        "current": "router.patch('/variants/:variantId', productController.updateProductVariant);",
        "after": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT\nrouter.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 990,
      "content": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/:id/variants', productController.createProductVariant);\nrouter.patch('/variants/:variantId', productController.updateProductVariant);",
        "current": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
        "after": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path\nrouter.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 991,
      "content": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.patch('/variants/:variantId', productController.updateProductVariant);\nrouter.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
        "current": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
        "after": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT\nrouter.delete('/variants/:variantId', productController.deleteProductVariant);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 992,
      "content": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT\nrouter.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
        "current": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
        "after": "router.delete('/variants/:variantId', productController.deleteProductVariant);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 993,
      "content": "router.delete('/variants/:variantId', productController.deleteProductVariant);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path\nrouter.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
        "current": "router.delete('/variants/:variantId', productController.deleteProductVariant);",
        "after": "\n// Image management endpoints (public for testing)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 998,
      "content": "router.post('/:id/images', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Add image to product by URL",
        "current": "router.post('/:id/images', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1029,
      "content": "where: { id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
        "current": "      where: { id }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1063,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update product\n    const updatedProduct = await prisma.product.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        images: JSON.stringify(currentImages)"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1106,
      "content": "router.post('/:id/variants/:variantId/images', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Add image to variant by URL",
        "current": "router.post('/:id/variants/:variantId/images', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1137,
      "content": "where: { id: variantId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get current variant\n    const variant = await prisma.productVariant.findUnique({",
        "current": "      where: { id: variantId },",
        "after": "      include: { product: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1138,
      "content": "include: { product: true }",
      "description": "Prisma include without isolation verification",
      "severity": "MEDIUM",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "    const variant = await prisma.productVariant.findUnique({\n      where: { id: variantId },",
        "current": "      include: { product: true }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1172,
      "content": "where: { id: variantId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update variant\n    const updatedVariant = await prisma.productVariant.update({",
        "current": "      where: { id: variantId },",
        "after": "      data: {\n        images: JSON.stringify(currentImages)"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1206,
      "content": "router.delete('/:id/images', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Delete image from product endpoint",
        "current": "router.delete('/:id/images', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1227,
      "content": "where: { id: id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
        "current": "      where: { id: id }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1271,
      "content": "where: { id: id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update product in database\n    const updatedProduct = await prisma.product.update({",
        "current": "      where: { id: id },",
        "after": "      data: {\n        images: JSON.stringify(currentImages)"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1314,
      "content": "router.post('/:id/images/url', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Image upload from URL endpoint",
        "current": "router.post('/:id/images/url', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1348,
      "content": "where: { id: id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
        "current": "      where: { id: id }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1383,
      "content": "where: { id: id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update product in database\n    const updatedProduct = await prisma.product.update({",
        "current": "      where: { id: id },",
        "after": "      data: {\n        images: JSON.stringify(currentImages)"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1426,
      "content": "router.get('/:id', productController.getProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Public product details route (no authentication required)",
        "current": "router.get('/:id', productController.getProduct);",
        "after": "\n// Authenticated routes"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1432,
      "content": "router.patch('/:id', productController.updateProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Routes that require authentication - specific routes before generic",
        "current": "router.patch('/:id', productController.updateProduct);",
        "after": "router.delete('/:id', productController.deleteProduct);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.js",
      "line": 1433,
      "content": "router.delete('/:id', productController.deleteProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Routes that require authentication - specific routes before generic\nrouter.patch('/:id', productController.updateProduct);",
        "current": "router.delete('/:id', productController.deleteProduct);",
        "after": "\nmodule.exports = router;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 14,
      "content": "router.get('/', productController.getProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Routes that require authentication (specific routes first)",
        "current": "router.get('/', productController.getProducts);",
        "after": "router.get('/categories', productController.getCategories);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 15,
      "content": "router.get('/categories', productController.getCategories);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Routes that require authentication (specific routes first)\nrouter.get('/', productController.getProducts);",
        "current": "router.get('/categories', productController.getCategories);",
        "after": "\n// Admin & Manager routes (specific routes before parameterized ones)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 18,
      "content": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Admin & Manager routes (specific routes before parameterized ones)",
        "current": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
        "after": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);\nrouter.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 19,
      "content": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Admin & Manager routes (specific routes before parameterized ones)\nrouter.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
        "current": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
        "after": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);\nrouter.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 20,
      "content": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);\nrouter.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
        "current": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
        "after": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);\nrouter.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 21,
      "content": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);\nrouter.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
        "current": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
        "after": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);\nrouter.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 22,
      "content": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);\nrouter.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
        "current": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
        "after": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);\nrouter.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 23,
      "content": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);\nrouter.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
        "current": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
        "after": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 24,
      "content": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);\nrouter.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
        "current": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);",
        "after": "\n// Public routes (parameterized routes last)"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 27,
      "content": "router.get('/:id', productController.getProduct);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Public routes (parameterized routes last)",
        "current": "router.get('/:id', productController.getProduct);",
        "after": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);\nrouter.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 28,
      "content": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "// Public routes (parameterized routes last)\nrouter.get('/:id', productController.getProduct);",
        "current": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
        "after": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);\nrouter.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 29,
      "content": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/:id', productController.getProduct);\nrouter.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
        "current": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
        "after": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);\nrouter.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 30,
      "content": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);\nrouter.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
        "current": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
        "after": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);\n"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\productRoutes.ts",
      "line": 31,
      "content": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);\nrouter.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
        "current": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);",
        "after": "\nexport default router;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 18,
      "content": "req.user = {",
      "description": "Manual user assignment - potential authentication bypass",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-287",
      "context": {
        "before": "\n  if (token === 'mock-access-token' || token.includes('mock-signature')) {",
        "current": "    req.user = {",
        "after": "      id: 'dev-user',\n      email: 'dev@example.com',"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 22,
      "content": "companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "      email: 'dev@example.com',\n      role: 'COMPANY_ADMIN',",
        "current": "      companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
        "after": "    };\n    return next();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 34,
      "content": "router.get('/company', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get company settings",
        "current": "router.get('/company', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 42,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 57,
      "content": "console.log('Error parsing company settings:', error);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      settings = company.settings ? JSON.parse(company.settings) : {};\n    } catch (error) {",
        "current": "      console.log('Error parsing company settings:', error);",
        "after": "      settings = {};\n    }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 114,
      "content": "router.put('/company', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Update company settings",
        "current": "router.put('/company', async (req, res) => {",
        "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 122,
      "content": "console.log('Updating company settings:', companyId, newSettings);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const newSettings = req.body.settings || {};\n",
        "current": "    console.log('Updating company settings:', companyId, newSettings);",
        "after": "\n    // Get current company"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 126,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get current company\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 150,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update company\n    const updatedCompany = await prisma.company.update({",
        "current": "      where: { id: companyId },",
        "after": "      data: {\n        settings: JSON.stringify(updatedSettings)"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 181,
      "content": "router.get('/currencies', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Currency presets",
        "current": "router.get('/currencies', (req, res) => {",
        "after": "  const currencies = [\n    {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 216,
      "content": "router.get('/ai', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Get AI settings (with database fallback)",
        "current": "router.get('/ai', async (req, res) => {",
        "after": "  try {\n    console.log('📥 [AI-SETTINGS] GET request received');"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 230,
      "content": "console.log('🏢 [AI-SETTINGS] Loading settings for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    const companyId = req.user.companyId;",
        "current": "    console.log('🏢 [AI-SETTINGS] Loading settings for company:', companyId);",
        "after": "\n    let settings = {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 245,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
        "current": "        where: { companyId },",
        "after": "        select: {\n          qualityEvaluationEnabled: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 321,
      "content": "router.put('/ai', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Update AI settings (with database fallback)",
        "current": "router.put('/ai', async (req, res) => {",
        "after": "  try {\n    console.log('📥 [AI-SETTINGS] Received update request:', req.body);"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 335,
      "content": "console.log('🏢 [AI-SETTINGS] Updating settings for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    const companyId = req.user.companyId;",
        "current": "    console.log('🏢 [AI-SETTINGS] Updating settings for company:', companyId);",
        "after": "\n    const { qualityEvaluationEnabled, autoReplyEnabled, confidenceThreshold, multimodalEnabled, ragEnabled } = req.body;"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\settingsRoutes.js",
      "line": 349,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const aiSettings = await prisma.aiSettings.upsert({",
        "current": "        where: { companyId },",
        "after": "        update: updateData,\n        create: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 108,
      "content": "where: { status: 'ACTIVE' },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Calculate revenue\n    const revenueStats = await prisma.subscription.aggregate({",
        "current": "      where: { status: 'ACTIVE' },",
        "after": "      _sum: {\n        price: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 153,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const subscription = await prisma.subscription.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        company: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 212,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 261,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update company plan\n    await prisma.company.update({",
        "current": "      where: { id: companyId },",
        "after": "      data: { plan: planType }\n    });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 300,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Check if subscription exists\n    const existingSubscription = await prisma.subscription.findUnique({",
        "current": "      where: { id },",
        "after": "      include: { company: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 301,
      "content": "include: { company: true }",
      "description": "Prisma include without isolation verification",
      "severity": "LOW",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "    const existingSubscription = await prisma.subscription.findUnique({\n      where: { id },",
        "current": "      include: { company: true }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 318,
      "content": "where: { id: existingSubscription.companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update company plan as well\n      await prisma.company.update({",
        "current": "        where: { id: existingSubscription.companyId },",
        "after": "        data: { plan: planType }\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 331,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update subscription\n    const subscription = await prisma.subscription.update({",
        "current": "      where: { id },",
        "after": "      data: updateData,\n      include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 376,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const subscription = await prisma.subscription.findUnique({",
        "current": "      where: { id },",
        "after": "      include: {\n        company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 436,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update subscription\n    const updatedSubscription = await prisma.subscription.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        status: 'ACTIVE',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 520,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const subscription = await prisma.subscription.findUnique({",
        "current": "      where: { id },",
        "after": "      include: { company: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 521,
      "content": "include: { company: true }",
      "description": "Prisma include without isolation verification",
      "severity": "LOW",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "    const subscription = await prisma.subscription.findUnique({\n      where: { id },",
        "current": "      include: { company: true }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 551,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const updatedSubscription = await prisma.subscription.update({",
        "current": "      where: { id },",
        "after": "      data: updateData,\n      include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 591,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const subscription = await prisma.subscription.findUnique({",
        "current": "      where: { id },",
        "after": "      include: { company: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 592,
      "content": "include: { company: true }",
      "description": "Prisma include without isolation verification",
      "severity": "LOW",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "    const subscription = await prisma.subscription.findUnique({\n      where: { id },",
        "current": "      include: { company: true }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\subscriptionRoutes.js",
      "line": 614,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update subscription\n    const updatedSubscription = await prisma.subscription.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        status: 'ACTIVE',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 28,
      "content": "router.get('/analyze-patterns', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/analyze-patterns\n */",
        "current": "router.get('/analyze-patterns', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 48,
      "content": "console.log(`🔍 [API] Analyzing success patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const patternTypesArray = patternTypes.split(',');\n",
        "current": "    console.log(`🔍 [API] Analyzing success patterns for company: ${companyId}`);",
        "after": "\n    const result = await successAnalyzer.analyzeSuccessPatterns(companyId, {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 99,
      "content": "router.get('/detect-patterns', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/detect-patterns\n */",
        "current": "router.get('/detect-patterns', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 115,
      "content": "console.log(`🔍 [API] Detecting new patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    } = req.query;\n",
        "current": "    console.log(`🔍 [API] Detecting new patterns for company: ${companyId}`);",
        "after": "\n    const result = await patternDetector.detectNewPatterns(companyId, parseInt(timeRange));"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 147,
      "content": "router.post('/record-outcome', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/record-outcome\n */",
        "current": "router.post('/record-outcome', async (req, res) => {",
        "after": "  try {\n    const outcomeData = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 183,
      "content": "router.get('/patterns', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/patterns\n */",
        "current": "router.get('/patterns', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 274,
      "content": "router.put('/patterns/:id/approve', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * PUT /api/v1/success-learning/patterns/:id/approve\n */",
        "current": "router.put('/patterns/:id/approve', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 280,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const pattern = await prisma.successPattern.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        isApproved: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 310,
      "content": "router.put('/patterns/:id/reject', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * PUT /api/v1/success-learning/patterns/:id/reject\n */",
        "current": "router.put('/patterns/:id/reject', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 315,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const pattern = await prisma.successPattern.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        isActive: false,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 344,
      "content": "router.put('/patterns/:id/unapprove', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * PUT /api/v1/success-learning/patterns/:id/unapprove\n */",
        "current": "router.put('/patterns/:id/unapprove', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 351,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // التحقق من وجود النمط وأنه معتمد\n    const existingPattern = await prisma.successPattern.findUnique({",
        "current": "      where: { id },",
        "after": "      select: { id: true, isApproved: true, description: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 371,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // إيقاف الاعتماد مع الاحتفاظ بالنشاط\n    const pattern = await prisma.successPattern.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        isApproved: false,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 407,
      "content": "router.get('/outcome-stats', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/outcome-stats\n */",
        "current": "router.get('/outcome-stats', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 484,
      "content": "router.get('/response-effectiveness', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/response-effectiveness\n */",
        "current": "router.get('/response-effectiveness', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 549,
      "content": "router.post('/run-analysis', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/run-analysis\n */",
        "current": "router.post('/run-analysis', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 565,
      "content": "console.log(`🚀 [API] Running comprehensive analysis for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    } = req.body;\n",
        "current": "    console.log(`🚀 [API] Running comprehensive analysis for company: ${companyId}`);",
        "after": "\n    // تشغيل التحليل الشامل"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 599,
      "content": "router.get('/export', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/export\n */",
        "current": "router.get('/export', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 616,
      "content": "console.log(`📤 [API] Exporting data for company: ${companyId}, format: ${format}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    } = req.query;\n",
        "current": "    console.log(`📤 [API] Exporting data for company: ${companyId}, format: ${format}`);",
        "after": "\n    // جلب الأنماط"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 664,
      "content": "router.get('/pattern-performance', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/pattern-performance\n */",
        "current": "router.get('/pattern-performance', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 676,
      "content": "console.log(`📊 [API] Getting pattern performance for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`📊 [API] Getting pattern performance for company: ${companyId}`);",
        "after": "\n    // جلب إحصائيات الأداء"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 680,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // جلب إحصائيات الأداء\n    const performance = await prisma.patternPerformance.findMany({",
        "current": "      where: { companyId },",
        "after": "      include: {\n        pattern: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 731,
      "content": "router.get('/pattern-usage', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/pattern-usage\n */",
        "current": "router.get('/pattern-usage', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 748,
      "content": "console.log(`📈 [API] Getting pattern usage stats for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    } = req.query;\n",
        "current": "    console.log(`📈 [API] Getting pattern usage stats for company: ${companyId}`);",
        "after": "\n    const startDate = new Date();"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 826,
      "content": "router.post('/test-pattern', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/test-pattern\n */",
        "current": "router.post('/test-pattern', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 856,
      "content": "where: { id: patternId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // جلب النمط\n    const pattern = await prisma.successPattern.findUnique({",
        "current": "      where: { id: patternId }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 911,
      "content": "router.post('/analyze-patterns', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// تحليل أنماط جديدة",
        "current": "router.post('/analyze-patterns', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 923,
      "content": "console.log(`🔍 [API] Analyzing new patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`🔍 [API] Analyzing new patterns for company: ${companyId}`);",
        "after": "\n    // استدعاء خدمة التعلم المستمر لاكتشاف أنماط جديدة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 947,
      "content": "router.post('/patterns/:patternId/approve', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// اعتماد نمط",
        "current": "router.post('/patterns/:patternId/approve', async (req, res) => {",
        "after": "  try {\n    const { patternId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 955,
      "content": "where: { id: patternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // تحديث النمط في قاعدة البيانات\n    const updatedPattern = await prisma.successPattern.update({",
        "current": "      where: { id: patternId },",
        "after": "      data: {\n        isApproved: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 982,
      "content": "router.post('/cleanup-patterns/:companyId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تنظيف الأنماط المكررة والمتشابهة\n */",
        "current": "router.post('/cleanup-patterns/:companyId', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 987,
      "content": "console.log(`🧹 [API] Starting pattern cleanup for company: ${companyId} (dryRun: ${dryRun})`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { dryRun = false } = req.body;\n",
        "current": "    console.log(`🧹 [API] Starting pattern cleanup for company: ${companyId} (dryRun: ${dryRun})`);",
        "after": "\n    if (dryRun) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1036,
      "content": "router.get('/cleanup-stats/:companyId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * إحصائيات الأنماط والتكرارات\n */",
        "current": "router.get('/cleanup-stats/:companyId', async (req, res) => {",
        "after": "  try {\n    const { companyId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1040,
      "content": "console.log(`📊 [API] Getting cleanup stats for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { companyId } = req.params;\n",
        "current": "    console.log(`📊 [API] Getting cleanup stats for company: ${companyId}`);",
        "after": "\n    const stats = await patternCleanup.getCleanupStats(companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1080,
      "content": "router.get('/maintenance/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * حالة نظام الصيانة الدورية\n */",
        "current": "router.get('/maintenance/status', async (req, res) => {",
        "after": "  try {\n    const stats = scheduledMaintenance.getStats();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1103,
      "content": "router.post('/maintenance/run', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * تشغيل صيانة فورية\n */",
        "current": "router.post('/maintenance/run', async (req, res) => {",
        "after": "  try {\n    const { type = 'full' } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1131,
      "content": "router.post('/maintenance/start', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * بدء نظام الصيانة الدورية\n */",
        "current": "router.post('/maintenance/start', async (req, res) => {",
        "after": "  try {\n    scheduledMaintenance.start();"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1160,
      "content": "router.post('/system/enable', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/system/enable\n */",
        "current": "router.post('/system/enable', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1172,
      "content": "console.log(`🚀 [API] Enabling pattern management system for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`🚀 [API] Enabling pattern management system for company: ${companyId}`);",
        "after": "\n    // تفعيل جميع الأنماط المعتمدة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1193,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // حفظ الحالة في metadata أو جدول منفصل\n    await prisma.company.update({",
        "current": "      where: { id: companyId },",
        "after": "      data: {\n        settings: JSON.stringify({"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1228,
      "content": "router.post('/system/disable', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/system/disable\n */",
        "current": "router.post('/system/disable', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1242,
      "content": "console.log(`🛑 [API] Disabling pattern management system for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { reason = 'تم الإيقاف يدوياً' } = req.body;\n",
        "current": "    console.log(`🛑 [API] Disabling pattern management system for company: ${companyId}`);",
        "after": "\n    // إيقاف جميع الأنماط"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1246,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // إيقاف جميع الأنماط\n    const disabledPatterns = await prisma.successPattern.updateMany({",
        "current": "      where: { companyId },",
        "after": "      data: { isActive: false }\n    });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1284,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // حفظ الحالة\n    await prisma.company.update({",
        "current": "      where: { id: companyId },",
        "after": "      data: {\n        settings: JSON.stringify({"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1320,
      "content": "router.get('/system/status', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * GET /api/v1/success-learning/system/status\n */",
        "current": "router.get('/system/status', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1332,
      "content": "console.log(`📊 [API] Getting pattern system status for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`📊 [API] Getting pattern system status for company: ${companyId}`);",
        "after": "\n    // جلب معلومات الشركة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1336,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // جلب معلومات الشركة\n    const company = await prisma.company.findUnique({",
        "current": "      where: { id: companyId },",
        "after": "      select: { settings: true }\n    });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1349,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // إحصائيات الأنماط\n    const totalPatterns = await prisma.successPattern.count({",
        "current": "      where: { companyId }",
        "after": "    });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1397,
      "content": "router.post('/cleanup-patterns', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": " * POST /api/v1/success-learning/cleanup-patterns\n */",
        "current": "router.post('/cleanup-patterns', async (req, res) => {",
        "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1411,
      "content": "console.log(`🧹 [API] Cleaning up duplicate patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    const { dryRun = false } = req.body;\n",
        "current": "    console.log(`🧹 [API] Cleaning up duplicate patterns for company: ${companyId}`);",
        "after": "\n    // البحث عن الأنماط المكررة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1416,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    const duplicatePatterns = await prisma.detectedPattern.groupBy({\n      by: ['patternType', 'companyId'],",
        "current": "      where: { companyId },",
        "after": "      having: {\n        id: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\routes\\successLearning.js",
      "line": 1447,
      "content": "where: { id: pattern.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        for (const pattern of toDelete) {\n          await prisma.detectedPattern.delete({",
        "current": "            where: { id: pattern.id }",
        "after": "          });\n          patternsDeleted++;"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\uploadRoutes.js",
      "line": 58,
      "content": "router.post('/single', upload.single('image'), (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Upload single image",
        "current": "router.post('/single', upload.single('image'), (req, res) => {",
        "after": "  try {\n    if (!req.file) {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\uploadRoutes.js",
      "line": 91,
      "content": "router.post('/multiple', upload.array('images', 10), (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Upload multiple images",
        "current": "router.post('/multiple', upload.array('images', 10), (req, res) => {",
        "after": "  try {\n    if (!req.files || req.files.length === 0) {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\uploadRoutes.js",
      "line": 127,
      "content": "router.delete('/file/:filename', (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Delete image",
        "current": "router.delete('/file/:filename', (req, res) => {",
        "after": "  try {\n    const filename = req.params.filename;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\uploadRoutes.js",
      "line": 201,
      "content": "router.post('/conversation-image', conversationUpload.single('image'), (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// Upload image for conversation",
        "current": "router.post('/conversation-image', conversationUpload.single('image'), (req, res) => {",
        "after": "  try {\n    if (!req.file) {"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 40,
      "content": "router.get('/wallet-numbers', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// جلب أرقام المحافظ النشطة",
        "current": "router.get('/wallet-numbers', async (req, res) => {",
        "after": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 43,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({",
        "current": "      where: { isActive: true },",
        "after": "      orderBy: { createdAt: 'asc' }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 61,
      "content": "router.get('/invoice/:invoiceId', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// جلب تفاصيل فاتورة للدفع",
        "current": "router.get('/invoice/:invoiceId', async (req, res) => {",
        "after": "  try {\n    const { invoiceId } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 66,
      "content": "where: { id: invoiceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const invoice = await prisma.invoice.findUnique({",
        "current": "      where: { id: invoiceId },",
        "after": "      include: {\n        company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 111,
      "content": "router.post('/submit-receipt', upload.single('receipt'), async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// رفع إيصال الدفع",
        "current": "router.post('/submit-receipt', upload.single('receipt'), async (req, res) => {",
        "after": "  try {\n    const { invoiceId, walletNumberId } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 124,
      "content": "where: { id: invoiceId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // التحقق من وجود الفاتورة\n    const invoice = await prisma.invoice.findUnique({",
        "current": "      where: { id: invoiceId }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 143,
      "content": "where: { id: walletNumberId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // التحقق من وجود رقم المحفظة\n    const walletNumber = await prisma.walletNumber.findUnique({",
        "current": "      where: { id: walletNumberId }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 180,
      "content": "router.get('/admin/wallet-numbers', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// جلب جميع أرقام المحافظ (للإدارة)",
        "current": "router.get('/admin/wallet-numbers', async (req, res) => {",
        "after": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 200,
      "content": "router.post('/admin/wallet-numbers', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// إضافة رقم محفظة جديد",
        "current": "router.post('/admin/wallet-numbers', async (req, res) => {",
        "after": "  try {\n    const { name, number, icon, color } = req.body;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 229,
      "content": "router.put('/admin/wallet-numbers/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// تحديث رقم محفظة",
        "current": "router.put('/admin/wallet-numbers/:id', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 235,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const walletNumber = await prisma.walletNumber.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        name,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 260,
      "content": "router.delete('/admin/wallet-numbers/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// حذف رقم محفظة",
        "current": "router.delete('/admin/wallet-numbers/:id', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 265,
      "content": "where: { id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    await prisma.walletNumber.delete({",
        "current": "      where: { id }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 282,
      "content": "router.get('/admin/pending-receipts', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// جلب الإيصالات في الانتظار",
        "current": "router.get('/admin/pending-receipts', async (req, res) => {",
        "after": "  try {\n    const { page = 1, limit = 10 } = req.query;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 288,
      "content": "where: { status: 'PENDING' },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const receipts = await prisma.paymentReceipt.findMany({",
        "current": "      where: { status: 'PENDING' },",
        "after": "      include: {\n        invoice: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 308,
      "content": "where: { status: 'PENDING' }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const total = await prisma.paymentReceipt.count({",
        "current": "      where: { status: 'PENDING' }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 331,
      "content": "router.post('/admin/review-receipt/:id', async (req, res) => {",
      "description": "API route without authentication middleware",
      "severity": "HIGH",
      "category": "AUTHENTICATION",
      "impact": "HIGH",
      "cwe": "CWE-306",
      "context": {
        "before": "\n// مراجعة إيصال الدفع",
        "current": "router.post('/admin/review-receipt/:id', async (req, res) => {",
        "after": "  try {\n    const { id } = req.params;"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 337,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n    const receipt = await prisma.paymentReceipt.findUnique({",
        "current": "      where: { id },",
        "after": "      include: { invoice: true }\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 338,
      "content": "include: { invoice: true }",
      "description": "Prisma include without isolation verification",
      "severity": "MEDIUM",
      "category": "DATA_EXPOSURE",
      "impact": "MEDIUM",
      "cwe": "CWE-200",
      "context": {
        "before": "    const receipt = await prisma.paymentReceipt.findUnique({\n      where: { id },",
        "current": "      include: { invoice: true }",
        "after": "    });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 359,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // تحديث حالة الإيصال\n    await prisma.paymentReceipt.update({",
        "current": "      where: { id },",
        "after": "      data: {\n        status: newStatus,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\routes\\walletPayment.js",
      "line": 371,
      "content": "where: { id: receipt.invoiceId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    if (action === 'approve') {\n      await prisma.invoice.update({",
        "current": "        where: { id: receipt.invoiceId },",
        "after": "        data: {\n          status: 'PAID',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\scripts\\migrateOrders.js",
      "line": 31,
      "content": "where: { orderNumber: orderData.orderNumber }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "            // تحقق من وجود الطلب في قاعدة البيانات\n            const existingOrder = await prisma.order.findUnique({",
        "current": "                where: { orderNumber: orderData.orderNumber }",
        "after": "            });\n            "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\scripts\\migrateOrders.js",
      "line": 57,
      "content": "companyId: 'cmdt8nrjq003vufuss47dqc45' // Company ID الافتراضي",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "                        phone: orderData.customerPhone || '',\n                        email: orderData.customerEmail || '',",
        "current": "                        companyId: 'cmdt8nrjq003vufuss47dqc45' // Company ID الافتراضي",
        "after": "                    }\n                });"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\server-simple.js",
      "line": 6,
      "content": "const PORT = process.env.PORT || 3001;",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\nconst app = express();",
        "current": "const PORT = process.env.PORT || 3001;",
        "after": "\n// Middleware"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\advancedNotificationService.js",
      "line": 439,
      "content": "console.log(`Sending push notification to user ${notification.userId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async sendPushNotification(notification, channel, subscription) {\n    // Mock push notification sending",
        "current": "    console.log(`Sending push notification to user ${notification.userId}`);",
        "after": "    \n    return {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\advancedProductService.js",
      "line": 13,
      "content": "this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  constructor() {\n    this.prisma = new PrismaClient();",
        "current": "    this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\advancedProductService.js",
      "line": 66,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const aiSettings = await this.prisma.aiSettings.findUnique({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          company: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedProductService.js",
      "line": 127,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if company exists first\n      const company = await this.prisma.company.findUnique({",
        "current": "        where: { id: companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedProductService.js",
      "line": 138,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await this.prisma.aiSettings.upsert({",
        "current": "        where: { companyId },",
        "after": "        update: {\n          defaultProductId: defaultProductId || null,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedProductService.js",
      "line": 210,
      "content": "where: { id: customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (customerId) {\n        const customer = await this.prisma.customer.findUnique({",
        "current": "          where: { id: customerId },",
        "after": "          include: {\n            orders: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 197,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // First, verify that the company exists\n      const company = await this.prisma.company.findUnique({",
        "current": "        where: { id: companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 210,
      "content": "console.log('Looking for AI settings for company:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      let aiSettings = null;\n      try {",
        "current": "        console.log('Looking for AI settings for company:', companyId);",
        "after": "        aiSettings = await this.prisma.aiSettings.findFirst({\n          where: { companyId }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 212,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        console.log('Looking for AI settings for company:', companyId);\n        aiSettings = await this.prisma.aiSettings.findFirst({",
        "current": "          where: { companyId }",
        "after": "        });\n        console.log('Found AI settings:', aiSettings);"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 334,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // First, verify that the company exists\n      const company = await this.prisma.company.findUnique({",
        "current": "        where: { id: companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 345,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      try {\n        aiSettings = await this.prisma.aiSettings.upsert({",
        "current": "          where: { companyId },",
        "after": "          update: {\n            personalityPrompt: personalityPrompt || null,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 364,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        // Try to find existing record first\n        const existingSettings = await this.prisma.aiSettings.findUnique({",
        "current": "          where: { companyId }",
        "after": "        });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\advancedPromptService.js",
      "line": 370,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // Update existing record\n          aiSettings = await this.prisma.aiSettings.update({",
        "current": "            where: { companyId },",
        "after": "            data: {\n              personalityPrompt: personalityPrompt || null,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 19,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // البحث عن المفتاح النشط\n      const activeKey = await prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { priority: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 72,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async findBestAvailableModelInActiveKey(keyId) {\n    try {",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 104,
      "content": "const modelRecord = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async updateModelUsage(modelId) {\n    try {",
        "current": "      const modelRecord = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 117,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "        };\n",
        "current": "        await prisma.$executeRaw`",
        "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 154,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على المفتاح النشط الحالي\n      const currentActiveKey = await prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { priority: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 209,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 227,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 234,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "            \n            // تحديث آخر استخدام",
        "current": "            await prisma.$executeRaw`",
        "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 299,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async findBestModelInKey(keyId) {\n    try {",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 313,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 336,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-backup.js",
      "line": 342,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // تفعيل المفتاح المطلوب",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 94,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // البحث عن المفتاح النشط\n      const activeKey = await prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { priority: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 147,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async findBestAvailableModelInActiveKey(keyId) {\n    try {",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 179,
      "content": "const modelRecord = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async updateModelUsage(modelId) {\n    try {",
        "current": "      const modelRecord = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 192,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "        };\n",
        "current": "        await prisma.$executeRaw`",
        "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 229,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على المفتاح النشط الحالي\n      const currentActiveKey = await prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { priority: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 284,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 302,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 309,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "            \n            // تحديث آخر استخدام",
        "current": "            await prisma.$executeRaw`",
        "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 374,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async findBestModelInKey(keyId) {\n    try {",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 388,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 411,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService-clean.js",
      "line": 417,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // تفعيل المفتاح المطلوب",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 161,
      "content": "console.log(`❌ No active Gemini key available for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      if (!geminiConfig) {",
        "current": "        console.log(`❌ No active Gemini key available for company: ${companyId}`);",
        "after": "        return {\n          success: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 182,
      "content": "console.log('🏢 [COMPANY-DEBUG] Final companyId for processing:', finalCompanyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // Get company ID from message data or customer data - NO FALLBACK TO FIRST COMPANY\n      let finalCompanyId = companyId || customerData?.companyId;",
        "current": "      console.log('🏢 [COMPANY-DEBUG] Final companyId for processing:', finalCompanyId);",
        "after": "      if (!finalCompanyId) {\n        console.error('❌ [SECURITY] No companyId provided - rejecting request for security');"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 539,
      "content": "console.log('🏢 [COMPANY-DEBUG] Using companyId:', finalCompanyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // الحصول على معلومات الشركة والـ prompts\n      const finalCompanyId = messageData.companyId || messageData.customerData?.companyId;",
        "current": "      console.log('🏢 [COMPANY-DEBUG] Using companyId:', finalCompanyId);",
        "after": "      const companyPrompts = await this.getCompanyPrompts(finalCompanyId);\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 725,
      "content": "console.log('🔍 Getting company prompts for:', companyId);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "   */\n  async getCompanyPrompts(companyId) {",
        "current": "    console.log('🔍 Getting company prompts for:', companyId);",
        "after": "\n    // Require companyId for security"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 773,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      try {\n        const aiSettings = await prisma.aiSettings.findFirst({",
        "current": "          where: { companyId }",
        "after": "        });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 792,
      "content": "console.log('🔍 Checking company table...');",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      // 3. Fallback to company table",
        "current": "      console.log('🔍 Checking company table...');",
        "after": "      try {\n        const company = await prisma.company.findUnique({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 795,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      try {\n        const company = await prisma.company.findUnique({",
        "current": "          where: { id: companyId }",
        "after": "        });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 799,
      "content": "console.log('✅ Found prompts in company table');",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n        if (company && (company.personalityPrompt || company.responsePrompt)) {",
        "current": "          console.log('✅ Found prompts in company table');",
        "after": "          return {\n            personalityPrompt: company.personalityPrompt,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 807,
      "content": "console.log('❌ No prompts in company table');",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "          };\n        } else {",
        "current": "          console.log('❌ No prompts in company table');",
        "after": "        }\n      } catch (companyError) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 1704,
      "content": "console.log(`🔍 [DEBUG] detectConfirmationWithAI using model: ${geminiConfig?.model} for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // Get active Gemini configuration for the company\n      const geminiConfig = await this.getCurrentActiveModel(companyId);",
        "current": "      console.log(`🔍 [DEBUG] detectConfirmationWithAI using model: ${geminiConfig?.model} for company: ${companyId}`);",
        "after": "      if (!geminiConfig) {\n        console.error(`❌ No active Gemini key found for confirmation detection for company: ${companyId}`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2475,
      "content": "where: { id: productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const product = await prisma.product.findUnique({",
        "current": "        where: { id: productId },",
        "after": "        include: {\n          variants: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2677,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "    try {\n      // إعادة تحميل البيانات من قاعدة البيانات للتأكد من الحصول على أحدث المعلومات",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\`\n        WHERE \\`keyId\\` = ${keyId}"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2730,
      "content": "const modelRecord = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      console.log(`⚠️ تحديد النموذج ${modelName} كمستنفد بناءً على خطأ 429...`);\n",
        "current": "      const modelRecord = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`model\\` = ${modelName}\n      `;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2748,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "        };\n",
        "current": "        await prisma.$executeRaw`",
        "after": "          UPDATE \\`gemini_key_models\\`\n          SET \\`usage\\` = ${JSON.stringify(exhaustedUsage)}"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2779,
      "content": "const modelRecord = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      console.log(`⚠️ تحديد النموذج ${modelId} كمستنفد...`);\n",
        "current": "      const modelRecord = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2795,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "        };\n",
        "current": "        await prisma.$executeRaw`",
        "after": "          UPDATE \\`gemini_key_models\\`\n          SET \\`usage\\` = ${JSON.stringify(exhaustedUsage)}"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2811,
      "content": "const modelRecord = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async updateModelUsage(modelId) {\n    try {",
        "current": "      const modelRecord = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2824,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "        };\n",
        "current": "        await prisma.$executeRaw`",
        "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2931,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2968,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 2975,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "            \n            // تحديث آخر استخدام",
        "current": "            await prisma.$executeRaw`",
        "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3020,
      "content": "where: { companyId: targetCompanyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على مفاتيح الشركة المحددة مرتبة حسب الأولوية\n      const allKeys = await prisma.geminiKey.findMany({",
        "current": "        where: { companyId: targetCompanyId },",
        "after": "        orderBy: { priority: 'asc' }\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3055,
      "content": "const availableModels = await prisma.$queryRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "  async findBestModelInKey(keyId) {\n    try {",
        "current": "      const availableModels = await prisma.$queryRaw`",
        "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3069,
      "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
        "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
        "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3092,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3098,
      "content": "await prisma.$executeRaw`",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "      \n      // تفعيل المفتاح المطلوب",
        "current": "      await prisma.$executeRaw`",
        "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3132,
      "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      }\n",
        "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
        "after": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);\n      if (!company) {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3133,
      "content": "console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      const company = await prisma.company.findUnique({ where: { id: companyId } });",
        "current": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);",
        "after": "      if (!company) {\n        console.log('❌ [aiAgentService] No company found');"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3135,
      "content": "console.log('❌ [aiAgentService] No company found');",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);\n      if (!company) {",
        "current": "        console.log('❌ [aiAgentService] No company found');",
        "after": "        return {\n          isEnabled: false,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3147,
      "content": "console.log(`🏢 [aiAgentService] Company: ${company.id}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🏢 [aiAgentService] Company: ${company.id}`);",
        "after": "\n      // Get AI settings for the company"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3151,
      "content": "where: { companyId: company.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Get AI settings for the company\n      const aiSettings = await prisma.aiSettings.findFirst({",
        "current": "        where: { companyId: company.id }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3335,
      "content": "where: { id: learningData.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        // تحديث التغذية الراجعة\n        await this.learningService.prisma.learningData.update({",
        "current": "          where: { id: learningData.id },",
        "after": "          data: {\n            feedback: JSON.stringify(feedback),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3360,
      "content": "console.log(`📊 [AIAgent] Monitoring improvement performance for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async monitorImprovementPerformance(companyId) {\n    try {",
        "current": "      console.log(`📊 [AIAgent] Monitoring improvement performance for company: ${companyId}`);",
        "after": "\n      // الحصول على التحسينات النشطة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3944,
      "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      }\n",
        "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
        "after": "      if (!company) {\n        throw new Error(`Company ${companyId} not found`);"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3951,
      "content": "where: { companyId: company.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if AI settings exist\n      let aiSettings = await prisma.aiSettings.findUnique({",
        "current": "        where: { companyId: company.id }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 3957,
      "content": "where: { companyId: company.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        // Update existing settings\n        aiSettings = await prisma.aiSettings.update({",
        "current": "          where: { companyId: company.id },",
        "after": "          data: {\n            autoReplyEnabled: settings.isEnabled !== undefined ? settings.isEnabled : aiSettings.autoReplyEnabled,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 4003,
      "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      }\n",
        "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
        "after": "      if (!company) {\n        console.log(`❌ [aiAgentService] Company ${companyId} not found`);"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 4005,
      "content": "console.log(`❌ [aiAgentService] Company ${companyId} not found`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      const company = await prisma.company.findUnique({ where: { id: companyId } });\n      if (!company) {",
        "current": "        console.log(`❌ [aiAgentService] Company ${companyId} not found`);",
        "after": "        return this.getDefaultSettings();\n      }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 4009,
      "content": "console.log('🏢 [aiAgentService] Company:', company.id);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log('🏢 [aiAgentService] Company:', company.id);",
        "after": "\n      const aiSettings = await prisma.aiSettings.findUnique({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiAgentService.js",
      "line": 4012,
      "content": "where: { companyId: company.id }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
        "current": "        where: { companyId: company.id }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 41,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n        const aiSettings = await prisma.aiSettings.findUnique({",
        "current": "          where: { companyId },",
        "after": "          select: { qualityEvaluationEnabled: true }\n        });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 49,
      "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation from DB for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        if (aiSettings !== null) {\n          const isEnabled = aiSettings.qualityEvaluationEnabled !== false;",
        "current": "          console.log(`🔧 [AI-EVALUATOR] Quality evaluation from DB for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
        "after": "          return isEnabled;\n        }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 65,
      "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation from file for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "          const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n          const isEnabled = settings.qualityEvaluationEnabled !== false;",
        "current": "          console.log(`🔧 [AI-EVALUATOR] Quality evaluation from file for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
        "after": "          return isEnabled;\n        }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 73,
      "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation check for company ${companyId}: ENABLED (default)`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      // افتراضياً: مفعل",
        "current": "      console.log(`🔧 [AI-EVALUATOR] Quality evaluation check for company ${companyId}: ENABLED (default)`);",
        "after": "      return true;\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 106,
      "content": "console.log(`⏭️ [AI-EVALUATOR] Quality evaluation disabled for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        const isEvaluationEnabled = await this.isQualityEvaluationEnabled(companyId);\n        if (!isEvaluationEnabled) {",
        "current": "          console.log(`⏭️ [AI-EVALUATOR] Quality evaluation disabled for company: ${companyId}`);",
        "after": "          return {\n            messageId,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\aiQualityEvaluator.js",
      "line": 1973,
      "content": "console.log(`📸 [IMAGE-EVALUATION] Evaluating ${images.length} images for message: \"${userMessage.substring(0, 50)}...\"`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  evaluateImages(userMessage, botResponse, images = []) {\n    try {",
        "current": "      console.log(`📸 [IMAGE-EVALUATION] Evaluating ${images.length} images for message: \"${userMessage.substring(0, 50)}...\"`);",
        "after": "\n      // إذا لم يكن هناك صور"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\analyticsService.js",
      "line": 676,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const products = await this.prisma.product.findMany({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          orders: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 39,
      "content": "where: { email: data.email },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Check if user already exists\n      const existingUser = await this.prisma.user.findUnique({",
        "current": "        where: { email: data.email },",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 136,
      "content": "where: { email: credentials.email },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Find user with company\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { email: credentials.email },",
        "after": "        include: {\n          company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 169,
      "content": "where: { id: user.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update last login\n      await this.prisma.user.update({",
        "current": "        where: { id: user.id },",
        "after": "        data: { lastLoginAt: new Date() },\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 208,
      "content": "where: { id: decoded.userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Find user\n      const user = await this.prisma.user.findUnique({",
        "current": "        where: { id: decoded.userId },",
        "after": "        select: {\n          id: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 239,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async getCurrentUser(userId: string): Promise<User> {\n    const user = await this.prisma.user.findUnique({",
        "current": "      where: { id: userId },",
        "after": "      select: {\n        id: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 275,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Get user with password\n    const user = await this.prisma.user.findUnique({",
        "current": "      where: { id: userId },",
        "after": "      select: { id: true, password: true },\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 294,
      "content": "where: { id: userId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update password\n    await this.prisma.user.update({",
        "current": "      where: { id: userId },",
        "after": "      data: {\n        password: hashedNewPassword,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 309,
      "content": "where: { email },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "  async forgotPassword(email: string): Promise<void> {\n    const user = await this.prisma.user.findUnique({",
        "current": "      where: { email },",
        "after": "      select: { id: true, email: true, firstName: true, lastName: true },\n    });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 324,
      "content": "where: { id: user.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Save reset token (you might want to create a separate table for this)\n    await this.prisma.user.update({",
        "current": "      where: { id: user.id },",
        "after": "      data: {\n        // You'll need to add these fields to your schema"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\authService.ts",
      "line": 359,
      "content": "where: { id: user.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    // Update password and clear reset token\n    await this.prisma.user.update({",
        "current": "      where: { id: user.id },",
        "after": "      data: {\n        password: hashedPassword,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\autoPatternDetectionService.js",
      "line": 103,
      "content": "console.log(`📊 [AutoPatternService] Processing company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    for (const companyId of this.companies) {\n      try {",
        "current": "        console.log(`📊 [AutoPatternService] Processing company: ${companyId}`);",
        "after": "        \n        const result = await this.detectPatternsForCompany(companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\autoPatternDetectionService.js",
      "line": 110,
      "content": "console.log(`🎉 [AutoPatternService] Found ${result.newPatterns} new patterns for ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        if (result.success && result.newPatterns > 0) {\n          totalNewPatterns += result.newPatterns;",
        "current": "          console.log(`🎉 [AutoPatternService] Found ${result.newPatterns} new patterns for ${companyId}`);",
        "after": "        }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\autoPatternDetectionService.js",
      "line": 149,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // فحص آخر مرة تم اكتشاف أنماط فيها\n      const lastPattern = await this.prisma.successPattern.findFirst({",
        "current": "        where: { companyId },",
        "after": "        orderBy: { createdAt: 'desc' }\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\autoPatternDetectionService.js",
      "line": 287,
      "content": "console.log(`✅ [AutoPatternService] Added company ${companyId} to monitoring`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    if (!this.companies.includes(companyId)) {\n      this.companies.push(companyId);",
        "current": "      console.log(`✅ [AutoPatternService] Added company ${companyId} to monitoring`);",
        "after": "    }\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\autoPatternDetectionService.js",
      "line": 298,
      "content": "console.log(`✅ [AutoPatternService] Removed company ${companyId} from monitoring`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    if (index > -1) {\n      this.companies.splice(index, 1);",
        "current": "      console.log(`✅ [AutoPatternService] Removed company ${companyId} from monitoring`);",
        "after": "    }\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\billingNotificationService.js",
      "line": 434,
      "content": "console.log(`📧 Overdue invoice notification sent to ${invoice.company.email}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      try {\n        // TODO: Implement email sending",
        "current": "        console.log(`📧 Overdue invoice notification sent to ${invoice.company.email}`);",
        "after": "        \n        // Log the notification"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\billingNotificationService.js",
      "line": 490,
      "content": "console.log(`📧 Trial expired notification sent to ${subscription.company.email}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      try {\n        // TODO: Implement email sending",
        "current": "        console.log(`📧 Trial expired notification sent to ${subscription.company.email}`);",
        "after": "        \n        // Log the notification"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\billingNotificationService.js",
      "line": 517,
      "content": "console.log(`📧 Failed payment notification sent to ${payment.company.email}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      try {\n        // TODO: Implement email sending",
        "current": "        console.log(`📧 Failed payment notification sent to ${payment.company.email}`);",
        "after": "        \n        // Log the notification"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\companyService.js",
      "line": 177,
      "content": "console.log('Creating company:', company);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      // In real implementation, save to database",
        "current": "      console.log('Creating company:', company);",
        "after": "      \n      return {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\companyService.js",
      "line": 222,
      "content": "console.log('Updating subscription for company:', companyId, subscription);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      // In real implementation, update database",
        "current": "      console.log('Updating subscription for company:', companyId, subscription);",
        "after": "\n      return {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\companyService.js",
      "line": 286,
      "content": "console.log(`Updating usage for company ${companyId}: ${resource} +${amount}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    try {\n      // In real implementation, update database",
        "current": "      console.log(`Updating usage for company ${companyId}: ${resource} +${amount}`);",
        "after": "      \n      return {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\continuousLearningServiceV2.js",
      "line": 90,
      "content": "console.log(`🔍 [ContinuousLearning] Analyzing patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async analyzeAndDiscoverPatterns(companyId) {\n    try {",
        "current": "      console.log(`🔍 [ContinuousLearning] Analyzing patterns for company: ${companyId}`);",
        "after": "\n      // جلب البيانات الحديثة للتحليل"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\continuousLearningServiceV2.js",
      "line": 330,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      return await this.prisma.company.findMany({",
        "current": "        where: { isActive: true },",
        "after": "        select: { id: true, name: true }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\conversationAnalysisService.js",
      "line": 274,
      "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "        type: 'conversation_learning',\n        source: learning.type,",
        "current": "        companyId: 'cmdt8nrjq003vufuss47dqc45'",
        "after": "      }, {\n        success: true,"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 82,
      "content": "where: { id: data.customerId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (data.customerId) {\n        customer = await this.prisma.customer.findUnique({",
        "current": "          where: { id: data.customerId }",
        "after": "        });\n      }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 89,
      "content": "where: { facebookId: data.customerId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (!customer && data.customerId && data.customerId.match(/^\\d+$/)) {\n        customer = await this.prisma.customer.findUnique({",
        "current": "          where: { facebookId: data.customerId }",
        "after": "        });\n      }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 168,
      "content": "where: { id: conversationId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const conversation = await this.prisma.conversation.findUnique({",
        "current": "        where: { id: conversationId }",
        "after": "      });\n      "
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 388,
      "content": "where: { id: order.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // إعادة جلب الطلب مع العناصر\n      const completeOrder = await this.prisma.order.findUnique({",
        "current": "        where: { id: order.id },",
        "after": "        include: {\n          customer: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 536,
      "content": "where: { id: conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const updatedConversation = await this.prisma.conversation.update({",
        "current": "        where: { id: conversationId },",
        "after": "        data: updateData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 576,
      "content": "where: { id: conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const updatedConversation = await this.prisma.conversation.update({",
        "current": "        where: { id: conversationId },",
        "after": "        data: updateData,\n        include: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 827,
      "content": "where: { ...where, confidence: { not: null } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        // متوسط الثقة\n        this.prisma.order.aggregate({",
        "current": "          where: { ...where, confidence: { not: null } },",
        "after": "          _avg: { confidence: true }\n        }),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 848,
      "content": "where: { ...where, city: { not: null } },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        this.prisma.order.groupBy({\n          by: ['city'],",
        "current": "          where: { ...where, city: { not: null } },",
        "after": "          _count: true,\n          orderBy: { _count: { city: 'desc' } },"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\enhancedOrderService.js",
      "line": 1018,
      "content": "where: { id: orderId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const order = await this.prisma.order.findUnique({",
        "current": "        where: { id: orderId },",
        "after": "        include: {\n          items: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\FacebookMessengerService.ts",
      "line": 27,
      "content": "this.pageAccessToken = process.env.FACEBOOK_PAGE_ACCESS_TOKEN || '';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n  constructor() {",
        "current": "    this.pageAccessToken = process.env.FACEBOOK_PAGE_ACCESS_TOKEN || '';",
        "after": "    this.baseUrl = `https://graph.facebook.com/${this.apiVersion}`;\n    "
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\FacebookMessengerService.ts",
      "line": 436,
      "content": "const appSecret = process.env.FACEBOOK_APP_SECRET || '';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    try {\n      const crypto = require('crypto');",
        "current": "      const appSecret = process.env.FACEBOOK_APP_SECRET || '';",
        "after": "      \n      if (!appSecret) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\FacebookMessengerService.ts",
      "line": 506,
      "content": "hasAppSecret: !!process.env.FACEBOOK_APP_SECRET",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      configured: this.isConfigured(),\n      hasPageToken: !!this.pageAccessToken,",
        "current": "      hasAppSecret: !!process.env.FACEBOOK_APP_SECRET",
        "after": "    };\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\fallbackProductsService.js",
      "line": 264,
      "content": "console.log(`🏢 معرف الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    try {\n      console.log(`🔄 النظام البديل - توليد رد للرسالة: \"${message}\"`);",
        "current": "      console.log(`🏢 معرف الشركة: ${companyId}`);",
        "after": "      \n      const response = await this.buildResponse(message, companyId);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\intelligentChatService.js",
      "line": 30,
      "content": "console.log(`🏢 Company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      console.log('🧠 [IntelligentChat] Processing intelligent response...');\n      console.log(`📝 Message: \"${message}\"`);",
        "current": "      console.log(`🏢 Company: ${companyId}`);",
        "after": "      console.log(`👤 Customer: ${customerId}`);\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\intelligentChatService.js",
      "line": 117,
      "content": "console.log(`🧠 [IntelligentChat] Getting conversation memory for customer ${customerId} in company ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🧠 [IntelligentChat] Getting conversation memory for customer ${customerId} in company ${companyId}`);",
        "after": "\n      // محاولة الحصول على الذاكرة من memoryService"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\inventoryService.js",
      "line": 29,
      "content": "const company = await prisma.company.findFirst();",
      "description": "Prisma findFirst without filters - CRITICAL DATA EXPOSURE",
      "severity": "CRITICAL",
      "category": "DATA_EXPOSURE",
      "impact": "HIGH",
      "cwe": "CWE-200",
      "context": {
        "before": "      if (warehouseCount === 0) {\n        // Get first company for demo data",
        "current": "        const company = await prisma.company.findFirst();",
        "after": "        if (!company) return;\n"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\inventoryService.js",
      "line": 67,
      "content": "const products = await prisma.product.findMany();",
      "description": "Prisma findMany without any filters - CRITICAL DATA EXPOSURE",
      "severity": "CRITICAL",
      "category": "DATA_EXPOSURE",
      "impact": "HIGH",
      "cwe": "CWE-200",
      "context": {
        "before": "  async initializeProductInventory() {\n    try {",
        "current": "      const products = await prisma.product.findMany();",
        "after": "      const warehouses = await prisma.warehouse.findMany();\n"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\inventoryService.js",
      "line": 68,
      "content": "const warehouses = await prisma.warehouse.findMany();",
      "description": "Prisma findMany without any filters - CRITICAL DATA EXPOSURE",
      "severity": "CRITICAL",
      "category": "DATA_EXPOSURE",
      "impact": "HIGH",
      "cwe": "CWE-200",
      "context": {
        "before": "    try {\n      const products = await prisma.product.findMany();",
        "current": "      const warehouses = await prisma.warehouse.findMany();",
        "after": "\n      for (const product of products) {"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\inventoryService.js",
      "line": 209,
      "content": "where: { productId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const inventory = await prisma.inventory.findMany({",
        "current": "        where: { productId },",
        "after": "        include: {\n          product: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\memoryService.js",
      "line": 78,
      "content": "console.log(`🧠 [MEMORY-DEBUG] ConversationId: ${conversationId}, SenderId: ${senderId}, CompanyId: ${companyId}, Limit: ${limit}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    console.log(`🧠 [MEMORY-DEBUG] Looking for memory with key: ${memoryKey}`);",
        "current": "    console.log(`🧠 [MEMORY-DEBUG] ConversationId: ${conversationId}, SenderId: ${senderId}, CompanyId: ${companyId}, Limit: ${limit}`);",
        "after": "\n    try {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\memoryService.js",
      "line": 371,
      "content": "console.log(`🧹 Cleaned up ${totalCleaned} old memory records${companyInfo} (${deletedMemoryCount.count} from DB, ${cleanedShortTermCount} from cache)`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      const totalCleaned = deletedMemoryCount.count + cleanedShortTermCount;\n      const companyInfo = companyId ? ` for company ${companyId}` : ' (all companies)';",
        "current": "      console.log(`🧹 Cleaned up ${totalCleaned} old memory records${companyInfo} (${deletedMemoryCount.count} from DB, ${cleanedShortTermCount} from cache)`);",
        "after": "\n      return {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\memoryService.js",
      "line": 469,
      "content": "console.log(`🗑️ Cleared memory for customer ${senderId} in company ${companyId}: ${deletedMemoryCount.count} records`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      }\n",
        "current": "      console.log(`🗑️ Cleared memory for customer ${senderId} in company ${companyId}: ${deletedMemoryCount.count} records`);",
        "after": "      return deletedMemoryCount.count;\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\multimodalService.js",
      "line": 52,
      "content": "console.log(`🔐 [MULTIMODAL] Filtering products for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      if (companyId) {\n        whereClause.companyId = companyId;",
        "current": "        console.log(`🔐 [MULTIMODAL] Filtering products for company: ${companyId}`);",
        "after": "      }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\multimodalService.js",
      "line": 59,
      "content": "where: { isActive: true }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        include: {\n          variants: {",
        "current": "            where: { isActive: true }",
        "after": "          }\n        }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\multimodalService.js",
      "line": 97,
      "content": "console.log(`🔐 [MULTIMODAL] Filtering products array for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      if (companyId) {\n        whereClause.companyId = companyId;",
        "current": "        console.log(`🔐 [MULTIMODAL] Filtering products array for company: ${companyId}`);",
        "after": "      }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\multimodalService.js",
      "line": 104,
      "content": "where: { isActive: true }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        include: {\n          variants: {",
        "current": "            where: { isActive: true }",
        "after": "          }\n        }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\notificationService.js",
      "line": 61,
      "content": "console.log(`User ${userId} subscribed to notifications`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    this.subscribers.get(userId).add(connection);\n    ",
        "current": "    console.log(`User ${userId} subscribed to notifications`);",
        "after": "    \n    // Send pending notifications"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\notificationService.js",
      "line": 80,
      "content": "console.log(`User ${userId} unsubscribed from notifications`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n    ",
        "current": "    console.log(`User ${userId} unsubscribed from notifications`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\notificationService.js",
      "line": 151,
      "content": "console.log(`Push notification sent to user ${userId}:`, notification.title);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // await this.sendWebPushNotification(userId, notification);\n",
        "current": "      console.log(`Push notification sent to user ${userId}:`, notification.title);",
        "after": "      \n      return { success: true, notification };"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\notificationService.js",
      "line": 347,
      "content": "const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "   */\n  getNotificationUrl(type, data) {",
        "current": "    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';",
        "after": "    \n    switch (type) {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 64,
      "content": "where: { id: order.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // جلب الطلب مع بيانات العميل\n      const orderWithCustomer = await prisma.order.findUnique({",
        "current": "        where: { id: order.id },",
        "after": "        include: {\n          customer: true"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 149,
      "content": "where: { id: customerId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // التحقق من وجود العميل أولاً\n      const customer = await prisma.customer.findUnique({",
        "current": "        where: { id: customerId }",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 154,
      "content": "where: { id: customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (customer) {\n        await prisma.customer.update({",
        "current": "          where: { id: customerId },",
        "after": "          data: {\n            orderCount: { increment: 1 },"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 172,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const orders = await prisma.order.findMany({",
        "current": "        where: { customerId },",
        "after": "        include: {\n          items: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 195,
      "content": "where: { orderNumber },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const order = await prisma.order.findUnique({",
        "current": "        where: { orderNumber },",
        "after": "        include: {\n          items: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 217,
      "content": "where: { orderNumber },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const order = await prisma.order.update({",
        "current": "        where: { orderNumber },",
        "after": "        data: {\n          status,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 241,
      "content": "where: { orderNumber },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const order = await prisma.order.update({",
        "current": "        where: { orderNumber },",
        "after": "        data: {\n          status: 'CONFIRMED',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 269,
      "content": "where: { orderNumber },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const order = await prisma.order.update({",
        "current": "        where: { orderNumber },",
        "after": "        data: {\n          status: 'CANCELLED',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\orderService.js",
      "line": 279,
      "content": "where: { id: order.customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث إحصائيات العميل (تقليل العدد والمبلغ)\n      await prisma.customer.update({",
        "current": "        where: { id: order.customerId },",
        "after": "        data: {\n          orderCount: { decrement: 1 },"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\outcomeTracker.js",
      "line": 98,
      "content": "where: { conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // جلب رسائل المحادثة\n      const messages = await this.prisma.message.findMany({",
        "current": "        where: { conversationId },",
        "after": "        orderBy: { createdAt: 'asc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\outcomeTracker.js",
      "line": 350,
      "content": "where: { id: existing.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        // تحديث الموجود\n        return await this.prisma.responseEffectiveness.update({",
        "current": "          where: { id: existing.id },",
        "after": "          data: {\n            effectivenessScore: effectivenessData.effectivenessScore,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\outcomeTracker.js",
      "line": 395,
      "content": "where: { id: conversationId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const conversation = await this.prisma.conversation.findUnique({",
        "current": "        where: { id: conversationId },",
        "after": "        select: { companyId: true }\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 29,
      "content": "console.log(`📋 [PatternApplication] Using cached patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      if (this.patternCache.has(cacheKey) && (now - lastUpdate) < this.cacheExpiry) {",
        "current": "        console.log(`📋 [PatternApplication] Using cached patterns for company: ${companyId}`);",
        "after": "        return this.patternCache.get(cacheKey);\n      }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 61,
      "content": "console.log(`✅ [PatternApplication] Loaded ${processedPatterns.length} approved patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      this.lastCacheUpdate.set(cacheKey, now);\n",
        "current": "      console.log(`✅ [PatternApplication] Loaded ${processedPatterns.length} approved patterns for company: ${companyId}`);",
        "after": "      return processedPatterns;\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 319,
      "content": "where: { id: patternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (!companyId) {\n        const pattern = await this.prisma.successPattern.findUnique({",
        "current": "          where: { id: patternId },",
        "after": "          select: { companyId: true }\n        });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 358,
      "content": "where: { patternId, companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // البحث عن سجل الأداء الموجود أو إنشاء واحد جديد\n      let performance = await this.prisma.patternPerformance.findFirst({",
        "current": "        where: { patternId, companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 381,
      "content": "where: { id: performance.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث سجل الأداء\n      await this.prisma.patternPerformance.update({",
        "current": "        where: { id: performance.id },",
        "after": "        data: {\n          usageCount: usageStats.totalUsage,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 470,
      "content": "console.log(`🎯 [PatternApplication] Applying patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async applyAllPatterns(text, companyId, conversationId = null) {\n    try {",
        "current": "      console.log(`🎯 [PatternApplication] Applying patterns for company: ${companyId}`);",
        "after": "      \n      // جلب الأنماط المعتمدة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 476,
      "content": "console.log(`⚠️ [PatternApplication] No approved patterns found for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      \n      if (patterns.length === 0) {",
        "current": "        console.log(`⚠️ [PatternApplication] No approved patterns found for company: ${companyId}`);",
        "after": "        return text;\n      }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 628,
      "content": "console.log(`🧹 [PatternApplication] Cleared cache for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      this.patternCache.delete(cacheKey);\n      this.lastCacheUpdate.delete(cacheKey);",
        "current": "      console.log(`🧹 [PatternApplication] Cleared cache for company: ${companyId}`);",
        "after": "    } else {\n      this.patternCache.clear();"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 664,
      "content": "where: { id: patternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // إذا لم توجد نتيجة، استخدم تقدير بناءً على معدل النجاح العام للنمط\n          const pattern = await this.prisma.successPattern.findUnique({",
        "current": "            where: { id: patternId },",
        "after": "            select: { successRate: true }\n          });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternApplicationService.js",
      "line": 690,
      "content": "where: { id: patternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // الحصول على معلومات النمط\n      const pattern = await this.prisma.successPattern.findUnique({",
        "current": "        where: { id: patternId },",
        "after": "        select: {\n          patternType: true,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternCleanupService.js",
      "line": 41,
      "content": "console.log(`🔍 [PatternCleanup] Finding duplicate patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async findDuplicatePatterns(companyId) {\n    try {",
        "current": "      console.log(`🔍 [PatternCleanup] Finding duplicate patterns for company: ${companyId}`);",
        "after": "\n      const patterns = await this.prisma.successPattern.findMany({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternCleanupService.js",
      "line": 44,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const patterns = await this.prisma.successPattern.findMany({",
        "current": "        where: { companyId },",
        "after": "        orderBy: { createdAt: 'desc' }\n      });"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternCleanupService.js",
      "line": 126,
      "content": "where: { id: bestPattern.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث النمط الأفضل\n      const updatedPattern = await this.prisma.successPattern.update({",
        "current": "        where: { id: bestPattern.id },",
        "after": "        data: {\n          successRate: weightedSuccessRate,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternCleanupService.js",
      "line": 174,
      "content": "console.log(`🧹 [PatternCleanup] Starting comprehensive cleanup for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async cleanupDuplicatePatterns(companyId) {\n    try {",
        "current": "      console.log(`🧹 [PatternCleanup] Starting comprehensive cleanup for company: ${companyId}`);",
        "after": "\n      const startTime = Date.now();"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternCleanupService.js",
      "line": 245,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const patterns = await this.prisma.successPattern.findMany({",
        "current": "        where: { companyId },",
        "after": "        select: {\n          id: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 91,
      "content": "console.log(`🔍 [PatternDetector] Detecting patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async detectNewPatterns(companyId, timeRange = 7) {\n    try {",
        "current": "      console.log(`🔍 [PatternDetector] Detecting patterns for company: ${companyId}`);",
        "after": "\n      // التأكد من وجود Prisma client"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 142,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      console.log(`🔍 [PatternDetector] Filtering duplicates from detected patterns...`);\n      const existingPatterns = await this.prisma.successPattern.findMany({",
        "current": "        where: { companyId },",
        "after": "        select: {\n          id: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 195,
      "content": "await this.prisma.$queryRaw`SELECT 1`;",
      "description": "Raw SQL query without company isolation verification",
      "severity": "CRITICAL",
      "category": "SQL_INJECTION",
      "impact": "HIGH",
      "cwe": "CWE-89",
      "context": {
        "before": "\n      // اختبار الاتصال بقاعدة البيانات",
        "current": "      await this.prisma.$queryRaw`SELECT 1`;",
        "after": "      console.log('✅ [PatternDetector] Database connection verified');\n      return true;"
      },
      "mitigation": false,
      "riskScore": 10
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 957,
      "content": "where: { id: existingPatternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const updatedPattern = await this.prisma.successPattern.update({",
        "current": "        where: { id: existingPatternId },",
        "after": "        data: {\n          // تحديث معدل النجاح بالمتوسط المرجح"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 961,
      "content": "where: { id: existingPatternId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // تحديث معدل النجاح بالمتوسط المرجح\n          successRate: (newPattern.strength + (await this.prisma.successPattern.findUnique({",
        "current": "            where: { id: existingPatternId },",
        "after": "            select: { successRate: true }\n          })).successRate) / 2,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 1028,
      "content": "console.log(`⚠️ [PatternDetector] Skipping pattern creation - no companyId provided`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "          // التحقق من وجود الشركة قبل إنشاء النمط\n          if (!companyId) {",
        "current": "            console.log(`⚠️ [PatternDetector] Skipping pattern creation - no companyId provided`);",
        "after": "            continue;\n          }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 1034,
      "content": "where: { id: companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          // التحقق من وجود الشركة في قاعدة البيانات\n          const companyExists = await this.prisma.company.findUnique({",
        "current": "            where: { id: companyId }",
        "after": "          });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\patternDetector.js",
      "line": 1038,
      "content": "console.log(`⚠️ [PatternDetector] Skipping pattern creation - company ${companyId} not found`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n          if (!companyExists) {",
        "current": "            console.log(`⚠️ [PatternDetector] Skipping pattern creation - company ${companyId} not found`);",
        "after": "            continue;\n          }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\planLimitsService.js",
      "line": 51,
      "content": "where: { id: companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const company = await prisma.company.findUnique({",
        "current": "        where: { id: companyId },",
        "after": "        include: {\n          _count: {"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 207,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          category: true,\n          variants: {",
        "current": "            where: { isActive: true },",
        "after": "            orderBy: { sortOrder: 'asc' }\n          }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 259,
      "content": "console.log(`🔥 جلب المنتجات الشائعة للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async getPopularProducts(companyId, limit = 5) {\n    try {",
        "current": "      console.log(`🔥 جلب المنتجات الشائعة للشركة: ${companyId}`);",
        "after": "\n      const products = await this.prisma.product.findMany({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 312,
      "content": "console.log(`🆕 جلب المنتجات الجديدة للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async getNewProducts(companyId, limit = 5) {\n    try {",
        "current": "      console.log(`🆕 جلب المنتجات الجديدة للشركة: ${companyId}`);",
        "after": "\n      const products = await this.prisma.product.findMany({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 404,
      "content": "console.log(`📂 جلب الفئات المتاحة للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async getAvailableCategories(companyId) {\n    try {",
        "current": "      console.log(`📂 جلب الفئات المتاحة للشركة: ${companyId}`);",
        "after": "\n      const categories = await this.prisma.category.findMany({"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 456,
      "content": "console.log(`📊 جلب إحصائيات المنتجات للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async getProductStats(companyId) {\n    try {",
        "current": "      console.log(`📊 جلب إحصائيات المنتجات للشركة: ${companyId}`);",
        "after": "\n      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all(["
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 459,
      "content": "this.prisma.product.count({ where: { companyId } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all([",
        "current": "        this.prisma.product.count({ where: { companyId } }),",
        "after": "        this.prisma.product.count({ where: { companyId, isActive: true } }),\n        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 460,
      "content": "this.prisma.product.count({ where: { companyId, isActive: true } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all([\n        this.prisma.product.count({ where: { companyId } }),",
        "current": "        this.prisma.product.count({ where: { companyId, isActive: true } }),",
        "after": "        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),\n        this.prisma.category.count({ where: { companyId } })"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 461,
      "content": "this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        this.prisma.product.count({ where: { companyId } }),\n        this.prisma.product.count({ where: { companyId, isActive: true } }),",
        "current": "        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
        "after": "        this.prisma.category.count({ where: { companyId } })\n      ]);"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productSearchService.js",
      "line": 462,
      "content": "this.prisma.category.count({ where: { companyId } })",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "        this.prisma.product.count({ where: { companyId, isActive: true } }),\n        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
        "current": "        this.prisma.category.count({ where: { companyId } })",
        "after": "      ]);\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productsPromptBuilder.js",
      "line": 7,
      "content": "this.baseUrl = process.env.BASE_URL || 'http://localhost:3001';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "class ProductsPromptBuilder {\n  constructor() {",
        "current": "    this.baseUrl = process.env.BASE_URL || 'http://localhost:3001';",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productsPromptBuilder.js",
      "line": 15,
      "content": "console.log(`📦 جلب منتجات الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async fetchCompanyProducts(companyId) {\n    try {",
        "current": "      console.log(`📦 جلب منتجات الشركة: ${companyId}`);",
        "after": "      \n      const fetch = (await import('node-fetch')).default;"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\productsPromptBuilder.js",
      "line": 50,
      "content": "where: { companyId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      \n      const products = await prisma.product.findMany({",
        "current": "        where: { companyId },",
        "after": "        include: {\n          category: true,"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\productsPromptBuilder.js",
      "line": 54,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "          category: true,\n          variants: {",
        "current": "            where: { isActive: true },",
        "after": "            orderBy: { sortOrder: 'asc' }\n          }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\promptEnhancementService.js",
      "line": 160,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await prisma.aiSettings.findFirst({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 49,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const activeKey = await prisma.geminiKey.findFirst({",
        "current": "        where: { isActive: true },",
        "after": "        orderBy: { createdAt: 'desc' }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 64,
      "content": "console.log(`🏢 [RAG] Initializing for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    console.log('🧠 Initializing RAG Knowledge Base...');\n    if (companyId) {",
        "current": "      console.log(`🏢 [RAG] Initializing for company: ${companyId}`);",
        "after": "    }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 113,
      "content": "console.log('⚠️ [RAG] لا يمكن تحميل منتجات بدون companyId');",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async loadProductsForCompany(companyId) {\n    if (!companyId) {",
        "current": "      console.log('⚠️ [RAG] لا يمكن تحميل منتجات بدون companyId');",
        "after": "      return;\n    }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 124,
      "content": "console.log(`🔐 [RAG] تحميل منتجات الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    }\n",
        "current": "    console.log(`🔐 [RAG] تحميل منتجات الشركة: ${companyId}`);",
        "after": "    await this.loadProducts(companyId);\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 141,
      "content": "console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        if (companyId) {\n          whereClause.companyId = companyId;",
        "current": "          console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);",
        "after": "        } else {\n          console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 143,
      "content": "console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "          console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);\n        } else {",
        "current": "          console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);",
        "after": "        }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 151,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "            category: true,\n            variants: {",
        "current": "              where: { isActive: true },",
        "after": "              orderBy: { sortOrder: 'asc' }\n            }"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 345,
      "content": "console.log(`🏢 [RAG] تحميل FAQs للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    if (companyId) {",
        "current": "      console.log(`🏢 [RAG] تحميل FAQs للشركة: ${companyId}`);",
        "after": "    }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 379,
      "content": "console.log(`🏢 [RAG] تحميل Policies للشركة: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    if (companyId) {",
        "current": "      console.log(`🏢 [RAG] تحميل Policies للشركة: ${companyId}`);",
        "after": "    }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 399,
      "content": "console.log(`🏢 [RAG] Filtering data for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    console.log(`🔍 RAG retrieving data for query: \"${query}\" with intent: ${intent}`);\n    if (companyId) {",
        "current": "      console.log(`🏢 [RAG] Filtering data for company: ${companyId}`);",
        "after": "    }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 407,
      "content": "console.log(`🔐 [RAG] Loading products for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    // 🔐 تحميل منتجات الشركة المحددة فقط عند الطلب\n    if (companyId && (intent === 'product_inquiry' || intent === 'price_inquiry')) {",
        "current": "      console.log(`🔐 [RAG] Loading products for company: ${companyId}`);",
        "after": "      await this.loadProductsForCompany(companyId);\n    }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 450,
      "content": "console.log(`🚨 [RAG] Blocked product from wrong company: ${item.metadata?.name} (company: ${item.metadata?.companyId})`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "            const isCorrectCompany = item.metadata?.companyId === companyId;\n            if (!isCorrectCompany) {",
        "current": "              console.log(`🚨 [RAG] Blocked product from wrong company: ${item.metadata?.name} (company: ${item.metadata?.companyId})`);",
        "after": "            }\n            return isCorrectCompany;"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 457,
      "content": "console.log(`🔐 [RAG] Filtered ${relevantData.length} → ${filteredData.length} items for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        });\n",
        "current": "        console.log(`🔐 [RAG] Filtered ${relevantData.length} → ${filteredData.length} items for company: ${companyId}`);",
        "after": "        relevantData = filteredData;\n      }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 763,
      "content": "where: { customerId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const orders = await prisma.order.findMany({",
        "current": "        where: { customerId },",
        "after": "        orderBy: { createdAt: 'desc' },\n        take: 3,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 853,
      "content": "console.log(`🔍 [CONTEXT] Found product in user message: \"${match.trim()}\"`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "            if (!productKeywords.includes(match.trim())) {\n              productKeywords.push(match.trim());",
        "current": "              console.log(`🔍 [CONTEXT] Found product in user message: \"${match.trim()}\"`);",
        "after": "            }\n          });"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 891,
      "content": "console.log(`🔐 [RAG] Loading products for specific search - company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    // 🔐 تحميل منتجات الشركة المحددة فقط\n    if (companyId) {",
        "current": "      console.log(`🔐 [RAG] Loading products for specific search - company: ${companyId}`);",
        "after": "      await this.loadProductsForCompany(companyId);\n    }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 915,
      "content": "console.log(`🏢 [RAG] Filtered products for company ${companyId}: ${availableProducts.length} products`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      if (companyId) {",
        "current": "        console.log(`🏢 [RAG] Filtered products for company ${companyId}: ${availableProducts.length} products`);",
        "after": "      }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 956,
      "content": "console.log(`🔐 [RAG] Final isolation check - no products found for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // 🔐 تحقق نهائي من العزل قبل الإرجاع\n      if (companyId) {",
        "current": "        console.log(`🔐 [RAG] Final isolation check - no products found for company: ${companyId}`);",
        "after": "      }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 1016,
      "content": "console.log(`🔄 [CONTEXT-PENALTY] Requesting different product, reducing bonus for recent mention: ${userBonus}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "        if (requestingDifferentProduct && index === 0) {\n          userBonus = Math.max(5, userBonus * 0.3); // تقليل كبير للتفاعل الأخير",
        "current": "          console.log(`🔄 [CONTEXT-PENALTY] Requesting different product, reducing bonus for recent mention: ${userBonus}`);",
        "after": "        }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\ragService.js",
      "line": 1020,
      "content": "console.log(`🧠 [CONTEXT-BONUS] Product mentioned in user message (interaction ${index + 1}): +${userBonus}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n        bonus += userBonus;",
        "current": "        console.log(`🧠 [CONTEXT-BONUS] Product mentioned in user message (interaction ${index + 1}): +${userBonus}`);",
        "after": "      }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\responseOptimizationService.js",
      "line": 596,
      "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
      "description": "Hardcoded company ID - security risk",
      "severity": "HIGH",
      "category": "HARDCODED_SECRETS",
      "impact": "MEDIUM",
      "cwe": "CWE-798",
      "context": {
        "before": "        type: 'template_optimization',\n        category: category,",
        "current": "        companyId: 'cmdt8nrjq003vufuss47dqc45'",
        "after": "      }, {\n        success: true,"
      },
      "mitigation": false,
      "riskScore": 7
    },
    {
      "file": "src\\services\\responseOptimizer.js",
      "line": 488,
      "content": "where: { companyId }",
      "description": "Where clause potentially missing companyId filter",
      "severity": "LOW",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const aiSettings = await prisma.aiSettings.findFirst({",
        "current": "        where: { companyId }",
        "after": "      });\n"
      },
      "mitigation": true,
      "riskScore": 2
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 71,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // جلب جميع الشركات\n      const companies = await this.prisma.company.findMany({",
        "current": "        where: { isActive: true },",
        "after": "        select: { id: true, name: true }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 79,
      "content": "console.log(`🏢 [ScheduledMaintenance] Processing company: ${company.name} (${company.id})`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n      for (const company of companies) {",
        "current": "        console.log(`🏢 [ScheduledMaintenance] Processing company: ${company.name} (${company.id})`);",
        "after": "        \n        // تنظيف الأنماط المكررة"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 147,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const companies = await this.prisma.company.findMany({",
        "current": "        where: { isActive: true },",
        "after": "        select: { id: true, name: true }\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 213,
      "content": "console.log(`🗑️ [ScheduledMaintenance] Deactivated ${unusedPatterns.length} unused patterns for company ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      });\n",
        "current": "      console.log(`🗑️ [ScheduledMaintenance] Deactivated ${unusedPatterns.length} unused patterns for company ${companyId}`);",
        "after": "      return { deletedCount: unusedPatterns.length };\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 271,
      "content": "console.log(`📦 [ScheduledMaintenance] Archived ${oldPatterns.length} old patterns for company ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      });\n",
        "current": "      console.log(`📦 [ScheduledMaintenance] Archived ${oldPatterns.length} old patterns for company ${companyId}`);",
        "after": "      return oldPatterns.length;\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 289,
      "content": "where: { isActive: true },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // تحديث معدلات النجاح بناءً على الاستخدام الحديث\n      const patterns = await this.prisma.successPattern.findMany({",
        "current": "        where: { isActive: true },",
        "after": "        include: {\n          PatternUsage: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\scheduledPatternMaintenanceService.js",
      "line": 311,
      "content": "where: { id: pattern.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n          await this.prisma.successPattern.update({",
        "current": "            where: { id: pattern.id },",
        "after": "            data: { successRate: weightedRate }\n          });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\simpleAlerts.js",
      "line": 342,
      "content": "console.log(`📧 [EMAIL] To: admin@company.com`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      // محاكاة إرسال البريد الإلكتروني\n      console.log(`📧 [EMAIL] Sending alert email...`);",
        "current": "      console.log(`📧 [EMAIL] To: admin@company.com`);",
        "after": "      console.log(`📧 [EMAIL] Subject: ${alert.severity === 'critical' ? '🚨 CRITICAL' : '⚠️ WARNING'} - ${alert.message}`);\n      console.log(`📧 [EMAIL] Body: ${message}`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 104,
      "content": "console.log(`👤 User ${userName} (${userId}) joined`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    });\n",
        "current": "    console.log(`👤 User ${userName} (${userId}) joined`);",
        "after": "\n    // إرسال قائمة المستخدمين المتصلين"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 181,
      "content": "console.log(`✍️ User ${userInfo.userName} started typing in ${conversationId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    });\n",
        "current": "    console.log(`✍️ User ${userInfo.userName} started typing in ${conversationId}`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 207,
      "content": "console.log(`🛑 User ${userInfo.userName} stopped typing in ${conversationId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    });\n",
        "current": "    console.log(`🛑 User ${userInfo.userName} stopped typing in ${conversationId}`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 224,
      "content": "console.log(`👁️ Message ${messageId} marked as read by ${userInfo.userName}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    });\n",
        "current": "    console.log(`👁️ Message ${messageId} marked as read by ${userInfo.userName}`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 235,
      "content": "console.log(`🏠 User ${userInfo.userName} joined conversation ${conversationId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "\n    socket.join(`conversation_${conversationId}`);",
        "current": "    console.log(`🏠 User ${userInfo.userName} joined conversation ${conversationId}`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 250,
      "content": "console.log(`🚪 User ${userInfo.userName} left conversation ${conversationId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    this.handleStopTyping(socket, { conversationId });\n    ",
        "current": "    console.log(`🚪 User ${userInfo.userName} left conversation ${conversationId}`);",
        "after": "  }\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 282,
      "content": "console.log(`👋 User ${userName} (${userId}) disconnected`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      });\n",
        "current": "      console.log(`👋 User ${userName} (${userId}) disconnected`);",
        "after": "    } else {\n      console.log(`🔌 Anonymous user ${socket.id} disconnected`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\socketService.js",
      "line": 284,
      "content": "console.log(`🔌 Anonymous user ${socket.id} disconnected`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      console.log(`👋 User ${userName} (${userId}) disconnected`);\n    } else {",
        "current": "      console.log(`🔌 Anonymous user ${socket.id} disconnected`);",
        "after": "    }\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 68,
      "content": "console.log(`🔄 Renewing subscription ${subscription.id} for ${subscription.company.name}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "  async renewSubscription(subscription) {\n    try {",
        "current": "      console.log(`🔄 Renewing subscription ${subscription.id} for ${subscription.company.name}`);",
        "after": "\n      // Calculate next billing date"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 81,
      "content": "where: { id: subscription.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update subscription\n      await prisma.subscription.update({",
        "current": "        where: { id: subscription.id },",
        "after": "        data: {\n          nextBillingDate,"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 209,
      "content": "console.log(`📧 Renewal confirmation sent to ${subscription.company.email}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    try {\n      // TODO: Implement email sending",
        "current": "      console.log(`📧 Renewal confirmation sent to ${subscription.company.email}`);",
        "after": "      console.log(`   📄 Invoice: ${invoice.invoiceNumber}`);\n      console.log(`   💰 Amount: ${invoice.totalAmount} ${invoice.currency}`);"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 242,
      "content": "where: { id: subscription.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      // Update subscription with failure info\n      await prisma.subscription.update({",
        "current": "        where: { id: subscription.id },",
        "after": "        data: {\n          metadata: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 257,
      "content": "where: { id: subscription.id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "      if (failureCount >= 3) {\n        await prisma.subscription.update({",
        "current": "          where: { id: subscription.id },",
        "after": "          data: {\n            status: 'SUSPENDED',"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 285,
      "content": "console.log(`📧 Renewal failure notification sent to ${subscription.company.email}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "    try {\n      // TODO: Implement email sending",
        "current": "      console.log(`📧 Renewal failure notification sent to ${subscription.company.email}`);",
        "after": "      \n      // Log the notification"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\services\\subscriptionRenewalService.js",
      "line": 311,
      "content": "where: { id: subscriptionId },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const subscription = await prisma.subscription.findUnique({",
        "current": "        where: { id: subscriptionId },",
        "after": "        include: {\n          company: {"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\services\\successAnalyzer.js",
      "line": 31,
      "content": "console.log(`🔍 [SuccessAnalyzer] Analyzing patterns for company: ${companyId}`);",
      "description": "Logging sensitive authentication data",
      "severity": "LOW",
      "category": "INFORMATION_DISCLOSURE",
      "impact": "LOW",
      "cwe": "CWE-532",
      "context": {
        "before": "      } = options;\n",
        "current": "      console.log(`🔍 [SuccessAnalyzer] Analyzing patterns for company: ${companyId}`);",
        "after": "\n      // جلب البيانات من قاعدة البيانات"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 44,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const entity = await this.model.findUnique({",
        "current": "        where: { id },",
        "after": "        ...this.getDefaultIncludes(),\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 141,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      const entity = await this.model.update({",
        "current": "        where: { id },",
        "after": "        data: this.preprocessUpdateData(data),\n        ...this.getDefaultIncludes(),"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 166,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "\n      await this.model.delete({",
        "current": "        where: { id },",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 197,
      "content": "where: { [field]: value },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const entities = await this.model.findMany({",
        "current": "        where: { [field]: value },",
        "after": "        ...this.getDefaultIncludes(),\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 214,
      "content": "where: { [field]: value },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const entity = await this.model.findFirst({",
        "current": "        where: { [field]: value },",
        "after": "        ...this.getDefaultIncludes(),\n      });"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\base\\BaseRepository.ts",
      "line": 260,
      "content": "where: { id },",
      "description": "Where clause potentially missing companyId filter",
      "severity": "MEDIUM",
      "category": "ISOLATION",
      "impact": "MEDIUM",
      "cwe": "CWE-284",
      "context": {
        "before": "    try {\n      const count = await this.model.count({",
        "current": "        where: { id },",
        "after": "      });\n      return count > 0;"
      },
      "mitigation": false,
      "riskScore": 4
    },
    {
      "file": "src\\shared\\errors\\AppError.ts",
      "line": 49,
      "content": "...(process.env.NODE_ENV === 'development' && { stack: this.stack }),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      details: this.details,\n      timestamp: this.timestamp.toISOString(),",
        "current": "      ...(process.env.NODE_ENV === 'development' && { stack: this.stack }),",
        "after": "    };\n  }"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\shared\\utils\\logger.ts",
      "line": 39,
      "content": "level: process.env.LOG_LEVEL || 'info',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "// Create the logger\nexport const logger = winston.createLogger({",
        "current": "  level: process.env.LOG_LEVEL || 'info',",
        "after": "  format: customFormat,\n  defaultMeta: { "
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\shared\\utils\\logger.ts",
      "line": 43,
      "content": "version: process.env.npm_package_version || '1.0.0',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  defaultMeta: { \n    service: 'communication-platform-api',",
        "current": "    version: process.env.npm_package_version || '1.0.0',",
        "after": "    environment: process.env.NODE_ENV || 'development'\n  },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\shared\\utils\\logger.ts",
      "line": 44,
      "content": "environment: process.env.NODE_ENV || 'development'",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    service: 'communication-platform-api',\n    version: process.env.npm_package_version || '1.0.0',",
        "current": "    environment: process.env.NODE_ENV || 'development'",
        "after": "  },\n  transports: ["
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\shared\\utils\\logger.ts",
      "line": 80,
      "content": "if (process.env.NODE_ENV !== 'production') {",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "\n// Console logging for development",
        "current": "if (process.env.NODE_ENV !== 'production') {",
        "after": "  logger.add(new winston.transports.Console({\n    format: consoleFormat,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\logger.js",
      "line": 14,
      "content": "this.logDir = process.env.LOG_DIR || './logs';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "class AdvancedLogger {\n  constructor() {",
        "current": "    this.logDir = process.env.LOG_DIR || './logs';",
        "after": "    this.logLevel = process.env.LOG_LEVEL || 'info';\n    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\logger.js",
      "line": 15,
      "content": "this.logLevel = process.env.LOG_LEVEL || 'info';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  constructor() {\n    this.logDir = process.env.LOG_DIR || './logs';",
        "current": "    this.logLevel = process.env.LOG_LEVEL || 'info';",
        "after": "    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;\n    this.enableConsole = process.env.NODE_ENV !== 'production';"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\logger.js",
      "line": 16,
      "content": "this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    this.logDir = process.env.LOG_DIR || './logs';\n    this.logLevel = process.env.LOG_LEVEL || 'info';",
        "current": "    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
        "after": "    this.enableConsole = process.env.NODE_ENV !== 'production';\n    "
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\logger.js",
      "line": 17,
      "content": "this.enableConsole = process.env.NODE_ENV !== 'production';",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    this.logLevel = process.env.LOG_LEVEL || 'info';\n    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
        "current": "    this.enableConsole = process.env.NODE_ENV !== 'production';",
        "after": "    \n    this.createLogDirectory();"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\performanceOptimizer.js",
      "line": 29,
      "content": "host: process.env.REDIS_HOST || 'localhost',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    try {\n      this.redis = Redis.createClient({",
        "current": "        host: process.env.REDIS_HOST || 'localhost',",
        "after": "        port: process.env.REDIS_PORT || 6379,\n        password: process.env.REDIS_PASSWORD,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\performanceOptimizer.js",
      "line": 30,
      "content": "port: process.env.REDIS_PORT || 6379,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      this.redis = Redis.createClient({\n        host: process.env.REDIS_HOST || 'localhost',",
        "current": "        port: process.env.REDIS_PORT || 6379,",
        "after": "        password: process.env.REDIS_PASSWORD,\n      });"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\performanceOptimizer.js",
      "line": 31,
      "content": "password: process.env.REDIS_PASSWORD,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "        host: process.env.REDIS_HOST || 'localhost',\n        port: process.env.REDIS_PORT || 6379,",
        "current": "        password: process.env.REDIS_PASSWORD,",
        "after": "      });\n"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 269,
      "content": "nodeEnv: process.env.NODE_ENV,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  // Log configuration summary (without sensitive data)\n  const configSummary = {",
        "current": "    nodeEnv: process.env.NODE_ENV,",
        "after": "    port: process.env.PORT,\n    logLevel: process.env.LOG_LEVEL,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 270,
      "content": "port: process.env.PORT,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "  const configSummary = {\n    nodeEnv: process.env.NODE_ENV,",
        "current": "    port: process.env.PORT,",
        "after": "    logLevel: process.env.LOG_LEVEL,\n    corsOrigin: process.env.CORS_ORIGIN,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 271,
      "content": "logLevel: process.env.LOG_LEVEL,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    nodeEnv: process.env.NODE_ENV,\n    port: process.env.PORT,",
        "current": "    logLevel: process.env.LOG_LEVEL,",
        "after": "    corsOrigin: process.env.CORS_ORIGIN,\n    features: {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 272,
      "content": "corsOrigin: process.env.CORS_ORIGIN,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    port: process.env.PORT,\n    logLevel: process.env.LOG_LEVEL,",
        "current": "    corsOrigin: process.env.CORS_ORIGIN,",
        "after": "    features: {\n      ai: process.env.ENABLE_AI_FEATURES === 'true',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 274,
      "content": "ai: process.env.ENABLE_AI_FEATURES === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    corsOrigin: process.env.CORS_ORIGIN,\n    features: {",
        "current": "      ai: process.env.ENABLE_AI_FEATURES === 'true',",
        "after": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',\n      analytics: process.env.ENABLE_ANALYTICS === 'true',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 275,
      "content": "ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    features: {\n      ai: process.env.ENABLE_AI_FEATURES === 'true',",
        "current": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
        "after": "      analytics: process.env.ENABLE_ANALYTICS === 'true',\n      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 276,
      "content": "analytics: process.env.ENABLE_ANALYTICS === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      ai: process.env.ENABLE_AI_FEATURES === 'true',\n      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
        "current": "      analytics: process.env.ENABLE_ANALYTICS === 'true',",
        "after": "      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 277,
      "content": "notifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',\n      analytics: process.env.ENABLE_ANALYTICS === 'true',",
        "current": "      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
        "after": "    },\n    integrations: {"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 280,
      "content": "facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    },\n    integrations: {",
        "current": "      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
        "after": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,\n      stripe: !!process.env.STRIPE_SECRET_KEY,"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 281,
      "content": "gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "    integrations: {\n      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
        "current": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
        "after": "      stripe: !!process.env.STRIPE_SECRET_KEY,\n      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 282,
      "content": "stripe: !!process.env.STRIPE_SECRET_KEY,",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),\n      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
        "current": "      stripe: !!process.env.STRIPE_SECRET_KEY,",
        "after": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),\n      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 283,
      "content": "paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,\n      stripe: !!process.env.STRIPE_SECRET_KEY,",
        "current": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
        "after": "      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),\n      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 284,
      "content": "twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      stripe: !!process.env.STRIPE_SECRET_KEY,\n      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
        "current": "      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
        "after": "      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),\n    },"
      },
      "mitigation": false,
      "riskScore": 1
    },
    {
      "file": "src\\utils\\validateEnv.ts",
      "line": 285,
      "content": "email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),",
      "description": "Environment variable usage - verify no secrets in logs",
      "severity": "LOW",
      "category": "CONFIGURATION",
      "impact": "LOW",
      "cwe": "CWE-209",
      "context": {
        "before": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),\n      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
        "current": "      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),",
        "after": "    },\n  };"
      },
      "mitigation": false,
      "riskScore": 1
    }
  ],
  "fileAnalysis": {
    "src\\config\\database.ts": {
      "totalLines": 188,
      "issues": [
        {
          "file": "src\\config\\database.ts",
          "line": 45,
          "content": "await prisma.$queryRaw`SELECT 1`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "    \n    // Run a simple query to verify the connection",
            "current": "    await prisma.$queryRaw`SELECT 1`;",
            "after": "    \n    logger.info('Database connection established successfully');"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\config\\database.ts",
          "line": 83,
          "content": "await prisma.$queryRaw`SELECT 1`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "    }\n",
            "current": "    await prisma.$queryRaw`SELECT 1`;",
            "after": "    return true;\n  } catch (error) {"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\config\\database.ts",
          "line": 148,
          "content": "const tables = await client.$queryRaw<Array<{ TABLE_NAME: string }>>`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  \n  // Get all table names (MySQL version)",
            "current": "  const tables = await client.$queryRaw<Array<{ TABLE_NAME: string }>>`",
            "after": "    SELECT TABLE_NAME FROM information_schema.tables\n    WHERE table_schema = DATABASE() AND table_type = 'BASE TABLE'"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\config\\database.ts",
          "line": 154,
          "content": "await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 0;`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "\n  // Disable foreign key checks (MySQL)",
            "current": "  await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 0;`;",
            "after": "\n  // Truncate all tables"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\config\\database.ts",
          "line": 159,
          "content": "await client.$executeRawUnsafe(`TRUNCATE TABLE \\`${table.TABLE_NAME}\\`;`);",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  for (const table of tables) {\n    if (table.TABLE_NAME !== '_prisma_migrations') {",
            "current": "      await client.$executeRawUnsafe(`TRUNCATE TABLE \\`${table.TABLE_NAME}\\`;`);",
            "after": "    }\n  }"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\config\\database.ts",
          "line": 164,
          "content": "await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 1;`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "\n  // Re-enable foreign key checks (MySQL)",
            "current": "  await client.$executeRaw`SET FOREIGN_KEY_CHECKS = 1;`;",
            "after": "\n  logger.info('Database cleaned up for testing');"
          },
          "mitigation": false,
          "riskScore": 10
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 0,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\config\\index.ts": {
      "totalLines": 180,
      "issues": [
        {
          "file": "src\\config\\index.ts",
          "line": 15,
          "content": "env: process.env.NODE_ENV || 'development',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "export const config = {\n  // Environment",
            "current": "  env: process.env.NODE_ENV || 'development',",
            "after": "  port: parseInt(process.env.PORT || '3001', 10),\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 16,
          "content": "port: parseInt(process.env.PORT || '3001', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Environment\n  env: process.env.NODE_ENV || 'development',",
            "current": "  port: parseInt(process.env.PORT || '3001', 10),",
            "after": "\n  // Database"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 20,
          "content": "url: process.env.DATABASE_URL || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Database\n  database: {",
            "current": "    url: process.env.DATABASE_URL || '',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 25,
          "content": "url: process.env.REDIS_URL || 'redis://localhost:6379',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Redis\n  redis: {",
            "current": "    url: process.env.REDIS_URL || 'redis://localhost:6379',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 30,
          "content": "secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // JWT Configuration\n  jwt: {",
            "current": "    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
            "after": "    expiresIn: process.env.JWT_EXPIRES_IN || '7d',\n    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 31,
          "content": "expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  jwt: {\n    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',",
            "current": "    expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
            "after": "    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 32,
          "content": "refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    secret: process.env.JWT_SECRET || 'your-super-secret-jwt-key',\n    expiresIn: process.env.JWT_EXPIRES_IN || '7d',",
            "current": "    refreshExpiresIn: process.env.JWT_REFRESH_EXPIRES_IN || '30d',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 37,
          "content": "secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Session Configuration\n  session: {",
            "current": "    secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
            "after": "    maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 38,
          "content": "maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  session: {\n    secret: process.env.SESSION_SECRET || 'your-session-secret-key',",
            "current": "    maxAge: parseInt(process.env.SESSION_MAX_AGE || '86400000', 10), // 24 hours",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 43,
          "content": "origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // CORS Configuration\n  cors: {",
            "current": "    origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 48,
          "content": "appId: process.env.FACEBOOK_APP_ID || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Facebook Configuration\n  facebook: {",
            "current": "    appId: process.env.FACEBOOK_APP_ID || '',",
            "after": "    appSecret: process.env.FACEBOOK_APP_SECRET || '',\n    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 49,
          "content": "appSecret: process.env.FACEBOOK_APP_SECRET || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  facebook: {\n    appId: process.env.FACEBOOK_APP_ID || '',",
            "current": "    appSecret: process.env.FACEBOOK_APP_SECRET || '',",
            "after": "    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 50,
          "content": "verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    appId: process.env.FACEBOOK_APP_ID || '',\n    appSecret: process.env.FACEBOOK_APP_SECRET || '',",
            "current": "    verifyToken: process.env.FACEBOOK_VERIFY_TOKEN || '',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 58,
          "content": "maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    apiKey: '', // لا يُستخدم - يتم الحصول على المفتاح من قاعدة البيانات\n    model: 'gemini-pro',",
            "current": "    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
            "after": "    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),\n    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 59,
          "content": "temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    model: 'gemini-pro',\n    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),",
            "current": "    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
            "after": "    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 60,
          "content": "timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    maxTokens: parseInt(process.env.AI_MAX_TOKENS || '1000', 10),\n    temperature: parseFloat(process.env.AI_TEMPERATURE || '0.7'),",
            "current": "    timeout: parseInt(process.env.AI_RESPONSE_TIMEOUT || '30000', 10),",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 66,
          "content": "host: process.env.SMTP_HOST || 'smtp.gmail.com',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  email: {\n    smtp: {",
            "current": "      host: process.env.SMTP_HOST || 'smtp.gmail.com',",
            "after": "      port: parseInt(process.env.SMTP_PORT || '587', 10),\n      user: process.env.SMTP_USER || '',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 67,
          "content": "port: parseInt(process.env.SMTP_PORT || '587', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    smtp: {\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',",
            "current": "      port: parseInt(process.env.SMTP_PORT || '587', 10),",
            "after": "      user: process.env.SMTP_USER || '',\n      pass: process.env.SMTP_PASS || '',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 68,
          "content": "user: process.env.SMTP_USER || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587', 10),",
            "current": "      user: process.env.SMTP_USER || '',",
            "after": "      pass: process.env.SMTP_PASS || '',\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 69,
          "content": "pass: process.env.SMTP_PASS || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      port: parseInt(process.env.SMTP_PORT || '587', 10),\n      user: process.env.SMTP_USER || '',",
            "current": "      pass: process.env.SMTP_PASS || '',",
            "after": "    },\n    from: {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 72,
          "content": "email: process.env.FROM_EMAIL || 'noreply@example.com',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    },\n    from: {",
            "current": "      email: process.env.FROM_EMAIL || 'noreply@example.com',",
            "after": "      name: process.env.FROM_NAME || 'Communication Platform',\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 73,
          "content": "name: process.env.FROM_NAME || 'Communication Platform',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    from: {\n      email: process.env.FROM_EMAIL || 'noreply@example.com',",
            "current": "      name: process.env.FROM_NAME || 'Communication Platform',",
            "after": "    },\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 80,
          "content": "accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  sms: {\n    twilio: {",
            "current": "      accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
            "after": "      authToken: process.env.TWILIO_AUTH_TOKEN || '',\n      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 81,
          "content": "authToken: process.env.TWILIO_AUTH_TOKEN || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    twilio: {\n      accountSid: process.env.TWILIO_ACCOUNT_SID || '',",
            "current": "      authToken: process.env.TWILIO_AUTH_TOKEN || '',",
            "after": "      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 82,
          "content": "phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      accountSid: process.env.TWILIO_ACCOUNT_SID || '',\n      authToken: process.env.TWILIO_AUTH_TOKEN || '',",
            "current": "      phoneNumber: process.env.TWILIO_PHONE_NUMBER || '',",
            "after": "    },\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 89,
          "content": "secretKey: process.env.STRIPE_SECRET_KEY || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  payment: {\n    stripe: {",
            "current": "      secretKey: process.env.STRIPE_SECRET_KEY || '',",
            "after": "      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',\n      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 90,
          "content": "publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    stripe: {\n      secretKey: process.env.STRIPE_SECRET_KEY || '',",
            "current": "      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
            "after": "      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 91,
          "content": "webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      secretKey: process.env.STRIPE_SECRET_KEY || '',\n      publishableKey: process.env.STRIPE_PUBLISHABLE_KEY || '',",
            "current": "      webhookSecret: process.env.STRIPE_WEBHOOK_SECRET || '',",
            "after": "    },\n    paypal: {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 94,
          "content": "clientId: process.env.PAYPAL_CLIENT_ID || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    },\n    paypal: {",
            "current": "      clientId: process.env.PAYPAL_CLIENT_ID || '',",
            "after": "      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',\n      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 95,
          "content": "clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    paypal: {\n      clientId: process.env.PAYPAL_CLIENT_ID || '',",
            "current": "      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
            "after": "      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 96,
          "content": "mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      clientId: process.env.PAYPAL_CLIENT_ID || '',\n      clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',",
            "current": "      mode: process.env.PAYPAL_MODE || 'sandbox', // sandbox or live",
            "after": "    },\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 102,
          "content": "maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // File Upload Configuration\n  upload: {",
            "current": "    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
            "after": "    uploadPath: process.env.UPLOAD_PATH || './uploads',\n    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 103,
          "content": "uploadPath: process.env.UPLOAD_PATH || './uploads',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  upload: {\n    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB",
            "current": "    uploadPath: process.env.UPLOAD_PATH || './uploads',",
            "after": "    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 104,
          "content": "allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '10485760', 10), // 10MB\n    uploadPath: process.env.UPLOAD_PATH || './uploads',",
            "current": "    allowedTypes: (process.env.ALLOWED_FILE_TYPES || 'image/jpeg,image/png,image/gif,application/pdf').split(','),",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 109,
          "content": "windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Rate Limiting Configuration\n  rateLimit: {",
            "current": "    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
            "after": "    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 110,
          "content": "maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  rateLimit: {\n    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000', 10), // 15 minutes",
            "current": "    maxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '1000', 10), // زيادة من 100 إلى 1000",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 115,
          "content": "level: process.env.LOG_LEVEL || 'info',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Logging Configuration\n  logging: {",
            "current": "    level: process.env.LOG_LEVEL || 'info',",
            "after": "    file: process.env.LOG_FILE || './logs/app.log',\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 116,
          "content": "file: process.env.LOG_FILE || './logs/app.log',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  logging: {\n    level: process.env.LOG_LEVEL || 'info',",
            "current": "    file: process.env.LOG_FILE || './logs/app.log',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 121,
          "content": "sentryDsn: process.env.SENTRY_DSN || '',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Monitoring Configuration\n  monitoring: {",
            "current": "    sentryDsn: process.env.SENTRY_DSN || '',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 126,
          "content": "baseUrl: process.env.WEBHOOK_BASE_URL || 'http://localhost:3001/webhooks',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Webhook Configuration\n  webhooks: {",
            "current": "    baseUrl: process.env.WEBHOOK_BASE_URL || 'http://localhost:3001/webhooks',",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 131,
          "content": "defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Company Settings\n  company: {",
            "current": "    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
            "after": "    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),\n    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 132,
          "content": "maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  company: {\n    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',",
            "current": "    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
            "after": "    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 133,
          "content": "maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    defaultPlan: process.env.DEFAULT_COMPANY_PLAN || 'basic',\n    maxUsersPerCompany: parseInt(process.env.MAX_USERS_PER_COMPANY || '10', 10),",
            "current": "    maxConversationsPerMonth: parseInt(process.env.MAX_CONVERSATIONS_PER_MONTH || '1000', 10),",
            "after": "  },\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 138,
          "content": "enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Feature Flags\n  features: {",
            "current": "    enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
            "after": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',\n    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 139,
          "content": "enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  features: {\n    enableAI: process.env.ENABLE_AI_FEATURES === 'true',",
            "current": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
            "after": "    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',\n    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 140,
          "content": "enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    enableAI: process.env.ENABLE_AI_FEATURES === 'true',\n    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',",
            "current": "    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
            "after": "    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\config\\index.ts",
          "line": 141,
          "content": "enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    enableEcommerce: process.env.ENABLE_ECOMMERCE === 'true',\n    enableAnalytics: process.env.ENABLE_ANALYTICS === 'true',",
            "current": "    enableNotifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
            "after": "  },\n} as const;"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 0
      }
    },
    "src\\config\\redis.ts": {
      "totalLines": 314,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\config\\socket.ts": {
      "totalLines": 357,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 3,
        "companyFilters": 15
      }
    },
    "src\\controllers\\advancedAiController.js": {
      "totalLines": 185,
      "issues": [
        {
          "file": "src\\controllers\\advancedAiController.js",
          "line": 33,
          "content": "console.log(`🤖 طلب رد متقدم من الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🤖 طلب رد متقدم من الشركة: ${companyId}`);",
            "after": "      console.log(`💬 الرسالة: \"${message}\"`);\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\advancedAiController.js",
          "line": 84,
          "content": "console.log(`🧪 اختبار الأدوات للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🧪 اختبار الأدوات للشركة: ${companyId}`);",
            "after": "\n      const result = await this.geminiService.testTools(companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\controllers\\authController.ts": {
      "totalLines": 345,
      "issues": [
        {
          "file": "src\\controllers\\authController.ts",
          "line": 109,
          "content": "secure: process.env.NODE_ENV === 'production',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
            "current": "    secure: process.env.NODE_ENV === 'production',",
            "after": "    sameSite: 'strict',\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\authController.ts",
          "line": 154,
          "content": "secure: process.env.NODE_ENV === 'production',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
            "current": "    secure: process.env.NODE_ENV === 'production',",
            "after": "    sameSite: 'strict',\n    maxAge: cookieMaxAge,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\authController.ts",
          "line": 219,
          "content": "secure: process.env.NODE_ENV === 'production',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  res.cookie('refreshToken', result.refreshToken, {\n    httpOnly: true,",
            "current": "    secure: process.env.NODE_ENV === 'production',",
            "after": "    sameSite: 'strict',\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 11,
        "companyFilters": 0
      }
    },
    "src\\controllers\\continuousLearningController_old.js": {
      "totalLines": 692,
      "issues": [
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 22,
          "content": "const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "  async getDashboard(req, res) {\n    try {",
            "current": "      const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };",
            "after": "\n      console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 24,
          "content": "console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      const { companyId } = req.user || { companyId: 'cmdkj6coz0000uf0cyscco6lr' };\n",
            "current": "      console.log('🔍 [Dashboard] Getting dashboard data for company:', companyId);",
            "after": "\n      // الحصول على البيانات الأساسية من قاعدة البيانات مباشرة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 28,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على البيانات الأساسية من قاعدة البيانات مباشرة\n      const totalInteractions = await prisma.learningData.count({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 32,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const discoveredPatterns = await prisma.discoveredPattern.count({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 36,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const appliedImprovements = await prisma.appliedImprovement.count({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 53,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على النشاط الحديث\n      const recentActivity = await prisma.learningData.findMany({",
            "current": "        where: { companyId },",
            "after": "        orderBy: { createdAt: 'desc' },\n        take: 5,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 373,
          "content": "where: { companyId: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (settings.learning) {\n        await prisma.learningSettings.upsert({",
            "current": "          where: { companyId: companyId },",
            "after": "          update: {\n            enabled: settings.learning.enabled,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 446,
          "content": "where: { id: id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث حالة التحسين\n      await prisma.appliedImprovement.update({",
            "current": "        where: { id: id },",
            "after": "        data: {\n          status: 'active',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\controllers\\continuousLearningController_old.js",
          "line": 494,
          "content": "where: { id: id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث حالة التحسين\n      await prisma.appliedImprovement.update({",
            "current": "        where: { id: id },",
            "after": "        data: {\n          status: 'disabled',"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 55,
      "patterns": {
        "prismaQueries": 14,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 30
      }
    },
    "src\\controllers\\hybridAiController.js": {
      "totalLines": 349,
      "issues": [
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 38,
          "content": "console.log(`🔀 طلب رد هجين من الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      const aiSettings = await this.getAiSettings(companyId);\n",
            "current": "      console.log(`🔀 طلب رد هجين من الشركة: ${companyId}`);",
            "after": "      console.log(`💬 الرسالة: \"${message}\"`);\n      console.log(`⚙️ النظام المتقدم مفعل: ${aiSettings?.useAdvancedTools ? 'نعم' : 'لا'}`);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 91,
          "content": "console.log(`🚀 تفعيل النظام المتقدم للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🚀 تفعيل النظام المتقدم للشركة: ${companyId}`);",
            "after": "\n      const result = await this.hybridService.enableAdvancedSystem(companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 124,
          "content": "console.log(`📱 إلغاء تفعيل النظام المتقدم للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`📱 إلغاء تفعيل النظام المتقدم للشركة: ${companyId}`);",
            "after": "\n      const result = await this.hybridService.disableAdvancedSystem(companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 162,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 240,
          "content": "console.log(`🧪 اختبار النظام الهجين للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🧪 اختبار النظام الهجين للشركة: ${companyId}`);",
            "after": "\n      // اختبار النظام التقليدي"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\controllers\\hybridAiController.js",
          "line": 301,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const systemConfig = await this.prisma.systemConfig.findUnique({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 2,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 28
      }
    },
    "src\\controllers\\intelligentChatController.js": {
      "totalLines": 254,
      "issues": [
        {
          "file": "src\\controllers\\intelligentChatController.js",
          "line": 40,
          "content": "console.log(`🏢 الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      console.log('🚀 طلب رد ذكي جديد...');\n      console.log(`💬 الرسالة: \"${message}\"`);",
            "current": "      console.log(`🏢 الشركة: ${companyId}`);",
            "after": "      console.log(`👤 العميل: ${customerId || 'غير محدد'}`);\n"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\controllers\\performanceController.js": {
      "totalLines": 295,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\ai\\controllers\\AIController.ts": {
      "totalLines": 1027,
      "issues": [
        {
          "file": "src\\domains\\ai\\controllers\\AIController.ts",
          "line": 161,
          "content": "where: { companyId: user.companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get AI settings from database\n    const settings = await this.prisma.aiSettings.findUnique({",
            "current": "      where: { companyId: user.companyId },",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\controllers\\AIController.ts",
          "line": 291,
          "content": "where: { id: customerId, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get customer info\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: customerId, companyId },",
            "after": "        include: {\n          orders: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\controllers\\AIController.ts",
          "line": 313,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get company info\n      const company = await this.prisma.company.findUnique({",
            "current": "        where: { id: companyId },",
            "after": "        include: {\n          products: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\controllers\\AIController.ts",
          "line": 325,
          "content": "where: { conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (conversationId) {\n        const messages = await this.prisma.message.findMany({",
            "current": "          where: { conversationId },",
            "after": "          orderBy: { createdAt: 'desc' },\n          take: 10,"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 76
      }
    },
    "src\\domains\\ai\\routes\\aiRoutes.ts": {
      "totalLines": 87,
      "issues": [
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 19,
          "content": "router.post('/generate-response', aiController.generateResponse);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// AI response generation",
            "current": "router.post('/generate-response', aiController.generateResponse);",
            "after": "\n// Analysis endpoints"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 22,
          "content": "router.post('/analyze-sentiment', aiController.analyzeSentiment);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Analysis endpoints",
            "current": "router.post('/analyze-sentiment', aiController.analyzeSentiment);",
            "after": "router.post('/recommend-products', aiController.recommendProducts);\nrouter.get('/insights/:conversationId', aiController.getConversationInsights);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 23,
          "content": "router.post('/recommend-products', aiController.recommendProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Analysis endpoints\nrouter.post('/analyze-sentiment', aiController.analyzeSentiment);",
            "current": "router.post('/recommend-products', aiController.recommendProducts);",
            "after": "router.get('/insights/:conversationId', aiController.getConversationInsights);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 24,
          "content": "router.get('/insights/:conversationId', aiController.getConversationInsights);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/analyze-sentiment', aiController.analyzeSentiment);\nrouter.post('/recommend-products', aiController.recommendProducts);",
            "current": "router.get('/insights/:conversationId', aiController.getConversationInsights);",
            "after": "\n// Analytics (managers and admins only)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 27,
          "content": "router.get('/analytics', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAnalytics);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Analytics (managers and admins only)",
            "current": "router.get('/analytics', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAnalytics);",
            "after": "\n// Settings management (managers and admins only)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 30,
          "content": "router.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Settings management (managers and admins only)",
            "current": "router.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
            "after": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 31,
          "content": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Settings management (managers and admins only)\nrouter.get('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getSettings);",
            "current": "router.put('/settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateSettings);",
            "after": "\n// Testing (managers and admins only)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 34,
          "content": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.testResponse);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Testing (managers and admins only)",
            "current": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.testResponse);",
            "after": "\n// ==================== ADVANCED AI ROUTES ===================="
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 39,
          "content": "router.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Model management",
            "current": "router.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
            "after": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 40,
          "content": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Model management\nrouter.get('/models', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAvailableModels);",
            "current": "router.get('/usage-stats', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getUsageStats);",
            "after": "\n// Advanced response generation"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 43,
          "content": "router.post('/generate-advanced-response', aiController.generateAdvancedResponse);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Advanced response generation",
            "current": "router.post('/generate-advanced-response', aiController.generateAdvancedResponse);",
            "after": "\n// ==================== PROMPT MANAGEMENT ROUTES ===================="
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 48,
          "content": "router.get('/prompt-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getPromptTemplates);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Prompt templates",
            "current": "router.get('/prompt-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getPromptTemplates);",
            "after": "\n// Company prompts"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 51,
          "content": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Company prompts",
            "current": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
            "after": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);\nrouter.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 52,
          "content": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Company prompts\nrouter.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);",
            "current": "router.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
            "after": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 53,
          "content": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getCompanyPrompts);\nrouter.put('/prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateCompanyPrompts);",
            "current": "router.post('/prompts/apply-template', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyTemplate);",
            "after": "\n// ==================== NEW PROMPT MANAGEMENT ROUTES ===================="
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 58,
          "content": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Static prompts management",
            "current": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
            "after": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);\nrouter.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 59,
          "content": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Static prompts management\nrouter.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);",
            "current": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
            "after": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);\nrouter.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 60,
          "content": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getStaticPrompts);\nrouter.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);",
            "current": "router.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
            "after": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 61,
          "content": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/static-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.createStaticPrompt);\nrouter.put('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateStaticPrompt);",
            "current": "router.delete('/static-prompts/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.deleteStaticPrompt);",
            "after": "\n// Business templates management"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 64,
          "content": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Business templates management",
            "current": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
            "after": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);\nrouter.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 65,
          "content": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Business templates management\nrouter.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);",
            "current": "router.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
            "after": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 66,
          "content": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/business-templates', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTemplates);\nrouter.get('/business-types', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getBusinessTypes);",
            "current": "router.post('/business-templates/apply/:templateId', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.applyBusinessTemplate);",
            "after": "\n// Advanced services management"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 69,
          "content": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Advanced services management",
            "current": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
            "after": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);\nrouter.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 70,
          "content": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Advanced services management\nrouter.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);",
            "current": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
            "after": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);\nrouter.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 71,
          "content": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/advanced-services/company-prompts', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedCompanyPrompts);\nrouter.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);",
            "current": "router.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
            "after": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 72,
          "content": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/advanced-services/active-services', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getActiveServices);\nrouter.get('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getAdvancedConfiguration);",
            "current": "router.put('/advanced-services/configuration', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateAdvancedConfiguration);",
            "after": "\n// ==================== PRODUCT AI ROUTES ===================="
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 77,
          "content": "router.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Product AI settings",
            "current": "router.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
            "after": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 78,
          "content": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Product AI settings\nrouter.get('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.getProductAiSettings);",
            "current": "router.put('/product-settings', requireRole(['COMPANY_ADMIN', 'MANAGER']), aiController.updateProductAiSettings);",
            "after": "\n// Product recommendations and analysis"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 81,
          "content": "router.post('/recommend-products-advanced', aiController.recommendProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Product recommendations and analysis",
            "current": "router.post('/recommend-products-advanced', aiController.recommendProducts);",
            "after": "router.post('/analyze-image', aiController.analyzeCustomerImage);\nrouter.post('/create-order', aiController.createOrderFromConversation);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 82,
          "content": "router.post('/analyze-image', aiController.analyzeCustomerImage);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Product recommendations and analysis\nrouter.post('/recommend-products-advanced', aiController.recommendProducts);",
            "current": "router.post('/analyze-image', aiController.analyzeCustomerImage);",
            "after": "router.post('/create-order', aiController.createOrderFromConversation);\nrouter.get('/product-image/:productId', aiController.getProductImage);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 83,
          "content": "router.post('/create-order', aiController.createOrderFromConversation);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/recommend-products-advanced', aiController.recommendProducts);\nrouter.post('/analyze-image', aiController.analyzeCustomerImage);",
            "current": "router.post('/create-order', aiController.createOrderFromConversation);",
            "after": "router.get('/product-image/:productId', aiController.getProductImage);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\ai\\routes\\aiRoutes.ts",
          "line": 84,
          "content": "router.get('/product-image/:productId', aiController.getProductImage);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/analyze-image', aiController.analyzeCustomerImage);\nrouter.post('/create-order', aiController.createOrderFromConversation);",
            "current": "router.get('/product-image/:productId', aiController.getProductImage);",
            "after": "\nexport { router as aiRoutes };"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 32,
        "authChecks": 3,
        "companyFilters": 0
      }
    },
    "src\\domains\\ai\\services\\GeminiService.ts": {
      "totalLines": 625,
      "issues": [
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 71,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const activeKey = await this.prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { createdAt: 'desc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 306,
          "content": "where: { id: customerId, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get customer history\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: customerId, companyId },",
            "after": "        include: {\n          orders: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 326,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get company products\n      const products = await this.prisma.product.findMany({",
            "current": "        where: { companyId },",
            "after": "        take: 20,\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 387,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const company = await this.prisma.company.findUnique({",
            "current": "        where: { id: companyId },",
            "after": "        include: {\n          aiSettings: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 544,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const aiSettings = await this.prisma.aiSettings.upsert({",
            "current": "        where: { companyId },",
            "after": "        update: settings,\n        create: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\ai\\services\\GeminiService.ts",
          "line": 600,
          "content": "where: { ...where, requiresHumanIntervention: true }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.aiInteraction.count({",
            "current": "          where: { ...where, requiresHumanIntervention: true }",
            "after": "        })\n      ]);"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 11,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 17
      }
    },
    "src\\domains\\auth\\controllers\\AuthController.ts": {
      "totalLines": 287,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 14,
        "companyFilters": 2
      }
    },
    "src\\domains\\auth\\middleware\\authMiddleware.ts": {
      "totalLines": 205,
      "issues": [
        {
          "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
          "line": 31,
          "content": "const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n    // Verify token",
            "current": "    const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
            "after": "    const decoded = jwt.verify(token, jwtSecret) as any;\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
          "line": 37,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    const prisma = getPrismaClient();\n    const user = await prisma.user.findUnique({",
            "current": "      where: { id: decoded.userId },",
            "after": "      include: {\n        company: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
          "line": 167,
          "content": "const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n    const token = authHeader.substring(7);",
            "current": "    const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
            "after": "    \n    try {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\middleware\\authMiddleware.ts",
          "line": 174,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      const prisma = getPrismaClient();\n      const user = await prisma.user.findUnique({",
            "current": "        where: { id: decoded.userId },",
            "after": "        include: {\n          company: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 2,
        "apiRoutes": 0,
        "authChecks": 18,
        "companyFilters": 5
      }
    },
    "src\\domains\\auth\\middleware\\rateLimitMiddleware.ts": {
      "totalLines": 145,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\auth\\routes\\authRoutes.ts": {
      "totalLines": 33,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 11,
        "authChecks": 15,
        "companyFilters": 0
      }
    },
    "src\\domains\\auth\\services\\AuthService.ts": {
      "totalLines": 480,
      "issues": [
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 66,
          "content": "this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  constructor() {\n    this.prisma = getPrismaClient();",
            "current": "    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
            "after": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\n    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 67,
          "content": "this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    this.prisma = getPrismaClient();\n    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';",
            "current": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
            "after": "    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';\n    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 68,
          "content": "this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    this.jwtSecret = process.env.JWT_SECRET || 'your-secret-key';\n    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';",
            "current": "    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
            "after": "    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 69,
          "content": "this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    this.jwtRefreshSecret = process.env.JWT_REFRESH_SECRET || 'your-refresh-secret-key';\n    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || '15m';",
            "current": "    this.jwtRefreshExpiresIn = process.env.JWT_REFRESH_EXPIRES_IN || '7d';",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 79,
          "content": "where: { email: data.email }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if user already exists\n      const existingUser = await this.prisma.user.findUnique({",
            "current": "        where: { email: data.email }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 160,
          "content": "where: { email },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Find user with company\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { email },",
            "after": "        include: {\n          company: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 188,
          "content": "where: { id: user.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update last login\n      await this.prisma.user.update({",
            "current": "        where: { id: user.id },",
            "after": "        data: { lastLoginAt: new Date() }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 233,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Find user\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { id: decoded.userId },",
            "after": "        include: { company: true }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 234,
          "content": "include: { company: true }",
          "description": "Prisma include without isolation verification",
          "severity": "LOW",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "      const user = await this.prisma.user.findUnique({\n        where: { id: decoded.userId },",
            "current": "        include: { company: true }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 271,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { id: userId },",
            "after": "        include: {\n          company: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 294,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const user = await this.prisma.user.update({",
            "current": "        where: { id: userId },",
            "after": "        data: updateData,\n        select: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 327,
          "content": "where: { id: userId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get current user\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { id: userId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 345,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update password\n      await this.prisma.user.update({",
            "current": "        where: { id: userId },",
            "after": "        data: { password: hashedNewPassword }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\auth\\services\\AuthService.ts",
          "line": 362,
          "content": "where: { email }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { email }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 9,
        "apiRoutes": 0,
        "authChecks": 8,
        "companyFilters": 7
      }
    },
    "src\\domains\\broadcast\\controllers\\BroadcastController.ts": {
      "totalLines": 224,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 15
      }
    },
    "src\\domains\\broadcast\\index.ts": {
      "totalLines": 4,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\broadcast\\routes\\broadcastRoutes.ts": {
      "totalLines": 29,
      "issues": [
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 8,
          "content": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Campaign routes",
            "current": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
            "after": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));\nrouter.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 9,
          "content": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Campaign routes\nrouter.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));",
            "current": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
            "after": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));\nrouter.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 10,
          "content": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/campaigns', broadcastController.createCampaign.bind(broadcastController));\nrouter.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));",
            "current": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
            "after": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));\nrouter.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 11,
          "content": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/campaigns', broadcastController.getCampaigns.bind(broadcastController));\nrouter.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));",
            "current": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
            "after": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 12,
          "content": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/campaigns/:id', broadcastController.getCampaign.bind(broadcastController));\nrouter.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));",
            "current": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
            "after": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 13,
          "content": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.put('/campaigns/:id', broadcastController.updateCampaign.bind(broadcastController));\nrouter.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));",
            "current": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
            "after": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 14,
          "content": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.delete('/campaigns/:id', broadcastController.cancelCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));",
            "current": "router.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
            "after": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 15,
          "content": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/campaigns/:id/pause', broadcastController.pauseCampaign.bind(broadcastController));\nrouter.post('/campaigns/:id/resume', broadcastController.resumeCampaign.bind(broadcastController));",
            "current": "router.post('/campaigns/:id/send', broadcastController.sendCampaign.bind(broadcastController));",
            "after": "\n// Analytics routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 18,
          "content": "router.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Analytics routes",
            "current": "router.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
            "after": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 19,
          "content": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Analytics routes\nrouter.get('/analytics', broadcastController.getAnalytics.bind(broadcastController));",
            "current": "router.get('/analytics/:campaignId', broadcastController.getCampaignAnalytics.bind(broadcastController));",
            "after": "\n// Customer lists routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 22,
          "content": "router.get('/customer-lists', broadcastController.getCustomerLists.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer lists routes",
            "current": "router.get('/customer-lists', broadcastController.getCustomerLists.bind(broadcastController));",
            "after": "\n// Settings routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 25,
          "content": "router.get('/settings', broadcastController.getSettings.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Settings routes",
            "current": "router.get('/settings', broadcastController.getSettings.bind(broadcastController));",
            "after": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\broadcast\\routes\\broadcastRoutes.ts",
          "line": 26,
          "content": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Settings routes\nrouter.get('/settings', broadcastController.getSettings.bind(broadcastController));",
            "current": "router.put('/settings', broadcastController.updateSettings.bind(broadcastController));",
            "after": "\nexport { router as broadcastRoutes };"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 13,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\broadcast\\services\\BroadcastService.ts": {
      "totalLines": 670,
      "issues": [
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 108,
          "content": "where: { id: campaignId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "        where: { id: campaignId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 120,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update campaign status\n      await this.prisma.broadcastCampaign.update({",
            "current": "        where: { id: campaignId },",
            "after": "        data: { \n          status: 'sending',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 133,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update campaign with send results\n      await this.prisma.broadcastCampaign.update({",
            "current": "        where: { id: campaignId },",
            "after": "        data: {\n          status: 'sent',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 165,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update campaign status to failed\n      await this.prisma.broadcastCampaign.update({",
            "current": "        where: { id: campaignId },",
            "after": "        data: { \n          status: 'failed',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 181,
          "content": "where: { id: campaignId, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async getCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "      where: { id: campaignId, companyId },",
            "after": "      include: {\n        creator: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 202,
          "content": "where: { id: campaignId, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async getCampaignAnalytics(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "      where: { id: campaignId, companyId },",
            "after": "      include: {\n        analytics: true"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 531,
          "content": "where: { id: campaignId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async updateCampaign(campaignId: string, updateData: any, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "      where: { id: campaignId, companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 543,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    return await this.prisma.broadcastCampaign.update({",
            "current": "      where: { id: campaignId },",
            "after": "      data: {\n        ...updateData,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 556,
          "content": "where: { id: campaignId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async cancelCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "      where: { id: campaignId, companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 568,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    return await this.prisma.broadcastCampaign.update({",
            "current": "      where: { id: campaignId },",
            "after": "      data: {\n        status: 'cancelled',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 581,
          "content": "where: { id: campaignId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async togglePauseCampaign(campaignId: string, companyId: string) {\n    const campaign = await this.prisma.broadcastCampaign.findFirst({",
            "current": "      where: { id: campaignId, companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 595,
          "content": "where: { id: campaignId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    return await this.prisma.broadcastCampaign.update({",
            "current": "      where: { id: campaignId },",
            "after": "      data: {\n        status: newStatus,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 608,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async getSettings(companyId: string) {\n    let settings = await this.prisma.broadcastSettings.findFirst({",
            "current": "      where: { companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\broadcast\\services\\BroadcastService.ts",
          "line": 640,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async updateSettings(companyId: string, updateData: any) {\n    return await this.prisma.broadcastSettings.upsert({",
            "current": "      where: { companyId },",
            "after": "      update: {\n        ...updateData,"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 26,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 36
      }
    },
    "src\\domains\\conversations\\controllers\\ConversationController.ts": {
      "totalLines": 326,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 20
      }
    },
    "src\\domains\\conversations\\routes\\conversationRoutes.ts": {
      "totalLines": 319,
      "issues": [
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 105,
          "content": "router.get('/', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// GET /api/v1/conversations - جلب جميع المحادثات",
            "current": "router.get('/', (req, res) => {",
            "after": "  try {\n    console.log('📞 Fetching conversations from real server');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 130,
          "content": "router.get('/:id', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// GET /api/v1/conversations/:id - جلب محادثة محددة",
            "current": "router.get('/:id', (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 159,
          "content": "router.get('/:id/messages', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// GET /api/v1/conversations/:id/messages - جلب رسائل المحادثة",
            "current": "router.get('/:id/messages', (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 187,
          "content": "router.post('/:id/send', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// POST /api/v1/conversations/:id/send - إرسال رسالة",
            "current": "router.post('/:id/send', (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 239,
          "content": "router.delete('/:id', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// DELETE /api/v1/conversations/:id - حذف محادثة",
            "current": "router.delete('/:id', (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\conversations\\routes\\conversationRoutes.ts",
          "line": 282,
          "content": "router.post('/', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// POST /api/v1/conversations - إنشاء محادثة جديدة",
            "current": "router.post('/', (req, res) => {",
            "after": "  try {\n    const { customerId, customerName, message } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 6,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\customers\\controllers\\CustomerController.ts": {
      "totalLines": 309,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 2,
        "companyFilters": 16
      }
    },
    "src\\domains\\customers\\routes\\customerRoutes.ts": {
      "totalLines": 43,
      "issues": [
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 19,
          "content": "router.get('/search', customerController.searchCustomers);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer search (before :id routes to avoid conflicts)",
            "current": "router.get('/search', customerController.searchCustomers);",
            "after": "\n// Customer segments and analytics"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 22,
          "content": "router.get('/segments', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.getCustomerSegments);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer segments and analytics",
            "current": "router.get('/segments', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.getCustomerSegments);",
            "after": "\n// Export customers"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 25,
          "content": "router.get('/export', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.exportCustomers);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Export customers",
            "current": "router.get('/export', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.exportCustomers);",
            "after": "\n// CRUD operations"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 28,
          "content": "router.get('/', customerController.getCustomers);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// CRUD operations",
            "current": "router.get('/', customerController.getCustomers);",
            "after": "router.post('/', customerController.createCustomer);\nrouter.get('/:id', customerController.getCustomer);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 29,
          "content": "router.post('/', customerController.createCustomer);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// CRUD operations\nrouter.get('/', customerController.getCustomers);",
            "current": "router.post('/', customerController.createCustomer);",
            "after": "router.get('/:id', customerController.getCustomer);\nrouter.put('/:id', customerController.updateCustomer);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 30,
          "content": "router.get('/:id', customerController.getCustomer);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/', customerController.getCustomers);\nrouter.post('/', customerController.createCustomer);",
            "current": "router.get('/:id', customerController.getCustomer);",
            "after": "router.put('/:id', customerController.updateCustomer);\nrouter.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 31,
          "content": "router.put('/:id', customerController.updateCustomer);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/', customerController.createCustomer);\nrouter.get('/:id', customerController.getCustomer);",
            "current": "router.put('/:id', customerController.updateCustomer);",
            "after": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 32,
          "content": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/:id', customerController.getCustomer);\nrouter.put('/:id', customerController.updateCustomer);",
            "current": "router.delete('/:id', requireRole(['COMPANY_ADMIN', 'MANAGER']), customerController.deleteCustomer);",
            "after": "\n// Customer interactions"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 35,
          "content": "router.get('/:id/interactions', customerController.getCustomerInteractions);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer interactions",
            "current": "router.get('/:id/interactions', customerController.getCustomerInteractions);",
            "after": "router.get('/:id/stats', customerController.getCustomerStats);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 36,
          "content": "router.get('/:id/stats', customerController.getCustomerStats);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Customer interactions\nrouter.get('/:id/interactions', customerController.getCustomerInteractions);",
            "current": "router.get('/:id/stats', customerController.getCustomerStats);",
            "after": "\n// Customer notes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 39,
          "content": "router.get('/:id/notes', customerController.getCustomerNotes);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer notes",
            "current": "router.get('/:id/notes', customerController.getCustomerNotes);",
            "after": "router.post('/:id/notes', customerController.addCustomerNote);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\customers\\routes\\customerRoutes.ts",
          "line": 40,
          "content": "router.post('/:id/notes', customerController.addCustomerNote);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Customer notes\nrouter.get('/:id/notes', customerController.getCustomerNotes);",
            "current": "router.post('/:id/notes', customerController.addCustomerNote);",
            "after": "\nexport { router as customerRoutes };"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 12,
        "authChecks": 3,
        "companyFilters": 0
      }
    },
    "src\\domains\\customers\\services\\CustomerService.ts": {
      "totalLines": 657,
      "issues": [
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 146,
          "content": "where: { id, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id, companyId },",
            "after": "        include: {\n          conversations: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 252,
          "content": "where: { id, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if customer exists and belongs to company\n      const existingCustomer = await this.prisma.customer.findFirst({",
            "current": "        where: { id, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 275,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const customer = await this.prisma.customer.update({",
            "current": "        where: { id },",
            "after": "        data: updateData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 305,
          "content": "where: { id, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if customer exists and belongs to company\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 314,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Soft delete by updating status\n      await this.prisma.customer.update({",
            "current": "        where: { id },",
            "after": "        data: { status: 'INACTIVE' as any }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 332,
          "content": "where: { id: customerId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: customerId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 363,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get orders\n      const orders = await this.prisma.order.findMany({",
            "current": "        where: { customerId },",
            "after": "        include: {\n          items: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 380,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get notes\n      const notes = await this.prisma.customerNote.findMany({",
            "current": "        where: { customerId },",
            "after": "        include: {\n          author: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 413,
          "content": "where: { id: noteData.customerId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: noteData.customerId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 447,
          "content": "where: { id: customerId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: customerId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 458,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      return await this.prisma.customerNote.findMany({",
            "current": "        where: { customerId },",
            "after": "        include: {\n          author: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 485,
          "content": "where: { id: customerId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Verify customer belongs to company\n      const customer = await this.prisma.customer.findFirst({",
            "current": "        where: { id: customerId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 508,
          "content": "where: { customerId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.order.count({",
            "current": "          where: { customerId }",
            "after": "        }),\n        this.prisma.order.aggregate({"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 511,
          "content": "where: { customerId, status: { not: 'CANCELLED' } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.order.aggregate({",
            "current": "          where: { customerId, status: { not: 'CANCELLED' } },",
            "after": "          _sum: { total: true }\n        }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 515,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.order.findFirst({",
            "current": "          where: { customerId },",
            "after": "          orderBy: { createdAt: 'desc' }\n        }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 586,
          "content": "this.prisma.customer.count({ where: { companyId } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        recentCustomers\n      ] = await Promise.all([",
            "current": "        this.prisma.customer.count({ where: { companyId } }),",
            "after": "        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),\n        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 587,
          "content": "this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      ] = await Promise.all([\n        this.prisma.customer.count({ where: { companyId } }),",
            "current": "        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
            "after": "        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),\n        this.prisma.customer.count({ "
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\customers\\services\\CustomerService.ts",
          "line": 588,
          "content": "this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        this.prisma.customer.count({ where: { companyId } }),\n        this.prisma.customer.count({ where: { companyId, status: 'ACTIVE' } }),",
            "current": "        this.prisma.customer.count({ where: { companyId, status: 'LEAD' } }),",
            "after": "        this.prisma.customer.count({ \n          where: { "
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 30,
        "apiRoutes": 0,
        "authChecks": 5,
        "companyFilters": 33
      }
    },
    "src\\domains\\integrations\\controllers\\FacebookController.ts": {
      "totalLines": 296,
      "issues": [
        {
          "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
          "line": 25,
          "content": "this.WEBHOOK_VERIFY_TOKEN = process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN || 'your-webhook-verify-token';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    super();\n    this.facebookService = new FacebookService();",
            "current": "    this.WEBHOOK_VERIFY_TOKEN = process.env.FACEBOOK_WEBHOOK_VERIFY_TOKEN || 'your-webhook-verify-token';",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
          "line": 204,
          "content": "webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      connectedPagesCount: connectedPages.length,\n      pages: connectedPages,",
            "current": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
            "after": "      verifyToken: this.WEBHOOK_VERIFY_TOKEN,\n    };"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
          "line": 246,
          "content": "appId: process.env.FACEBOOK_APP_ID,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  getAppConfig = this.asyncHandler(async (req: Request, res: Response) => {\n    const config = {",
            "current": "      appId: process.env.FACEBOOK_APP_ID,",
            "after": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,\n      verifyToken: this.WEBHOOK_VERIFY_TOKEN,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
          "line": 247,
          "content": "webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    const config = {\n      appId: process.env.FACEBOOK_APP_ID,",
            "current": "      webhookUrl: `${process.env.BACKEND_URL || 'http://localhost:3001'}/api/v1/integrations/facebook/webhook`,",
            "after": "      verifyToken: this.WEBHOOK_VERIFY_TOKEN,\n      requiredPermissions: ["
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\integrations\\controllers\\FacebookController.ts",
          "line": 273,
          "content": "const appSecret = process.env.FACEBOOK_APP_SECRET;",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    try {\n      const signature = req.headers['x-hub-signature-256'] as string;",
            "current": "      const appSecret = process.env.FACEBOOK_APP_SECRET;",
            "after": "\n      if (!signature || !appSecret) {"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 2,
        "companyFilters": 8
      }
    },
    "src\\domains\\integrations\\routes\\facebookRoutes.ts": {
      "totalLines": 39,
      "issues": [
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 16,
          "content": "router.get('/webhook', facebookController.verifyWebhook);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Webhook routes (no authentication required)",
            "current": "router.get('/webhook', facebookController.verifyWebhook);",
            "after": "router.post('/webhook', facebookController.handleWebhook);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 17,
          "content": "router.post('/webhook', facebookController.handleWebhook);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Webhook routes (no authentication required)\nrouter.get('/webhook', facebookController.verifyWebhook);",
            "current": "router.post('/webhook', facebookController.handleWebhook);",
            "after": "\n// Protected routes (authentication required)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 23,
          "content": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Page management (managers and admins only)",
            "current": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
            "after": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);\nrouter.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 24,
          "content": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Page management (managers and admins only)\nrouter.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);",
            "current": "router.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
            "after": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 25,
          "content": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/pages', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.getPages);\nrouter.post('/connect', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.connectPage);",
            "current": "router.delete('/:pageId', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.disconnectPage);",
            "after": "\n// General integration routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 28,
          "content": "router.get('/connected', facebookController.getConnectedPages);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// General integration routes",
            "current": "router.get('/connected', facebookController.getConnectedPages);",
            "after": "router.get('/status', facebookController.getIntegrationStatus);\nrouter.get('/config', facebookController.getAppConfig);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 29,
          "content": "router.get('/status', facebookController.getIntegrationStatus);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// General integration routes\nrouter.get('/connected', facebookController.getConnectedPages);",
            "current": "router.get('/status', facebookController.getIntegrationStatus);",
            "after": "router.get('/config', facebookController.getAppConfig);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 30,
          "content": "router.get('/config', facebookController.getAppConfig);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/connected', facebookController.getConnectedPages);\nrouter.get('/status', facebookController.getIntegrationStatus);",
            "current": "router.get('/config', facebookController.getAppConfig);",
            "after": "\n// Message sending"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 33,
          "content": "router.post('/send-message', facebookController.sendMessage);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Message sending",
            "current": "router.post('/send-message', facebookController.sendMessage);",
            "after": "\n// Testing and configuration"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\integrations\\routes\\facebookRoutes.ts",
          "line": 36,
          "content": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.testConnection);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Testing and configuration",
            "current": "router.post('/test', requireRole(['COMPANY_ADMIN', 'MANAGER']), facebookController.testConnection);",
            "after": "\nexport { router as facebookRoutes };"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 10,
        "authChecks": 3,
        "companyFilters": 0
      }
    },
    "src\\domains\\integrations\\services\\FacebookService.ts": {
      "totalLines": 656,
      "issues": [
        {
          "file": "src\\domains\\integrations\\services\\FacebookService.ts",
          "line": 483,
          "content": "where: { id: conversation.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update conversation timestamp\n      await this.prisma.conversation.update({",
            "current": "        where: { id: conversation.id },",
            "after": "        data: { updatedAt: timestamp },\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 17,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 26
      }
    },
    "src\\domains\\products\\controllers\\ProductController.ts": {
      "totalLines": 468,
      "issues": [
        {
          "file": "src\\domains\\products\\controllers\\ProductController.ts",
          "line": 258,
          "content": "console.log('🔍 Getting categories for company:', user.companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const user = this.getAuthenticatedUser(req);\n",
            "current": "    console.log('🔍 Getting categories for company:', user.companyId);",
            "after": "\n    const categories = await this.productService.getCategories(user.companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 26
      }
    },
    "src\\domains\\products\\services\\ProductService.ts": {
      "totalLines": 839,
      "issues": [
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 166,
          "content": "where: { id, companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const product = await this.prisma.product.findFirst({",
            "current": "        where: { id, companyId },",
            "after": "        include: {\n          category: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 268,
          "content": "where: { id, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if product exists and belongs to company\n      const existingProduct = await this.prisma.product.findFirst({",
            "current": "        where: { id, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 291,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const product = await this.prisma.product.update({",
            "current": "        where: { id },",
            "after": "        data: updateData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 323,
          "content": "where: { id, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if product exists and belongs to company\n      const product = await this.prisma.product.findFirst({",
            "current": "        where: { id, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 332,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Soft delete by updating isActive\n      await this.prisma.product.update({",
            "current": "        where: { id },",
            "after": "        data: { isActive: false }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 387,
          "content": "console.log('🔍 ProductService: Getting categories for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async getCategories(companyId: string): Promise<any[]> {\n    try {",
            "current": "      console.log('🔍 ProductService: Getting categories for company:', companyId);",
            "after": "\n      const categories = await this.prisma.category.findMany({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 390,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const categories = await this.prisma.category.findMany({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          _count: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 488,
          "content": "where: { id: categoryId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const category = await this.prisma.category.update({",
            "current": "        where: { id: categoryId },",
            "after": "        data: categoryData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 537,
          "content": "where: { id: categoryId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      await this.prisma.category.delete({",
            "current": "        where: { id: categoryId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 557,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get all categories for the company\n      const categories = await this.prisma.category.findMany({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          _count: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 585,
          "content": "where: { id: categoryIds[i] }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "            if (category && category._count.products === 0) {\n              await this.prisma.category.delete({",
            "current": "                where: { id: categoryIds[i] }",
            "after": "              });\n              deletedCount++;"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 600,
          "content": "where: { id: category.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      for (const category of numericEmptyCategories) {\n        await this.prisma.category.delete({",
            "current": "          where: { id: category.id }",
            "after": "        });\n        deletedCount++;"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 632,
          "content": "where: { id: productId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const product = await this.prisma.product.findFirst({",
            "current": "        where: { id: productId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 658,
          "content": "where: { id: productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const updatedProduct = await this.prisma.product.update({",
            "current": "        where: { id: productId },",
            "after": "        data: { stock: newStock },\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 749,
          "content": "this.prisma.product.count({ where: { ...where, isActive: true } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      ] = await Promise.all([\n        this.prisma.product.count({ where }),",
            "current": "        this.prisma.product.count({ where: { ...where, isActive: true } }),",
            "after": "        this.prisma.product.count({\n          where: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 767,
          "content": "where: { ...where, isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.product.aggregate({",
            "current": "          where: { ...where, isActive: true },",
            "after": "          _sum: { price: true }\n        }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\domains\\products\\services\\ProductService.ts",
          "line": 771,
          "content": "where: { ...where, isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        }),\n        this.prisma.product.findMany({",
            "current": "          where: { ...where, isActive: true },",
            "after": "          include: {\n            _count: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 33,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 41
      }
    },
    "src\\domains\\upload\\controllers\\UploadController.ts": {
      "totalLines": 213,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\upload\\index.ts": {
      "totalLines": 3,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\domains\\upload\\routes\\uploadRoutes.ts": {
      "totalLines": 26,
      "issues": [
        {
          "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
          "line": 8,
          "content": "router.post('/image',",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Single image upload",
            "current": "router.post('/image', ",
            "after": "  uploadController.uploadSingleImage,\n  uploadController.handleSingleImageUpload.bind(uploadController)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
          "line": 14,
          "content": "router.post('/images',",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Multiple images upload",
            "current": "router.post('/images', ",
            "after": "  uploadController.uploadMultipleImages,\n  uploadController.handleMultipleImageUpload.bind(uploadController)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
          "line": 20,
          "content": "router.delete('/image/:filename', uploadController.deleteImage.bind(uploadController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Delete image",
            "current": "router.delete('/image/:filename', uploadController.deleteImage.bind(uploadController));",
            "after": "\n// Get image info"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\domains\\upload\\routes\\uploadRoutes.ts",
          "line": 23,
          "content": "router.get('/image/:filename', uploadController.getImageInfo.bind(uploadController));",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get image info",
            "current": "router.get('/image/:filename', uploadController.getImageInfo.bind(uploadController));",
            "after": "\nexport { router as uploadRoutes };"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 4,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\index.ts": {
      "totalLines": 416,
      "issues": [
        {
          "file": "src\\index.ts",
          "line": 8,
          "content": "const PORT = process.env.PORT || 3001;",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\nconst app = express();",
            "current": "const PORT = process.env.PORT || 3001;",
            "after": "\n// Middleware"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\index.ts",
          "line": 12,
          "content": "origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "// Middleware\napp.use(cors({",
            "current": "  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',",
            "after": "  credentials: true,\n}));"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\index.ts",
          "line": 38,
          "content": "environment: process.env.NODE_ENV || 'development',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),",
            "current": "    environment: process.env.NODE_ENV || 'development',",
            "after": "    version: '1.0.0',\n  });"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\index.ts",
          "line": 67,
          "content": "await prisma.$queryRaw`SELECT 1 as test`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "\n    // Test database connection",
            "current": "    await prisma.$queryRaw`SELECT 1 as test`;",
            "after": "\n    // Get counts from tables"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\index.ts",
          "line": 117,
          "content": "console.log('📞 Fetching real conversations from database for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log('📞 Fetching real conversations from database for company:', companyId);",
            "after": "\n    // Get conversations with customer info - فلترة بـ companyId"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\index.ts",
          "line": 121,
          "content": "where: { companyId }, // إضافة فلترة الشركة",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get conversations with customer info - فلترة بـ companyId\n    const conversations = await prisma.conversation.findMany({",
            "current": "      where: { companyId }, // إضافة فلترة الشركة",
            "after": "      include: {\n        customer: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\index.ts",
          "line": 276,
          "content": "where: { id: conversationId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Check if conversation exists\n    const conversation = await prisma.conversation.findUnique({",
            "current": "      where: { id: conversationId }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\index.ts",
          "line": 310,
          "content": "where: { id: conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update conversation last message\n    await prisma.conversation.update({",
            "current": "      where: { id: conversationId },",
            "after": "      data: {\n        lastMessageAt: new Date(),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\index.ts",
          "line": 353,
          "content": "error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    success: false,\n    message: 'Internal server error',",
            "current": "    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',",
            "after": "  });\n});"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\index.ts",
          "line": 402,
          "content": "console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    app.listen(PORT, () => {\n      console.log(`🚀 Server running on port ${PORT}`);",
            "current": "      console.log(`📍 Environment: ${process.env.NODE_ENV || 'development'}`);",
            "after": "      console.log(`🌐 API URL: http://localhost:${PORT}`);\n      console.log(`💚 Health check: http://localhost:${PORT}/health`);"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 11,
        "apiRoutes": 0,
        "authChecks": 4,
        "companyFilters": 4
      }
    },
    "src\\middleware\\auth.ts": {
      "totalLines": 310,
      "issues": [
        {
          "file": "src\\middleware\\auth.ts",
          "line": 59,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    const prisma = getPrismaClient();\n    const user = await prisma.user.findUnique({",
            "current": "      where: { id: decoded.userId },",
            "after": "      select: {\n        id: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\middleware\\auth.ts",
          "line": 80,
          "content": "req.user = {",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "\n    // Attach user to request",
            "current": "    req.user = {",
            "after": "      id: user.id,\n      email: user.email,"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 8,
        "companyFilters": 5
      }
    },
    "src\\middleware\\comprehensiveIsolation.js": {
      "totalLines": 272,
      "issues": [
        {
          "file": "src\\middleware\\comprehensiveIsolation.js",
          "line": 93,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'order':\n          resource = await prisma.order.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\comprehensiveIsolation.js",
          "line": 100,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'product':\n          resource = await prisma.product.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\comprehensiveIsolation.js",
          "line": 107,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'customer':\n          resource = await prisma.customer.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\comprehensiveIsolation.js",
          "line": 114,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'conversation':\n          resource = await prisma.conversation.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 4,
        "apiRoutes": 0,
        "authChecks": 2,
        "companyFilters": 24
      }
    },
    "src\\middleware\\dataIsolation.js": {
      "totalLines": 185,
      "issues": [
        {
          "file": "src\\middleware\\dataIsolation.js",
          "line": 69,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'order':\n          resource = await prisma.order.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\dataIsolation.js",
          "line": 76,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'product':\n          resource = await prisma.product.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\dataIsolation.js",
          "line": 83,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'customer':\n          resource = await prisma.customer.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\middleware\\dataIsolation.js",
          "line": 90,
          "content": "where: { id: resourceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        case 'conversation':\n          resource = await prisma.conversation.findUnique({",
            "current": "            where: { id: resourceId },",
            "after": "            select: { companyId: true }\n          });"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 4,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 14
      }
    },
    "src\\middleware\\errorHandler.js": {
      "totalLines": 251,
      "issues": [
        {
          "file": "src\\middleware\\errorHandler.js",
          "line": 117,
          "content": "const isDevelopment = process.env.NODE_ENV === 'development';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n  // Don't leak error details in production",
            "current": "  const isDevelopment = process.env.NODE_ENV === 'development';",
            "after": "  \n  // Handle specific error types"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 5,
        "companyFilters": 0
      }
    },
    "src\\middleware\\errorHandler.ts": {
      "totalLines": 310,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\middleware\\fileUpload.ts": {
      "totalLines": 43,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\middleware\\globalSecurity.js": {
      "totalLines": 259,
      "issues": [
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 135,
          "content": "console.log(`❌ [GLOBAL-AUTH] No token provided for: ${method} ${path}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    if (!token) {",
            "current": "      console.log(`❌ [GLOBAL-AUTH] No token provided for: ${method} ${path}`);",
            "after": "      return res.status(401).json({\n        success: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 146,
          "content": "decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    let decoded;\n    try {",
            "current": "      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');",
            "after": "    } catch (error) {\n      console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 148,
          "content": "console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret-key');\n    } catch (error) {",
            "current": "      console.log(`❌ [GLOBAL-AUTH] Invalid token for: ${method} ${path}`, error.message);",
            "after": "      return res.status(401).json({\n        success: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 157,
          "content": "req.user = decoded;",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "\n    // إضافة معلومات المستخدم للطلب",
            "current": "    req.user = decoded;",
            "after": "\n    // التحقق من صلاحيات الإدارة"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 162,
          "content": "console.log(`❌ [GLOBAL-AUTH] Admin access denied for user: ${decoded.id}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    if (isAdminRoute(method, path)) {\n      if (decoded.role !== 'SUPER_ADMIN') {",
            "current": "        console.log(`❌ [GLOBAL-AUTH] Admin access denied for user: ${decoded.id}`);",
            "after": "        return res.status(403).json({\n          success: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 198,
          "content": "console.log(`❌ [COMPANY-ISOLATION] No company info for: ${req.method} ${path}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    // التأكد من وجود معلومات المستخدم\n    if (!req.user || !req.user.companyId) {",
            "current": "      console.log(`❌ [COMPANY-ISOLATION] No company info for: ${req.method} ${path}`);",
            "after": "      return res.status(403).json({\n        success: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\globalSecurity.js",
          "line": 230,
          "content": "console.log(`✅ [COMPANY-ISOLATION] Company access granted: ${req.user.companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`✅ [COMPANY-ISOLATION] Company access granted: ${req.user.companyId}`);",
            "after": "    next();\n"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 65,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 7,
        "companyFilters": 6
      }
    },
    "src\\middleware\\notFoundHandler.ts": {
      "totalLines": 19,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\middleware\\rateLimiter.ts": {
      "totalLines": 247,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 3,
        "companyFilters": 0
      }
    },
    "src\\middleware\\requestLogger.ts": {
      "totalLines": 268,
      "issues": [
        {
          "file": "src\\middleware\\requestLogger.ts",
          "line": 203,
          "content": "if (config.env === 'development' && (res.statusCode >= 400 || process.env.LOG_RESPONSE_BODY === 'true')) {",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n    // Add response body in development (only for errors or if explicitly enabled)",
            "current": "    if (config.env === 'development' && (res.statusCode >= 400 || process.env.LOG_RESPONSE_BODY === 'true')) {",
            "after": "      try {\n        if (responseBody) {"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 2,
        "companyFilters": 0
      }
    },
    "src\\middleware\\security.js": {
      "totalLines": 412,
      "issues": [
        {
          "file": "src\\middleware\\security.js",
          "line": 205,
          "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  try {\n    const jwt = require('jsonwebtoken');",
            "current": "    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
            "after": "    req.user = decoded;\n    next();"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\security.js",
          "line": 206,
          "content": "req.user = decoded;",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "    const jwt = require('jsonwebtoken');\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
            "current": "    req.user = decoded;",
            "after": "    next();\n  } catch (error) {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\middleware\\security.js",
          "line": 252,
          "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    try {\n      const jwt = require('jsonwebtoken');",
            "current": "      const decoded = jwt.verify(token, process.env.JWT_SECRET);",
            "after": "      req.user = decoded;\n    } catch (error) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\security.js",
          "line": 253,
          "content": "req.user = decoded;",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "      const jwt = require('jsonwebtoken');\n      const decoded = jwt.verify(token, process.env.JWT_SECRET);",
            "current": "      req.user = decoded;",
            "after": "    } catch (error) {\n      // Log but don't fail"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\middleware\\security.js",
          "line": 310,
          "content": "const allowedOrigins = process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'];",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "const corsOptions = {\n  origin: function (origin, callback) {",
            "current": "    const allowedOrigins = process.env.CORS_ORIGIN?.split(',') || ['http://localhost:3000'];",
            "after": "    \n    // Allow requests with no origin (mobile apps, etc.)"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 8,
        "companyFilters": 0
      }
    },
    "src\\middleware\\securityEnhancements.js": {
      "totalLines": 301,
      "issues": [
        {
          "file": "src\\middleware\\securityEnhancements.js",
          "line": 38,
          "content": "const isDevelopment = process.env.NODE_ENV === 'development';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": " */\nconst getAuthRateLimit = () => {",
            "current": "  const isDevelopment = process.env.NODE_ENV === 'development';",
            "after": "  const isProduction = process.env.NODE_ENV === 'production';\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\securityEnhancements.js",
          "line": 39,
          "content": "const isProduction = process.env.NODE_ENV === 'production';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "const getAuthRateLimit = () => {\n  const isDevelopment = process.env.NODE_ENV === 'development';",
            "current": "  const isProduction = process.env.NODE_ENV === 'production';",
            "after": "\n  if (isDevelopment) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\securityEnhancements.js",
          "line": 227,
          "content": "if (process.env.NODE_ENV !== 'production') {",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    \n    // In development, allow all IPs",
            "current": "    if (process.env.NODE_ENV !== 'production') {",
            "after": "      return next();\n    }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 1
      }
    },
    "src\\middleware\\superAdminMiddleware.js": {
      "totalLines": 69,
      "issues": [
        {
          "file": "src\\middleware\\superAdminMiddleware.js",
          "line": 19,
          "content": "const decoded = jwt.verify(token, process.env.JWT_SECRET);",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    }\n",
            "current": "    const decoded = jwt.verify(token, process.env.JWT_SECRET);",
            "after": "    \n    // Get user from database"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\middleware\\superAdminMiddleware.js",
          "line": 23,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get user from database\n    const user = await prisma.user.findUnique({",
            "current": "      where: { id: decoded.userId },",
            "after": "      include: {\n        company: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\middleware\\superAdminMiddleware.js",
          "line": 36,
          "content": "req.user = user;",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "    }\n",
            "current": "    req.user = user;",
            "after": "    next();\n  } catch (error) {"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 4,
        "companyFilters": 0
      }
    },
    "src\\middleware\\validation.js": {
      "totalLines": 508,
      "issues": [
        {
          "file": "src\\middleware\\validation.js",
          "line": 466,
          "content": "where: { id: req.user.companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: req.user.companyId },",
            "after": "      select: { id: true, isActive: true }\n    });"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 3
      }
    },
    "src\\routes\\adminAnalyticsRoutes.js": {
      "totalLines": 416,
      "issues": [
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 22,
          "content": "where: { createdAt: { gte: startDate } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get daily growth data using separate queries (safer approach)\n    const companies = await prisma.company.findMany({",
            "current": "      where: { createdAt: { gte: startDate } },",
            "after": "      select: { createdAt: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 27,
          "content": "where: { createdAt: { gte: startDate } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const users = await prisma.user.findMany({",
            "current": "      where: { createdAt: { gte: startDate } },",
            "after": "      select: { createdAt: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 32,
          "content": "where: { createdAt: { gte: startDate } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const customers = await prisma.customer.findMany({",
            "current": "      where: { createdAt: { gte: startDate } },",
            "after": "      select: { createdAt: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 37,
          "content": "where: { createdAt: { gte: startDate } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const conversations = await prisma.conversation.findMany({",
            "current": "      where: { createdAt: { gte: startDate } },",
            "after": "      select: { createdAt: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 76,
          "content": "prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const previousMetrics = await Promise.all([",
            "current": "      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "after": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 77,
          "content": "prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    const previousMetrics = await Promise.all([\n      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "current": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "after": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 78,
          "content": "prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.company.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "current": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "after": "      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 79,
          "content": "prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.user.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "current": "      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "after": "      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })\n    ]);"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 80,
          "content": "prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.customer.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } }),",
            "current": "      prisma.message.count({ where: { createdAt: { gte: previousStartDate, lt: startDate } } })",
            "after": "    ]);\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 84,
          "content": "prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const currentMetrics = await Promise.all([",
            "current": "      prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
            "after": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 85,
          "content": "prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    const currentMetrics = await Promise.all([\n      prisma.company.count({ where: { createdAt: { gte: startDate } } }),",
            "current": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
            "after": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 86,
          "content": "prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.company.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.user.count({ where: { createdAt: { gte: startDate } } }),",
            "current": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
            "after": "      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.message.count({ where: { createdAt: { gte: startDate } } })"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 87,
          "content": "prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.user.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),",
            "current": "      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
            "after": "      prisma.message.count({ where: { createdAt: { gte: startDate } } })\n    ]);"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 88,
          "content": "prisma.message.count({ where: { createdAt: { gte: startDate } } })",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.customer.count({ where: { createdAt: { gte: startDate } } }),\n      prisma.conversation.count({ where: { createdAt: { gte: startDate } } }),",
            "current": "      prisma.message.count({ where: { createdAt: { gte: startDate } } })",
            "after": "    ]);\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 343,
          "content": "prisma.company.count({ where: { isActive: true } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      // Total active companies",
            "current": "      prisma.company.count({ where: { isActive: true } }),",
            "after": "\n      // Messages in last 24 hours"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 347,
          "content": "where: { createdAt: { gte: oneDayAgo } }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Messages in last 24 hours\n      prisma.message.count({",
            "current": "        where: { createdAt: { gte: oneDayAgo } }",
            "after": "      }),\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 352,
          "content": "where: { createdAt: { gte: oneDayAgo } }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Conversations in last 24 hours\n      prisma.conversation.count({",
            "current": "        where: { createdAt: { gte: oneDayAgo } }",
            "after": "      }),\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminAnalyticsRoutes.js",
          "line": 357,
          "content": "where: { createdAt: { gte: oneDayAgo } }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // New customers in last 24 hours\n      prisma.customer.count({",
            "current": "        where: { createdAt: { gte: oneDayAgo } }",
            "after": "      })\n    ]);"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 30,
        "apiRoutes": 4,
        "authChecks": 5,
        "companyFilters": 4
      }
    },
    "src\\routes\\adminPlansRoutes.js": {
      "totalLines": 328,
      "issues": [
        {
          "file": "src\\routes\\adminPlansRoutes.js",
          "line": 143,
          "content": "where: { plan: plan.planType, isActive: true }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      plans.map(async (plan) => {\n        const companiesCount = await prisma.company.count({",
            "current": "          where: { plan: plan.planType, isActive: true }",
            "after": "        });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\adminPlansRoutes.js",
          "line": 207,
          "content": "where: { planType },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update or create plan configuration\n    const planConfig = await prisma.planConfiguration.upsert({",
            "current": "      where: { planType },",
            "after": "      update: {\n        price: parseFloat(price),"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 3,
        "apiRoutes": 3,
        "authChecks": 4,
        "companyFilters": 0
      }
    },
    "src\\routes\\aiCapabilitiesRoutes.js": {
      "totalLines": 498,
      "issues": [
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 17,
          "content": "router.get('/capabilities', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get all capabilities settings",
            "current": "router.get('/capabilities', async (req, res) => {",
            "after": "  try {\n    console.log('📋 [AI-CAPABILITIES] Getting capabilities settings');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 36,
          "content": "router.put('/capabilities', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Update capabilities settings",
            "current": "router.put('/capabilities', async (req, res) => {",
            "after": "  try {\n    console.log('🔄 [AI-CAPABILITIES] Updating capabilities:', req.body);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 63,
          "content": "router.post('/test/:capabilityId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Test a specific capability",
            "current": "router.post('/test/:capabilityId', async (req, res) => {",
            "after": "  try {\n    const { capabilityId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 187,
          "content": "router.get('/performance', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get capability performance stats",
            "current": "router.get('/performance', async (req, res) => {",
            "after": "  try {\n    console.log('📊 [AI-CAPABILITIES] Getting performance stats');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 219,
          "content": "router.get('/analytics', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get capability usage analytics",
            "current": "router.get('/analytics', async (req, res) => {",
            "after": "  try {\n    console.log('📈 [AI-CAPABILITIES] Getting usage analytics');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 263,
          "content": "router.post('/test-chat', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Test endpoint to debug routing",
            "current": "router.post('/test-chat', async (req, res) => {",
            "after": "  console.log('🎯 [AI-CAPABILITIES] TEST CHAT endpoint hit!');\n  res.json({"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 273,
          "content": "router.post('/chat', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Interactive chat endpoint",
            "current": "router.post('/chat', async (req, res) => {",
            "after": "  try {\n    console.log('🔍 [AI-CAPABILITIES] Chat endpoint hit!');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiCapabilitiesRoutes.js",
          "line": 468,
          "content": "router.post('/reset', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Reset all capabilities to default",
            "current": "router.post('/reset', async (req, res) => {",
            "after": "  try {\n    console.log('🔄 [AI-CAPABILITIES] Resetting capabilities to default');"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 8,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\aiQualityRoutes.js": {
      "totalLines": 533,
      "issues": [
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 29,
          "content": "router.get('/statistics', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على إحصائيات الجودة العامة\n */",
            "current": "router.get('/statistics', async (req, res) => {",
            "after": "  try {\n    const qualityService = getQualityMonitorService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 60,
          "content": "router.get('/evaluation/:messageId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على تقييم رسالة محددة\n */",
            "current": "router.get('/evaluation/:messageId', async (req, res) => {",
            "after": "  try {\n    const { messageId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 100,
          "content": "router.get('/recent', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على آخر التقييمات\n */",
            "current": "router.get('/recent', async (req, res) => {",
            "after": "  try {\n    const limit = parseInt(req.query.limit) || 10;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 134,
          "content": "router.get('/by-quality/:level', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على التقييمات حسب مستوى الجودة\n */",
            "current": "router.get('/by-quality/:level', async (req, res) => {",
            "after": "  try {\n    const { level } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 179,
          "content": "router.get('/problematic', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على التقييمات ذات المشاكل\n */",
            "current": "router.get('/problematic', async (req, res) => {",
            "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 213,
          "content": "router.get('/trends', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحليل الاتجاهات\n */",
            "current": "router.get('/trends', async (req, res) => {",
            "after": "  try {\n    const days = parseInt(req.query.days) || 7;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 246,
          "content": "router.get('/system-status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * حالة نظام التقييم\n */",
            "current": "router.get('/system-status', async (req, res) => {",
            "after": "  try {\n    const qualityService = getQualityMonitorService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 278,
          "content": "router.post('/settings', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحديث إعدادات التقييم\n */",
            "current": "router.post('/settings', async (req, res) => {",
            "after": "  try {\n    const qualityService = getQualityMonitorService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 321,
          "content": "router.get('/metrics-summary', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * ملخص المقاييس للوحة التحكم\n */",
            "current": "router.get('/metrics-summary', async (req, res) => {",
            "after": "  try {\n    const qualityService = getQualityMonitorService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 379,
          "content": "router.get('/sentiment-analysis', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على إحصائيات تحليل المشاعر\n */",
            "current": "router.get('/sentiment-analysis', async (req, res) => {",
            "after": "  try {\n    const qualityService = getQualityMonitorService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\aiQualityRoutes.js",
          "line": 414,
          "content": "router.post('/analyze-sentiment', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحليل مشاعر رسالة معينة\n */",
            "current": "router.post('/analyze-sentiment', async (req, res) => {",
            "after": "  try {\n    const { customerMessage, botResponse } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 11,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\authRoutes.ts": {
      "totalLines": 38,
      "issues": [
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 26,
          "content": "router.post('/refresh', refreshToken);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/register', authRateLimiter, register);\nrouter.post('/login', authRateLimiter, login);",
            "current": "router.post('/refresh', refreshToken);",
            "after": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);\nrouter.post('/reset-password', passwordResetRateLimiter, resetPassword);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 27,
          "content": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/login', authRateLimiter, login);\nrouter.post('/refresh', refreshToken);",
            "current": "router.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
            "after": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 28,
          "content": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/refresh', refreshToken);\nrouter.post('/forgot-password', passwordResetRateLimiter, forgotPassword);",
            "current": "router.post('/reset-password', passwordResetRateLimiter, resetPassword);",
            "after": "\n// Protected routes (authentication required)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 33,
          "content": "router.post('/logout', logout);",
          "description": "API route without authentication middleware",
          "severity": "MEDIUM",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.use(authenticateToken);\n",
            "current": "router.post('/logout', logout);",
            "after": "router.get('/me', getCurrentUser);\nrouter.post('/change-password', changePassword);"
          },
          "mitigation": true,
          "riskScore": 3
        },
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 34,
          "content": "router.get('/me', getCurrentUser);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\nrouter.post('/logout', logout);",
            "current": "router.get('/me', getCurrentUser);",
            "after": "router.post('/change-password', changePassword);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\authRoutes.ts",
          "line": 35,
          "content": "router.post('/change-password', changePassword);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/logout', logout);\nrouter.get('/me', getCurrentUser);",
            "current": "router.post('/change-password', changePassword);",
            "after": "\nexport default router;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 8,
        "authChecks": 6,
        "companyFilters": 0
      }
    },
    "src\\routes\\autoPatternRoutes.js": {
      "totalLines": 267,
      "issues": [
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 14,
          "content": "router.get('/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على حالة خدمة الاكتشاف التلقائي\n */",
            "current": "router.get('/status', async (req, res) => {",
            "after": "  try {\n    const status = autoPatternService.getStatus();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 41,
          "content": "router.post('/start', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * بدء خدمة الاكتشاف التلقائي\n */",
            "current": "router.post('/start', async (req, res) => {",
            "after": "  try {\n    autoPatternService.start();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 64,
          "content": "router.post('/stop', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إيقاف خدمة الاكتشاف التلقائي\n */",
            "current": "router.post('/stop', async (req, res) => {",
            "after": "  try {\n    autoPatternService.stop();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 87,
          "content": "router.post('/detect-now', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تشغيل اكتشاف فوري للأنماط\n */",
            "current": "router.post('/detect-now', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 122,
          "content": "router.put('/interval', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تغيير فترة الاكتشاف التلقائي\n */",
            "current": "router.put('/interval', async (req, res) => {",
            "after": "  try {\n    const { minutes } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 154,
          "content": "router.post('/companies', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إضافة شركة للمراقبة\n */",
            "current": "router.post('/companies', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 187,
          "content": "router.delete('/companies/:companyId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إزالة شركة من المراقبة\n */",
            "current": "router.delete('/companies/:companyId', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 212,
          "content": "router.get('/history', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على تاريخ الاكتشافات\n */",
            "current": "router.get('/history', async (req, res) => {",
            "after": "  try {\n    const status = autoPatternService.getStatus();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\autoPatternRoutes.js",
          "line": 240,
          "content": "router.get('/health', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * فحص صحة الخدمة\n */",
            "current": "router.get('/health', async (req, res) => {",
            "after": "  try {\n    const status = autoPatternService.getStatus();"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 9,
        "authChecks": 0,
        "companyFilters": 11
      }
    },
    "src\\routes\\broadcastRoutes.js": {
      "totalLines": 311,
      "issues": [
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 295,
          "content": "router.post('/campaigns', broadcastController.createCampaign);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Campaign routes",
            "current": "router.post('/campaigns', broadcastController.createCampaign);",
            "after": "router.get('/campaigns', broadcastController.getCampaigns);\nrouter.get('/campaigns/:id', broadcastController.getCampaign);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 296,
          "content": "router.get('/campaigns', broadcastController.getCampaigns);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Campaign routes\nrouter.post('/campaigns', broadcastController.createCampaign);",
            "current": "router.get('/campaigns', broadcastController.getCampaigns);",
            "after": "router.get('/campaigns/:id', broadcastController.getCampaign);\nrouter.post('/campaigns/:id/send', broadcastController.sendCampaign);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 297,
          "content": "router.get('/campaigns/:id', broadcastController.getCampaign);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/campaigns', broadcastController.createCampaign);\nrouter.get('/campaigns', broadcastController.getCampaigns);",
            "current": "router.get('/campaigns/:id', broadcastController.getCampaign);",
            "after": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 298,
          "content": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/campaigns', broadcastController.getCampaigns);\nrouter.get('/campaigns/:id', broadcastController.getCampaign);",
            "current": "router.post('/campaigns/:id/send', broadcastController.sendCampaign);",
            "after": "\n// Analytics routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 301,
          "content": "router.get('/analytics', broadcastController.getAnalytics);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Analytics routes",
            "current": "router.get('/analytics', broadcastController.getAnalytics);",
            "after": "\n// Customer lists routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 304,
          "content": "router.get('/customer-lists', broadcastController.getCustomerLists);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Customer lists routes",
            "current": "router.get('/customer-lists', broadcastController.getCustomerLists);",
            "after": "\n// Settings routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 307,
          "content": "router.get('/settings', broadcastController.getSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Settings routes",
            "current": "router.get('/settings', broadcastController.getSettings);",
            "after": "router.put('/settings', broadcastController.updateSettings);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\broadcastRoutes.js",
          "line": 308,
          "content": "router.put('/settings', broadcastController.updateSettings);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Settings routes\nrouter.get('/settings', broadcastController.getSettings);",
            "current": "router.put('/settings', broadcastController.updateSettings);",
            "after": "\nmodule.exports = router;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 8,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\companiesRoutes.ts": {
      "totalLines": 351,
      "issues": [
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 17,
          "content": "router.get('/', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * جلب جميع الشركات مع pagination\n */",
            "current": "router.get('/', async (req, res) => {",
            "after": "  try {\n    const {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 116,
          "content": "router.get('/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * جلب تفاصيل شركة محددة\n */",
            "current": "router.get('/:id', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 121,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        users: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 174,
          "content": "router.get('/plans', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * جلب خطط الاشتراك المتاحة\n */",
            "current": "router.get('/plans', async (req, res) => {",
            "after": "  try {\n    const plans = {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 259,
          "content": "router.get('/:id/usage', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * جلب إحصائيات استخدام الشركة\n */",
            "current": "router.get('/:id/usage', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 265,
          "content": "where: { id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 289,
          "content": "prisma.user.count({ where: { companyId: id, isActive: true } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      recentOrders\n    ] = await Promise.all([",
            "current": "      prisma.user.count({ where: { companyId: id, isActive: true } }),",
            "after": "      prisma.customer.count({ where: { companyId: id } }),\n      prisma.product.count({ where: { companyId: id, isActive: true } }),"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 290,
          "content": "prisma.customer.count({ where: { companyId: id } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    ] = await Promise.all([\n      prisma.user.count({ where: { companyId: id, isActive: true } }),",
            "current": "      prisma.customer.count({ where: { companyId: id } }),",
            "after": "      prisma.product.count({ where: { companyId: id, isActive: true } }),\n      prisma.order.count({ "
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\companiesRoutes.ts",
          "line": 291,
          "content": "prisma.product.count({ where: { companyId: id, isActive: true } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.user.count({ where: { companyId: id, isActive: true } }),\n      prisma.customer.count({ where: { companyId: id } }),",
            "current": "      prisma.product.count({ where: { companyId: id, isActive: true } }),",
            "after": "      prisma.order.count({ \n        where: { "
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 11,
        "apiRoutes": 4,
        "authChecks": 0,
        "companyFilters": 7
      }
    },
    "src\\routes\\enhancedOrders.js": {
      "totalLines": 653,
      "issues": [
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 26,
          "content": "router.get('/', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced\n */",
            "current": "router.get('/', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 139,
          "content": "router.post('/migrate-from-files', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/orders-enhanced/migrate-from-files\n */",
            "current": "router.post('/migrate-from-files', async (req, res) => {",
            "after": "    try {\n        const fs = require('fs');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 173,
          "content": "where: { orderNumber: orderData.orderNumber }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "                // تحقق من وجود الطلب\n                const existingOrder = await prisma.order.findUnique({",
            "current": "                    where: { orderNumber: orderData.orderNumber }",
            "after": "                });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 199,
          "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "                            phone: orderData.customerPhone || '',\n                            email: orderData.customerEmail || '',",
            "current": "                            companyId: 'cmdt8nrjq003vufuss47dqc45'",
            "after": "                        }\n                    });"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 209,
          "content": "companyId: 'cmdt8nrjq003vufuss47dqc45', // Company ID الافتراضي",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "                        orderNumber: orderData.orderNumber,\n                        customerId: customer.id,",
            "current": "                        companyId: 'cmdt8nrjq003vufuss47dqc45', // Company ID الافتراضي",
            "after": "                        total: orderData.total || 0,\n                        subtotal: orderData.subtotal || 0,"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 280,
          "content": "router.get('/stats', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced/stats\n */",
            "current": "router.get('/stats', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 311,
          "content": "router.get('/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced/:id\n */",
            "current": "router.get('/:id', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 317,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    \n    const order = await enhancedOrderService.prisma.order.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        customer: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 359,
          "content": "router.post('/', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/orders-enhanced\n */",
            "current": "router.post('/', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 393,
          "content": "router.patch('/:id/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * PATCH /api/v1/orders-enhanced/:id/status\n */",
            "current": "router.patch('/:id/status', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 400,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    \n    const updatedOrder = await enhancedOrderService.prisma.order.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        status,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 435,
          "content": "router.patch('/:id/validation', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * PATCH /api/v1/orders-enhanced/:id/validation\n */",
            "current": "router.patch('/:id/validation', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 442,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    \n    const updatedOrder = await enhancedOrderService.prisma.order.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        validationStatus,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 472,
          "content": "router.delete('/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * DELETE /api/v1/orders-enhanced/:id\n */",
            "current": "router.delete('/:id', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 479,
          "content": "where: { orderId: id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // حذف عناصر الطلب أولاً\n    await enhancedOrderService.prisma.orderItem.deleteMany({",
            "current": "      where: { orderId: id }",
            "after": "    });\n    "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 484,
          "content": "where: { id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // حذف الطلب\n    await enhancedOrderService.prisma.order.delete({",
            "current": "      where: { id }",
            "after": "    });\n    "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 508,
          "content": "router.get('/conversations/stats', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced/conversations/stats\n */",
            "current": "router.get('/conversations/stats', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 539,
          "content": "router.get('/conversations', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced/conversations\n */",
            "current": "router.get('/conversations', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 582,
          "content": "router.get('/compare/systems', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/orders-enhanced/compare\n */",
            "current": "router.get('/compare/systems', async (req, res) => {",
            "after": "  try {\n    const enhancedOrderService = new EnhancedOrderService();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\enhancedOrders.js",
          "line": 623,
          "content": "router.get('/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get single order details",
            "current": "router.get('/:id', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 10,
        "apiRoutes": 10,
        "authChecks": 0,
        "companyFilters": 13
      }
    },
    "src\\routes\\index.ts": {
      "totalLines": 570,
      "issues": [
        {
          "file": "src\\routes\\index.ts",
          "line": 27,
          "content": "environment: process.env.NODE_ENV,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),",
            "current": "      environment: process.env.NODE_ENV,",
            "after": "      version: process.env.npm_package_version || '1.0.0',\n    });"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 28,
          "content": "version: process.env.npm_package_version || '1.0.0',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,",
            "current": "      version: process.env.npm_package_version || '1.0.0',",
            "after": "    });\n  });"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 33,
          "content": "if (process.env.NODE_ENV === 'development') {",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n  // API documentation endpoint (development only)",
            "current": "  if (process.env.NODE_ENV === 'development') {",
            "after": "    app.get('/api/docs', (req, res) => {\n      res.json({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 116,
          "content": "router.get('/auth/status', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "const setupPlaceholderRoutes = (router: Router): void => {\n  // Authentication placeholder",
            "current": "  router.get('/auth/status', (req, res) => {",
            "after": "    res.json({\n      message: 'Authentication service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 131,
          "content": "router.get('/users', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Users placeholder",
            "current": "  router.get('/users', (req, res) => {",
            "after": "    res.json({\n      message: 'User management service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 145,
          "content": "router.get('/companies', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Companies routes",
            "current": "  router.get('/companies', async (req, res) => {",
            "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 246,
          "content": "router.get('/companies/plans', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Company plans",
            "current": "  router.get('/companies/plans', (req, res) => {",
            "after": "    const plans = {\n      BASIC: {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 296,
          "content": "router.get('/companies/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Company details",
            "current": "  router.get('/companies/:id', async (req, res) => {",
            "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 322,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const company = await prisma.company.findUnique({",
            "current": "        where: { id },",
            "after": "        include: {\n          users: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 374,
          "content": "router.get('/customers', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Customers endpoint with proper company isolation",
            "current": "  router.get('/customers', async (req, res) => {",
            "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 388,
          "content": "console.log('👥 Fetching customers for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log('👥 Fetching customers for company:', companyId);",
            "after": "\n      // Get customers with company filter"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 392,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get customers with company filter\n      const customers = await prisma.customer.findMany({",
            "current": "        where: { companyId },",
            "after": "        select: {\n          id: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 430,
          "content": "router.get('/conversations', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Conversations endpoint with proper company isolation",
            "current": "  router.get('/conversations', async (req, res) => {",
            "after": "    try {\n      const { PrismaClient } = await import('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 444,
          "content": "console.log('💬 Fetching conversations for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log('💬 Fetching conversations for company:', companyId);",
            "after": "\n      // Get conversations with company filter"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 448,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get conversations with company filter\n      const conversations = await prisma.conversation.findMany({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          customer: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 512,
          "content": "router.get('/products', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Products placeholder",
            "current": "  router.get('/products', (req, res) => {",
            "after": "    res.json({\n      message: 'Product management service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 527,
          "content": "router.get('/orders', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Orders placeholder",
            "current": "  router.get('/orders', (req, res) => {",
            "after": "    res.json({\n      message: 'Order management service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 542,
          "content": "router.get('/reports', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Reports placeholder",
            "current": "  router.get('/reports', (req, res) => {",
            "after": "    res.json({\n      message: 'Reports and analytics service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\index.ts",
          "line": 556,
          "content": "router.get('/notifications', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n  // Notifications placeholder",
            "current": "  router.get('/notifications', (req, res) => {",
            "after": "    res.json({\n      message: 'Notification service is ready',"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 11,
        "authChecks": 10,
        "companyFilters": 9
      }
    },
    "src\\routes\\intelligentChatRoutes.js": {
      "totalLines": 83,
      "issues": [
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 15,
          "content": "router.post('/intelligent-response', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/ai/intelligent-response\n */",
            "current": "router.post('/intelligent-response', async (req, res) => {",
            "after": "  await intelligentChatController.generateIntelligentResponse(req, res);\n});"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 23,
          "content": "router.get('/intelligent-analytics', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/ai/intelligent-analytics\n */",
            "current": "router.get('/intelligent-analytics', async (req, res) => {",
            "after": "  await intelligentChatController.getSystemAnalytics(req, res);\n});"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 31,
          "content": "router.get('/conversation-memory/:customerId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/ai/conversation-memory/:customerId\n */",
            "current": "router.get('/conversation-memory/:customerId', async (req, res) => {",
            "after": "  await intelligentChatController.getConversationMemory(req, res);\n});"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 39,
          "content": "router.post('/cleanup-memory', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/ai/cleanup-memory\n */",
            "current": "router.post('/cleanup-memory', async (req, res) => {",
            "after": "  await intelligentChatController.cleanupMemory(req, res);\n});"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 47,
          "content": "router.post('/test-intelligent', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/ai/test-intelligent\n */",
            "current": "router.post('/test-intelligent', async (req, res) => {",
            "after": "  await intelligentChatController.testIntelligentSystem(req, res);\n});"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\intelligentChatRoutes.js",
          "line": 55,
          "content": "router.get('/intelligent-info', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/ai/intelligent-info\n */",
            "current": "router.get('/intelligent-info', (req, res) => {",
            "after": "  res.json({\n    success: true,"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 6,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\invoiceRoutes.js": {
      "totalLines": 500,
      "issues": [
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 128,
          "content": "where: { status: 'PAID' },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Calculate total revenue\n    const totalRevenue = await prisma.invoice.aggregate({",
            "current": "      where: { status: 'PAID' },",
            "after": "      _sum: {\n        totalAmount: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 173,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const invoice = await prisma.invoice.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        company: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 228,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 328,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const invoice = await prisma.invoice.update({",
            "current": "      where: { id },",
            "after": "      data: updateData,\n      include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 369,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const invoice = await prisma.invoice.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        company: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 385,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update invoice status to SENT\n    const updatedInvoice = await prisma.invoice.update({",
            "current": "      where: { id },",
            "after": "      data: { status: 'SENT' },\n      include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 438,
          "content": "prisma.invoice.count({ where: { status: 'PAID' } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    ] = await Promise.all([\n      prisma.invoice.count(),",
            "current": "      prisma.invoice.count({ where: { status: 'PAID' } }),",
            "after": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),\n      prisma.invoice.aggregate({"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 439,
          "content": "prisma.invoice.count({ where: { status: 'OVERDUE' } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.invoice.count(),\n      prisma.invoice.count({ where: { status: 'PAID' } }),",
            "current": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),",
            "after": "      prisma.invoice.aggregate({\n        where: { status: 'PAID' },"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\invoiceRoutes.js",
          "line": 441,
          "content": "where: { status: 'PAID' },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      prisma.invoice.count({ where: { status: 'OVERDUE' } }),\n      prisma.invoice.aggregate({",
            "current": "        where: { status: 'PAID' },",
            "after": "        _sum: { totalAmount: true }\n      }),"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 55,
      "patterns": {
        "prismaQueries": 16,
        "apiRoutes": 6,
        "authChecks": 7,
        "companyFilters": 3
      }
    },
    "src\\routes\\monitoringRoutes.js": {
      "totalLines": 1026,
      "issues": [
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 24,
          "content": "router.get('/stats', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على الإحصائيات الكاملة\n */",
            "current": "router.get('/stats', (req, res) => {",
            "after": "  try {\n    console.log('📊 [MONITOR] Stats endpoint called');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 56,
          "content": "router.get('/health', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * فحص سريع لحالة النظام\n */",
            "current": "router.get('/health', (req, res) => {",
            "after": "  try {\n    console.log('🏥 [MONITOR] Health check requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 93,
          "content": "router.get('/errors', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على قائمة الأخطاء الأخيرة\n */",
            "current": "router.get('/errors', (req, res) => {",
            "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 140,
          "content": "router.post('/reset', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إعادة تعيين الإحصائيات\n */",
            "current": "router.post('/reset', (req, res) => {",
            "after": "  try {\n    console.log('🔄 [MONITOR] Reset requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 175,
          "content": "router.get('/performance', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على بيانات الأداء للرسوم البيانية\n */",
            "current": "router.get('/performance', (req, res) => {",
            "after": "  try {\n    const limit = parseInt(req.query.limit) || 100;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 222,
          "content": "router.get('/alerts', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على التنبيهات النشطة\n */",
            "current": "router.get('/alerts', (req, res) => {",
            "after": "  try {\n    const activeAlerts = simpleAlerts.getActiveAlerts();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 254,
          "content": "router.get('/alerts/history', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على تاريخ التنبيهات\n */",
            "current": "router.get('/alerts/history', (req, res) => {",
            "after": "  try {\n    const limit = parseInt(req.query.limit) || 20;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 290,
          "content": "router.post('/alerts/check', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * فحص فوري للنظام وإرسال التنبيهات\n */",
            "current": "router.post('/alerts/check', (req, res) => {",
            "after": "  try {\n    console.log('🔍 [MONITOR] Manual alert check requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 328,
          "content": "router.post('/alerts/:alertId/resolve', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * حل تنبيه يدوياً\n */",
            "current": "router.post('/alerts/:alertId/resolve', (req, res) => {",
            "after": "  try {\n    const { alertId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 368,
          "content": "router.put('/alerts/thresholds', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحديث عتبات التنبيهات\n */",
            "current": "router.put('/alerts/thresholds', (req, res) => {",
            "after": "  try {\n    const newThresholds = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 403,
          "content": "router.post('/test-response', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * اختبار تسجيل رد (للاختبار فقط)\n */",
            "current": "router.post('/test-response', (req, res) => {",
            "after": "  try {\n    const { responseTime = 5000, isEmpty = false, isSuccessful = true } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 441,
          "content": "router.get('/charts', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على بيانات الرسوم البيانية\n */",
            "current": "router.get('/charts', (req, res) => {",
            "after": "  try {\n    const period = req.query.period || 'hourly';"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 487,
          "content": "router.get('/charts/summary', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على ملخص بيانات الرسوم البيانية\n */",
            "current": "router.get('/charts/summary', (req, res) => {",
            "after": "  try {\n    console.log('📊 [MONITOR] Chart summary requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 516,
          "content": "router.post('/charts/save', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * حفظ البيانات التاريخية فوراً (للاختبار)\n */",
            "current": "router.post('/charts/save', (req, res) => {",
            "after": "  try {\n    console.log('📊 [MONITOR] Manual chart data save requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 547,
          "content": "router.get('/alerts/settings', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على إعدادات التنبيهات المتقدمة\n */",
            "current": "router.get('/alerts/settings', (req, res) => {",
            "after": "  try {\n    console.log('⚙️ [MONITOR] Alert settings requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 576,
          "content": "router.put('/alerts/settings', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحديث إعدادات التنبيهات المتقدمة\n */",
            "current": "router.put('/alerts/settings', (req, res) => {",
            "after": "  try {\n    const newSettings = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 611,
          "content": "router.post('/alerts/test-email', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * اختبار إرسال تنبيه عبر البريد الإلكتروني\n */",
            "current": "router.post('/alerts/test-email', (req, res) => {",
            "after": "  try {\n    console.log('📧 [MONITOR] Test email alert requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 662,
          "content": "router.delete('/alerts/suppressed', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * مسح التنبيهات المكبوتة\n */",
            "current": "router.delete('/alerts/suppressed', (req, res) => {",
            "after": "  try {\n    console.log('🔇 [MONITOR] Clear suppressed alerts requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 696,
          "content": "router.get('/reports/daily', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إنشاء تقرير يومي\n */",
            "current": "router.get('/reports/daily', (req, res) => {",
            "after": "  try {\n    const date = req.query.date ? new Date(req.query.date) : new Date();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 727,
          "content": "router.get('/reports/weekly', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إنشاء تقرير أسبوعي\n */",
            "current": "router.get('/reports/weekly', (req, res) => {",
            "after": "  try {\n    const endDate = req.query.endDate ? new Date(req.query.endDate) : new Date();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 758,
          "content": "router.get('/reports/summary', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على ملخص سريع للتقارير\n */",
            "current": "router.get('/reports/summary', (req, res) => {",
            "after": "  try {\n    console.log('📊 [REPORTS] Report summary requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 795,
          "content": "router.post('/reports/export', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تصدير التقرير (محاكاة)\n */",
            "current": "router.post('/reports/export', (req, res) => {",
            "after": "  try {\n    const { type = 'daily', format = 'json', date } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 847,
          "content": "router.post('/quality/rating', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تسجيل تقييم جديد من العميل\n */",
            "current": "router.post('/quality/rating', (req, res) => {",
            "after": "  try {\n    const { messageId, conversationId, customerId, rating, comment } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 905,
          "content": "router.get('/quality/stats', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على إحصائيات الجودة\n */",
            "current": "router.get('/quality/stats', (req, res) => {",
            "after": "  try {\n    const stats = qualityMonitor.getQualityStats();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 932,
          "content": "router.get('/quality/performance', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على مقاييس الأداء المتقدمة\n */",
            "current": "router.get('/quality/performance', (req, res) => {",
            "after": "  try {\n    // console.log('📊 [QUALITY] Performance metrics requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 961,
          "content": "router.get('/quality/insights', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على الرؤى اليومية والاتجاهات\n */",
            "current": "router.get('/quality/insights', (req, res) => {",
            "after": "  try {\n    // console.log('📊 [QUALITY] Daily insights requested');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\monitoringRoutes.js",
          "line": 990,
          "content": "router.post('/quality/response', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تسجيل رد جديد مع مقاييس الأداء\n */",
            "current": "router.post('/quality/response', (req, res) => {",
            "after": "  try {\n    const { messageId, conversationId, metrics } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 27,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\notifications.js": {
      "totalLines": 297,
      "issues": [
        {
          "file": "src\\routes\\notifications.js",
          "line": 26,
          "content": "req.user = null;",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    // لا يوجد token - مستخدم غير مسجل دخول",
            "current": "    req.user = null;",
            "after": "    return next();\n  }"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\notifications.js",
          "line": 37,
          "content": "router.get('/recent', optionalAuth, async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * Get recent notifications for user\n */",
            "current": "router.get('/recent', optionalAuth, async (req, res) => {",
            "after": "  try {\n    // إذا لم يكن المستخدم مسجل دخول، أرجع قائمة فارغة"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 6,
        "apiRoutes": 6,
        "authChecks": 10,
        "companyFilters": 8
      }
    },
    "src\\routes\\orders.js": {
      "totalLines": 397,
      "issues": [
        {
          "file": "src\\routes\\orders.js",
          "line": 10,
          "content": "router.get('/simple', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// الحصول على الطلبات البسيطة",
            "current": "router.get('/simple', async (req, res) => {",
            "after": "  try {\n    const orders = await simpleOrderService.getAllOrdersFromFiles();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 31,
          "content": "router.get('/simple/stats', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إحصائيات الطلبات البسيطة",
            "current": "router.get('/simple/stats', async (req, res) => {",
            "after": "  try {\n    const stats = await simpleOrderService.getSimpleStats();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 51,
          "content": "router.post('/simple/:orderNumber/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// تحديث حالة الطلب البسيط",
            "current": "router.post('/simple/:orderNumber/status', async (req, res) => {",
            "after": "  try {\n    const { orderNumber } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 82,
          "content": "router.get('/', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// الحصول على جميع الطلبات",
            "current": "router.get('/', async (req, res) => {",
            "after": "  try {\n    const { page = 1, limit = 20, status, customerId } = req.query;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 158,
          "content": "router.get('/:orderNumber', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// الحصول على طلب محدد",
            "current": "router.get('/:orderNumber', async (req, res) => {",
            "after": "  try {\n    const { orderNumber } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 187,
          "content": "router.patch('/:orderNumber/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// تحديث حالة الطلب",
            "current": "router.patch('/:orderNumber/status', async (req, res) => {",
            "after": "  try {\n    const { orderNumber } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 226,
          "content": "router.post('/:orderNumber/confirm', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// تأكيد الطلب",
            "current": "router.post('/:orderNumber/confirm', async (req, res) => {",
            "after": "  try {\n    const { orderNumber } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 250,
          "content": "router.post('/:orderNumber/cancel', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إلغاء الطلب",
            "current": "router.post('/:orderNumber/cancel', async (req, res) => {",
            "after": "  try {\n    const { orderNumber } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 274,
          "content": "router.get('/stats/summary', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إحصائيات الطلبات",
            "current": "router.get('/stats/summary', async (req, res) => {",
            "after": "  try {\n    const { days = 30, companyId } = req.query;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 303,
          "content": "router.get('/customer/:customerId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// طلبات العميل",
            "current": "router.get('/customer/:customerId', async (req, res) => {",
            "after": "  try {\n    const { customerId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 326,
          "content": "router.post('/create-simple', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إنشاء طلب بسيط (للاختبار)",
            "current": "router.post('/create-simple', async (req, res) => {",
            "after": "  try {\n    const orderData = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\orders.js",
          "line": 363,
          "content": "router.post('/create', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إنشاء طلب يدوي (للاختبار)",
            "current": "router.post('/create', async (req, res) => {",
            "after": "  try {\n    const orderData = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 2,
        "apiRoutes": 11,
        "authChecks": 0,
        "companyFilters": 7
      }
    },
    "src\\routes\\paymentRoutes.js": {
      "totalLines": 305,
      "issues": [
        {
          "file": "src\\routes\\paymentRoutes.js",
          "line": 162,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const payment = await prisma.payment.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        company: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\paymentRoutes.js",
          "line": 218,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\paymentRoutes.js",
          "line": 232,
          "content": "where: { id: invoiceId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    if (invoiceId) {\n      invoice = await prisma.invoice.findUnique({",
            "current": "        where: { id: invoiceId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\paymentRoutes.js",
          "line": 280,
          "content": "where: { id: invoiceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    if (invoice && amount >= invoice.totalAmount) {\n      await prisma.invoice.update({",
            "current": "        where: { id: invoiceId },",
            "after": "        data: {\n          status: 'PAID',"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 8,
        "apiRoutes": 3,
        "authChecks": 4,
        "companyFilters": 3
      }
    },
    "src\\routes\\prioritySettingsRoutes.js": {
      "totalLines": 281,
      "issues": [
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 18,
          "content": "router.get('/:companyId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على إعدادات الأولوية للشركة\n */",
            "current": "router.get('/:companyId', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 22,
          "content": "console.log(`📊 [API] Getting priority settings for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { companyId } = req.params;\n    ",
            "current": "    console.log(`📊 [API] Getting priority settings for company: ${companyId}`);",
            "after": "    \n    const aiSettings = await prisma.aiSettings.findFirst({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 25,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    \n    const aiSettings = await prisma.aiSettings.findFirst({",
            "current": "      where: { companyId }",
            "after": "    });\n    "
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 63,
          "content": "router.put('/:companyId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تحديث إعدادات الأولوية للشركة\n */",
            "current": "router.put('/:companyId', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 76,
          "content": "console.log(`💾 [API] Updating priority settings for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    } = req.body;\n    ",
            "current": "    console.log(`💾 [API] Updating priority settings for company: ${companyId}`);",
            "after": "    \n    // التحقق من صحة القيم"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 106,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // تحديث الإعدادات\n    const updatedSettings = await prisma.aiSettings.update({",
            "current": "      where: { companyId },",
            "after": "      data: {\n        promptPriority: promptPriority || undefined,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 148,
          "content": "router.post('/:companyId/test-conflict', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * اختبار كشف التعارض\n */",
            "current": "router.post('/:companyId/test-conflict', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 153,
          "content": "console.log(`🧪 [API] Testing conflict detection for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { prompt, patterns } = req.body;\n    ",
            "current": "    console.log(`🧪 [API] Testing conflict detection for company: ${companyId}`);",
            "after": "    \n    if (!prompt || !patterns) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 192,
          "content": "router.get('/:companyId/conflict-reports', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * الحصول على تقارير التعارض\n */",
            "current": "router.get('/:companyId/conflict-reports', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 197,
          "content": "console.log(`📊 [API] Getting conflict reports for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { page = 1, limit = 10, severity, resolved } = req.query;\n    ",
            "current": "    console.log(`📊 [API] Getting conflict reports for company: ${companyId}`);",
            "after": "    \n    const whereClause = { companyId };"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\prioritySettingsRoutes.js",
          "line": 246,
          "content": "router.put('/:companyId/conflict-reports/:reportId/resolve', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * حل تقرير تعارض\n */",
            "current": "router.put('/:companyId/conflict-reports/:reportId/resolve', async (req, res) => {",
            "after": "  try {\n    const { companyId, reportId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 5,
        "authChecks": 0,
        "companyFilters": 19
      }
    },
    "src\\routes\\productRoutes.js": {
      "totalLines": 1436,
      "issues": [
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 23,
          "content": "req.user = {",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "  // Accept mock token from login or development mock token\n  if (token === 'mock-access-token' || token.includes('mock-signature')) {",
            "current": "    req.user = {",
            "after": "      id: 'dev-user',\n      email: 'dev@example.com',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 27,
          "content": "companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "      email: 'dev@example.com',\n      role: 'COMPANY_ADMIN',",
            "current": "      companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
            "after": "    };\n    return next();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 56,
          "content": "console.log('Fetching products from database for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log('Fetching products from database for company:', companyId);",
            "after": "\n      // بناء where clause مع فلترة companyId الإجبارية"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 68,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          company: true,\n          variants: {",
            "current": "            where: { isActive: true },",
            "after": "            orderBy: { sortOrder: 'asc' }\n          }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 141,
          "content": "where: { id: productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get product from database with variants\n      const product = await prisma.product.findUnique({",
            "current": "        where: { id: productId },",
            "after": "        include: {\n          category: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 205,
          "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "\n      // Get user from auth middleware",
            "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
            "after": "\n      // Get categories from database"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 212,
          "content": "where: { companyId: user.companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const categories = await prisma.category.findMany({",
            "current": "        where: { companyId: user.companyId },",
            "after": "        include: {\n          _count: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 252,
          "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "\n      // Get user from auth middleware",
            "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
            "after": "\n      // Create category in database"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 304,
          "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "\n      // Get user from auth middleware",
            "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
            "after": "\n      // Update category in database"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 327,
          "content": "where: { id: id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const category = await prisma.category.update({",
            "current": "        where: { id: id },",
            "after": "        data: {\n          name: name.trim(),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 400,
          "content": "where: { categoryId: duplicate.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          if (duplicate.products.length > 0) {\n            await prisma.product.updateMany({",
            "current": "              where: { categoryId: duplicate.id },",
            "after": "              data: { categoryId: original.id }\n            });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 408,
          "content": "where: { id: duplicate.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // Delete the duplicate category\n          await prisma.category.delete({",
            "current": "            where: { id: duplicate.id }",
            "after": "          });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 462,
          "content": "const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "\n      // Get user from auth middleware",
            "current": "      const user = req.user || { companyId: 'cmd5c0c9y0000ymzdd7wtv7ib' };",
            "after": "\n      // Delete category from database"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 499,
          "content": "where: { id: id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      await prisma.category.delete({",
            "current": "        where: { id: id }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 536,
          "content": "const firstCompany = await prisma.company.findFirst();",
          "description": "Prisma findFirst without filters - CRITICAL DATA EXPOSURE",
          "severity": "HIGH",
          "category": "DATA_EXPOSURE",
          "impact": "HIGH",
          "cwe": "CWE-200",
          "context": {
            "before": "\n      // Get the first company ID from database",
            "current": "      const firstCompany = await prisma.company.findFirst();",
            "after": "      const companyId = firstCompany ? firstCompany.id : null;\n"
          },
          "mitigation": true,
          "riskScore": 3
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 571,
          "content": "const skuExists = await prisma.product.findUnique({ where: { sku } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (sku) {\n        // Ensure SKU is unique if provided",
            "current": "        const skuExists = await prisma.product.findUnique({ where: { sku } });",
            "after": "        if (skuExists) {\n          return res.status(400).json({"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 654,
          "content": "where: { id: updateData.category }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // If not found by name, try to use it as an ID directly\n          const categoryById = await prisma.category.findUnique({",
            "current": "            where: { id: updateData.category }",
            "after": "          });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 677,
          "content": "where: { id: productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update product in database\n      const updatedProduct = await prisma.product.update({",
            "current": "        where: { id: productId },",
            "after": "        data: updateData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 723,
          "content": "where: { id: productId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Delete product from database\n      await prisma.product.delete({",
            "current": "        where: { id: productId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 765,
          "content": "where: { productId: productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get product variants from database\n      const variants = await prisma.productVariant.findMany({",
            "current": "        where: { productId: productId },",
            "after": "        orderBy: { sortOrder: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 800,
          "content": "const variantSkuExists = await prisma.productVariant.findUnique({ where: { sku: variantSku } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (variantSku) {\n        // Ensure variant SKU is unique if provided",
            "current": "        const variantSkuExists = await prisma.productVariant.findUnique({ where: { sku: variantSku } });",
            "after": "        if (variantSkuExists) {\n          return res.status(400).json({"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 904,
          "content": "where: { id: variantId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update variant in database\n      const variant = await prisma.productVariant.update({",
            "current": "        where: { id: variantId },",
            "after": "        data: processedData\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 946,
          "content": "where: { id: variantId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Delete variant from database\n      await prisma.productVariant.delete({",
            "current": "        where: { id: variantId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 978,
          "content": "router.get('/categories', productController.getCategories);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Public routes (no authentication required)",
            "current": "router.get('/categories', productController.getCategories);",
            "after": "router.post('/categories', productController.createCategory);\nrouter.post('/categories/cleanup', productController.cleanupCategories);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 979,
          "content": "router.post('/categories', productController.createCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Public routes (no authentication required)\nrouter.get('/categories', productController.getCategories);",
            "current": "router.post('/categories', productController.createCategory);",
            "after": "router.post('/categories/cleanup', productController.cleanupCategories);\nrouter.put('/categories/:id', productController.updateCategory);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 980,
          "content": "router.post('/categories/cleanup', productController.cleanupCategories);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/categories', productController.getCategories);\nrouter.post('/categories', productController.createCategory);",
            "current": "router.post('/categories/cleanup', productController.cleanupCategories);",
            "after": "router.put('/categories/:id', productController.updateCategory);\nrouter.delete('/categories/:id', productController.deleteCategory);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 981,
          "content": "router.put('/categories/:id', productController.updateCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/categories', productController.createCategory);\nrouter.post('/categories/cleanup', productController.cleanupCategories);",
            "current": "router.put('/categories/:id', productController.updateCategory);",
            "after": "router.delete('/categories/:id', productController.deleteCategory);\nrouter.get('/', productController.getProducts);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 982,
          "content": "router.delete('/categories/:id', productController.deleteCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/categories/cleanup', productController.cleanupCategories);\nrouter.put('/categories/:id', productController.updateCategory);",
            "current": "router.delete('/categories/:id', productController.deleteCategory);",
            "after": "router.get('/', productController.getProducts);\nrouter.post('/', productController.createProduct);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 983,
          "content": "router.get('/', productController.getProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.put('/categories/:id', productController.updateCategory);\nrouter.delete('/categories/:id', productController.deleteCategory);",
            "current": "router.get('/', productController.getProducts);",
            "after": "router.post('/', productController.createProduct);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 984,
          "content": "router.post('/', productController.createProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.delete('/categories/:id', productController.deleteCategory);\nrouter.get('/', productController.getProducts);",
            "current": "router.post('/', productController.createProduct);",
            "after": "\n// Product Variants routes (public for testing) - specific routes first"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 987,
          "content": "router.get('/:id/variants', productController.getProductVariants);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Product Variants routes (public for testing) - specific routes first",
            "current": "router.get('/:id/variants', productController.getProductVariants);",
            "after": "router.post('/:id/variants', productController.createProductVariant);\nrouter.patch('/variants/:variantId', productController.updateProductVariant);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 988,
          "content": "router.post('/:id/variants', productController.createProductVariant);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Product Variants routes (public for testing) - specific routes first\nrouter.get('/:id/variants', productController.getProductVariants);",
            "current": "router.post('/:id/variants', productController.createProductVariant);",
            "after": "router.patch('/variants/:variantId', productController.updateProductVariant);\nrouter.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 989,
          "content": "router.patch('/variants/:variantId', productController.updateProductVariant);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/:id/variants', productController.getProductVariants);\nrouter.post('/:id/variants', productController.createProductVariant);",
            "current": "router.patch('/variants/:variantId', productController.updateProductVariant);",
            "after": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT\nrouter.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 990,
          "content": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/:id/variants', productController.createProductVariant);\nrouter.patch('/variants/:variantId', productController.updateProductVariant);",
            "current": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
            "after": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path\nrouter.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 991,
          "content": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.patch('/variants/:variantId', productController.updateProductVariant);\nrouter.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT",
            "current": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
            "after": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT\nrouter.delete('/variants/:variantId', productController.deleteProductVariant);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 992,
          "content": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.put('/variants/:variantId', productController.updateProductVariant); // Support both PATCH and PUT\nrouter.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path",
            "current": "router.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
            "after": "router.delete('/variants/:variantId', productController.deleteProductVariant);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 993,
          "content": "router.delete('/variants/:variantId', productController.deleteProductVariant);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.patch('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path\nrouter.put('/:id/variants/:variantId', productController.updateProductVariant); // Alternative path with PUT",
            "current": "router.delete('/variants/:variantId', productController.deleteProductVariant);",
            "after": "\n// Image management endpoints (public for testing)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 998,
          "content": "router.post('/:id/images', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Add image to product by URL",
            "current": "router.post('/:id/images', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1029,
          "content": "where: { id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
            "current": "      where: { id }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1063,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update product\n    const updatedProduct = await prisma.product.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        images: JSON.stringify(currentImages)"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1106,
          "content": "router.post('/:id/variants/:variantId/images', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Add image to variant by URL",
            "current": "router.post('/:id/variants/:variantId/images', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1137,
          "content": "where: { id: variantId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get current variant\n    const variant = await prisma.productVariant.findUnique({",
            "current": "      where: { id: variantId },",
            "after": "      include: { product: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1138,
          "content": "include: { product: true }",
          "description": "Prisma include without isolation verification",
          "severity": "MEDIUM",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "    const variant = await prisma.productVariant.findUnique({\n      where: { id: variantId },",
            "current": "      include: { product: true }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1172,
          "content": "where: { id: variantId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update variant\n    const updatedVariant = await prisma.productVariant.update({",
            "current": "      where: { id: variantId },",
            "after": "      data: {\n        images: JSON.stringify(currentImages)"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1206,
          "content": "router.delete('/:id/images', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Delete image from product endpoint",
            "current": "router.delete('/:id/images', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1227,
          "content": "where: { id: id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
            "current": "      where: { id: id }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1271,
          "content": "where: { id: id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update product in database\n    const updatedProduct = await prisma.product.update({",
            "current": "      where: { id: id },",
            "after": "      data: {\n        images: JSON.stringify(currentImages)"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1314,
          "content": "router.post('/:id/images/url', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Image upload from URL endpoint",
            "current": "router.post('/:id/images/url', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1348,
          "content": "where: { id: id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get current product\n    const product = await prisma.product.findUnique({",
            "current": "      where: { id: id }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1383,
          "content": "where: { id: id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update product in database\n    const updatedProduct = await prisma.product.update({",
            "current": "      where: { id: id },",
            "after": "      data: {\n        images: JSON.stringify(currentImages)"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1426,
          "content": "router.get('/:id', productController.getProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Public product details route (no authentication required)",
            "current": "router.get('/:id', productController.getProduct);",
            "after": "\n// Authenticated routes"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1432,
          "content": "router.patch('/:id', productController.updateProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Routes that require authentication - specific routes before generic",
            "current": "router.patch('/:id', productController.updateProduct);",
            "after": "router.delete('/:id', productController.deleteProduct);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.js",
          "line": 1433,
          "content": "router.delete('/:id', productController.deleteProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Routes that require authentication - specific routes before generic\nrouter.patch('/:id', productController.updateProduct);",
            "current": "router.delete('/:id', productController.deleteProduct);",
            "after": "\nmodule.exports = router;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 34,
        "apiRoutes": 18,
        "authChecks": 0,
        "companyFilters": 20
      }
    },
    "src\\routes\\productRoutes.ts": {
      "totalLines": 34,
      "issues": [
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 14,
          "content": "router.get('/', productController.getProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Routes that require authentication (specific routes first)",
            "current": "router.get('/', productController.getProducts);",
            "after": "router.get('/categories', productController.getCategories);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 15,
          "content": "router.get('/categories', productController.getCategories);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Routes that require authentication (specific routes first)\nrouter.get('/', productController.getProducts);",
            "current": "router.get('/categories', productController.getCategories);",
            "after": "\n// Admin & Manager routes (specific routes before parameterized ones)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 18,
          "content": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Admin & Manager routes (specific routes before parameterized ones)",
            "current": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
            "after": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);\nrouter.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 19,
          "content": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Admin & Manager routes (specific routes before parameterized ones)\nrouter.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);",
            "current": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
            "after": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);\nrouter.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 20,
          "content": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), upload.array('images', 5), productController.createProduct);\nrouter.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);",
            "current": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
            "after": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);\nrouter.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 21,
          "content": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/categories', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.createCategory);\nrouter.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);",
            "current": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
            "after": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);\nrouter.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 22,
          "content": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.post('/categories/cleanup', requireRole(UserRole.COMPANY_ADMIN), productController.cleanupCategories);\nrouter.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);",
            "current": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
            "after": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);\nrouter.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 23,
          "content": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.put('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateCategory);\nrouter.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);",
            "current": "router.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
            "after": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 24,
          "content": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.delete('/categories/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteCategory);\nrouter.put('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateProduct);",
            "current": "router.delete('/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.deleteProduct);",
            "after": "\n// Public routes (parameterized routes last)"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 27,
          "content": "router.get('/:id', productController.getProduct);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Public routes (parameterized routes last)",
            "current": "router.get('/:id', productController.getProduct);",
            "after": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);\nrouter.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 28,
          "content": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "// Public routes (parameterized routes last)\nrouter.get('/:id', productController.getProduct);",
            "current": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
            "after": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);\nrouter.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 29,
          "content": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/:id', productController.getProduct);\nrouter.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);",
            "current": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
            "after": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);\nrouter.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 30,
          "content": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.put('/inventory/:id', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.updateInventory);\nrouter.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);",
            "current": "router.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
            "after": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);\n"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\productRoutes.ts",
          "line": 31,
          "content": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "router.get('/low-stock', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getLowStockProducts);\nrouter.get('/analytics', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.getProductAnalytics);",
            "current": "router.get('/export', requireRole(UserRole.COMPANY_ADMIN, UserRole.MANAGER), productController.exportProducts);",
            "after": "\nexport default router;"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 14,
        "authChecks": 2,
        "companyFilters": 0
      }
    },
    "src\\routes\\settingsRoutes.js": {
      "totalLines": 417,
      "issues": [
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 18,
          "content": "req.user = {",
          "description": "Manual user assignment - potential authentication bypass",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-287",
          "context": {
            "before": "\n  if (token === 'mock-access-token' || token.includes('mock-signature')) {",
            "current": "    req.user = {",
            "after": "      id: 'dev-user',\n      email: 'dev@example.com',"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 22,
          "content": "companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "      email: 'dev@example.com',\n      role: 'COMPANY_ADMIN',",
            "current": "      companyId: 'cmd5c0c9y0000ymzdd7wtv7ib'",
            "after": "    };\n    return next();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 34,
          "content": "router.get('/company', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get company settings",
            "current": "router.get('/company', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 42,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 57,
          "content": "console.log('Error parsing company settings:', error);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      settings = company.settings ? JSON.parse(company.settings) : {};\n    } catch (error) {",
            "current": "      console.log('Error parsing company settings:', error);",
            "after": "      settings = {};\n    }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 114,
          "content": "router.put('/company', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Update company settings",
            "current": "router.put('/company', async (req, res) => {",
            "after": "  try {\n    const { PrismaClient } = require('@prisma/client');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 122,
          "content": "console.log('Updating company settings:', companyId, newSettings);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const newSettings = req.body.settings || {};\n",
            "current": "    console.log('Updating company settings:', companyId, newSettings);",
            "after": "\n    // Get current company"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 126,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get current company\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 150,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update company\n    const updatedCompany = await prisma.company.update({",
            "current": "      where: { id: companyId },",
            "after": "      data: {\n        settings: JSON.stringify(updatedSettings)"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 181,
          "content": "router.get('/currencies', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Currency presets",
            "current": "router.get('/currencies', (req, res) => {",
            "after": "  const currencies = [\n    {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 216,
          "content": "router.get('/ai', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Get AI settings (with database fallback)",
            "current": "router.get('/ai', async (req, res) => {",
            "after": "  try {\n    console.log('📥 [AI-SETTINGS] GET request received');"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 230,
          "content": "console.log('🏢 [AI-SETTINGS] Loading settings for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    const companyId = req.user.companyId;",
            "current": "    console.log('🏢 [AI-SETTINGS] Loading settings for company:', companyId);",
            "after": "\n    let settings = {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 245,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
            "current": "        where: { companyId },",
            "after": "        select: {\n          qualityEvaluationEnabled: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 321,
          "content": "router.put('/ai', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Update AI settings (with database fallback)",
            "current": "router.put('/ai', async (req, res) => {",
            "after": "  try {\n    console.log('📥 [AI-SETTINGS] Received update request:', req.body);"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 335,
          "content": "console.log('🏢 [AI-SETTINGS] Updating settings for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    const companyId = req.user.companyId;",
            "current": "    console.log('🏢 [AI-SETTINGS] Updating settings for company:', companyId);",
            "after": "\n    const { qualityEvaluationEnabled, autoReplyEnabled, confidenceThreshold, multimodalEnabled, ragEnabled } = req.body;"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\settingsRoutes.js",
          "line": 349,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const aiSettings = await prisma.aiSettings.upsert({",
            "current": "        where: { companyId },",
            "after": "        update: updateData,\n        create: {"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 5,
        "authChecks": 0,
        "companyFilters": 18
      }
    },
    "src\\routes\\subscriptionRoutes.js": {
      "totalLines": 650,
      "issues": [
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 108,
          "content": "where: { status: 'ACTIVE' },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Calculate revenue\n    const revenueStats = await prisma.subscription.aggregate({",
            "current": "      where: { status: 'ACTIVE' },",
            "after": "      _sum: {\n        price: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 153,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const subscription = await prisma.subscription.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        company: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 212,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Validate company exists\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 261,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update company plan\n    await prisma.company.update({",
            "current": "      where: { id: companyId },",
            "after": "      data: { plan: planType }\n    });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 300,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Check if subscription exists\n    const existingSubscription = await prisma.subscription.findUnique({",
            "current": "      where: { id },",
            "after": "      include: { company: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 301,
          "content": "include: { company: true }",
          "description": "Prisma include without isolation verification",
          "severity": "LOW",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "    const existingSubscription = await prisma.subscription.findUnique({\n      where: { id },",
            "current": "      include: { company: true }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 318,
          "content": "where: { id: existingSubscription.companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update company plan as well\n      await prisma.company.update({",
            "current": "        where: { id: existingSubscription.companyId },",
            "after": "        data: { plan: planType }\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 331,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update subscription\n    const subscription = await prisma.subscription.update({",
            "current": "      where: { id },",
            "after": "      data: updateData,\n      include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 376,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const subscription = await prisma.subscription.findUnique({",
            "current": "      where: { id },",
            "after": "      include: {\n        company: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 436,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update subscription\n    const updatedSubscription = await prisma.subscription.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        status: 'ACTIVE',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 520,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const subscription = await prisma.subscription.findUnique({",
            "current": "      where: { id },",
            "after": "      include: { company: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 521,
          "content": "include: { company: true }",
          "description": "Prisma include without isolation verification",
          "severity": "LOW",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "    const subscription = await prisma.subscription.findUnique({\n      where: { id },",
            "current": "      include: { company: true }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 551,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const updatedSubscription = await prisma.subscription.update({",
            "current": "      where: { id },",
            "after": "      data: updateData,\n      include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 591,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const subscription = await prisma.subscription.findUnique({",
            "current": "      where: { id },",
            "after": "      include: { company: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 592,
          "content": "include: { company: true }",
          "description": "Prisma include without isolation verification",
          "severity": "LOW",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "    const subscription = await prisma.subscription.findUnique({\n      where: { id },",
            "current": "      include: { company: true }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\subscriptionRoutes.js",
          "line": 614,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update subscription\n    const updatedSubscription = await prisma.subscription.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        status: 'ACTIVE',"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 18,
        "apiRoutes": 7,
        "authChecks": 8,
        "companyFilters": 6
      }
    },
    "src\\routes\\successLearning.js": {
      "totalLines": 1480,
      "issues": [
        {
          "file": "src\\routes\\successLearning.js",
          "line": 28,
          "content": "router.get('/analyze-patterns', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/analyze-patterns\n */",
            "current": "router.get('/analyze-patterns', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 48,
          "content": "console.log(`🔍 [API] Analyzing success patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const patternTypesArray = patternTypes.split(',');\n",
            "current": "    console.log(`🔍 [API] Analyzing success patterns for company: ${companyId}`);",
            "after": "\n    const result = await successAnalyzer.analyzeSuccessPatterns(companyId, {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 99,
          "content": "router.get('/detect-patterns', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/detect-patterns\n */",
            "current": "router.get('/detect-patterns', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 115,
          "content": "console.log(`🔍 [API] Detecting new patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    } = req.query;\n",
            "current": "    console.log(`🔍 [API] Detecting new patterns for company: ${companyId}`);",
            "after": "\n    const result = await patternDetector.detectNewPatterns(companyId, parseInt(timeRange));"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 147,
          "content": "router.post('/record-outcome', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/record-outcome\n */",
            "current": "router.post('/record-outcome', async (req, res) => {",
            "after": "  try {\n    const outcomeData = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 183,
          "content": "router.get('/patterns', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/patterns\n */",
            "current": "router.get('/patterns', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 274,
          "content": "router.put('/patterns/:id/approve', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * PUT /api/v1/success-learning/patterns/:id/approve\n */",
            "current": "router.put('/patterns/:id/approve', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 280,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const pattern = await prisma.successPattern.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        isApproved: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 310,
          "content": "router.put('/patterns/:id/reject', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * PUT /api/v1/success-learning/patterns/:id/reject\n */",
            "current": "router.put('/patterns/:id/reject', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 315,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const pattern = await prisma.successPattern.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        isActive: false,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 344,
          "content": "router.put('/patterns/:id/unapprove', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * PUT /api/v1/success-learning/patterns/:id/unapprove\n */",
            "current": "router.put('/patterns/:id/unapprove', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 351,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // التحقق من وجود النمط وأنه معتمد\n    const existingPattern = await prisma.successPattern.findUnique({",
            "current": "      where: { id },",
            "after": "      select: { id: true, isApproved: true, description: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 371,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // إيقاف الاعتماد مع الاحتفاظ بالنشاط\n    const pattern = await prisma.successPattern.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        isApproved: false,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 407,
          "content": "router.get('/outcome-stats', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/outcome-stats\n */",
            "current": "router.get('/outcome-stats', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 484,
          "content": "router.get('/response-effectiveness', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/response-effectiveness\n */",
            "current": "router.get('/response-effectiveness', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 549,
          "content": "router.post('/run-analysis', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/run-analysis\n */",
            "current": "router.post('/run-analysis', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 565,
          "content": "console.log(`🚀 [API] Running comprehensive analysis for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    } = req.body;\n",
            "current": "    console.log(`🚀 [API] Running comprehensive analysis for company: ${companyId}`);",
            "after": "\n    // تشغيل التحليل الشامل"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 599,
          "content": "router.get('/export', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/export\n */",
            "current": "router.get('/export', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 616,
          "content": "console.log(`📤 [API] Exporting data for company: ${companyId}, format: ${format}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    } = req.query;\n",
            "current": "    console.log(`📤 [API] Exporting data for company: ${companyId}, format: ${format}`);",
            "after": "\n    // جلب الأنماط"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 664,
          "content": "router.get('/pattern-performance', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/pattern-performance\n */",
            "current": "router.get('/pattern-performance', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 676,
          "content": "console.log(`📊 [API] Getting pattern performance for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`📊 [API] Getting pattern performance for company: ${companyId}`);",
            "after": "\n    // جلب إحصائيات الأداء"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 680,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // جلب إحصائيات الأداء\n    const performance = await prisma.patternPerformance.findMany({",
            "current": "      where: { companyId },",
            "after": "      include: {\n        pattern: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 731,
          "content": "router.get('/pattern-usage', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/pattern-usage\n */",
            "current": "router.get('/pattern-usage', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 748,
          "content": "console.log(`📈 [API] Getting pattern usage stats for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    } = req.query;\n",
            "current": "    console.log(`📈 [API] Getting pattern usage stats for company: ${companyId}`);",
            "after": "\n    const startDate = new Date();"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 826,
          "content": "router.post('/test-pattern', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/test-pattern\n */",
            "current": "router.post('/test-pattern', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 856,
          "content": "where: { id: patternId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // جلب النمط\n    const pattern = await prisma.successPattern.findUnique({",
            "current": "      where: { id: patternId }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 911,
          "content": "router.post('/analyze-patterns', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// تحليل أنماط جديدة",
            "current": "router.post('/analyze-patterns', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 923,
          "content": "console.log(`🔍 [API] Analyzing new patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`🔍 [API] Analyzing new patterns for company: ${companyId}`);",
            "after": "\n    // استدعاء خدمة التعلم المستمر لاكتشاف أنماط جديدة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 947,
          "content": "router.post('/patterns/:patternId/approve', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// اعتماد نمط",
            "current": "router.post('/patterns/:patternId/approve', async (req, res) => {",
            "after": "  try {\n    const { patternId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 955,
          "content": "where: { id: patternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // تحديث النمط في قاعدة البيانات\n    const updatedPattern = await prisma.successPattern.update({",
            "current": "      where: { id: patternId },",
            "after": "      data: {\n        isApproved: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 982,
          "content": "router.post('/cleanup-patterns/:companyId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تنظيف الأنماط المكررة والمتشابهة\n */",
            "current": "router.post('/cleanup-patterns/:companyId', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 987,
          "content": "console.log(`🧹 [API] Starting pattern cleanup for company: ${companyId} (dryRun: ${dryRun})`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { dryRun = false } = req.body;\n",
            "current": "    console.log(`🧹 [API] Starting pattern cleanup for company: ${companyId} (dryRun: ${dryRun})`);",
            "after": "\n    if (dryRun) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1036,
          "content": "router.get('/cleanup-stats/:companyId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * إحصائيات الأنماط والتكرارات\n */",
            "current": "router.get('/cleanup-stats/:companyId', async (req, res) => {",
            "after": "  try {\n    const { companyId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1040,
          "content": "console.log(`📊 [API] Getting cleanup stats for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { companyId } = req.params;\n",
            "current": "    console.log(`📊 [API] Getting cleanup stats for company: ${companyId}`);",
            "after": "\n    const stats = await patternCleanup.getCleanupStats(companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1080,
          "content": "router.get('/maintenance/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * حالة نظام الصيانة الدورية\n */",
            "current": "router.get('/maintenance/status', async (req, res) => {",
            "after": "  try {\n    const stats = scheduledMaintenance.getStats();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1103,
          "content": "router.post('/maintenance/run', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * تشغيل صيانة فورية\n */",
            "current": "router.post('/maintenance/run', async (req, res) => {",
            "after": "  try {\n    const { type = 'full' } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1131,
          "content": "router.post('/maintenance/start', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * بدء نظام الصيانة الدورية\n */",
            "current": "router.post('/maintenance/start', async (req, res) => {",
            "after": "  try {\n    scheduledMaintenance.start();"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1160,
          "content": "router.post('/system/enable', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/system/enable\n */",
            "current": "router.post('/system/enable', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1172,
          "content": "console.log(`🚀 [API] Enabling pattern management system for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`🚀 [API] Enabling pattern management system for company: ${companyId}`);",
            "after": "\n    // تفعيل جميع الأنماط المعتمدة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1193,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // حفظ الحالة في metadata أو جدول منفصل\n    await prisma.company.update({",
            "current": "      where: { id: companyId },",
            "after": "      data: {\n        settings: JSON.stringify({"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1228,
          "content": "router.post('/system/disable', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/system/disable\n */",
            "current": "router.post('/system/disable', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1242,
          "content": "console.log(`🛑 [API] Disabling pattern management system for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { reason = 'تم الإيقاف يدوياً' } = req.body;\n",
            "current": "    console.log(`🛑 [API] Disabling pattern management system for company: ${companyId}`);",
            "after": "\n    // إيقاف جميع الأنماط"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1246,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // إيقاف جميع الأنماط\n    const disabledPatterns = await prisma.successPattern.updateMany({",
            "current": "      where: { companyId },",
            "after": "      data: { isActive: false }\n    });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1284,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // حفظ الحالة\n    await prisma.company.update({",
            "current": "      where: { id: companyId },",
            "after": "      data: {\n        settings: JSON.stringify({"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1320,
          "content": "router.get('/system/status', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * GET /api/v1/success-learning/system/status\n */",
            "current": "router.get('/system/status', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1332,
          "content": "console.log(`📊 [API] Getting pattern system status for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`📊 [API] Getting pattern system status for company: ${companyId}`);",
            "after": "\n    // جلب معلومات الشركة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1336,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // جلب معلومات الشركة\n    const company = await prisma.company.findUnique({",
            "current": "      where: { id: companyId },",
            "after": "      select: { settings: true }\n    });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1349,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // إحصائيات الأنماط\n    const totalPatterns = await prisma.successPattern.count({",
            "current": "      where: { companyId }",
            "after": "    });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1397,
          "content": "router.post('/cleanup-patterns', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": " * POST /api/v1/success-learning/cleanup-patterns\n */",
            "current": "router.post('/cleanup-patterns', async (req, res) => {",
            "after": "  try {\n    // استخدام companyId من المستخدم المصادق عليه"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1411,
          "content": "console.log(`🧹 [API] Cleaning up duplicate patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    const { dryRun = false } = req.body;\n",
            "current": "    console.log(`🧹 [API] Cleaning up duplicate patterns for company: ${companyId}`);",
            "after": "\n    // البحث عن الأنماط المكررة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1416,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    const duplicatePatterns = await prisma.detectedPattern.groupBy({\n      by: ['patternType', 'companyId'],",
            "current": "      where: { companyId },",
            "after": "      having: {\n        id: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\routes\\successLearning.js",
          "line": 1447,
          "content": "where: { id: pattern.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        for (const pattern of toDelete) {\n          await prisma.detectedPattern.delete({",
            "current": "            where: { id: pattern.id }",
            "after": "          });\n          patternsDeleted++;"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 27,
        "apiRoutes": 25,
        "authChecks": 0,
        "companyFilters": 80
      }
    },
    "src\\routes\\uploadRoutes.js": {
      "totalLines": 235,
      "issues": [
        {
          "file": "src\\routes\\uploadRoutes.js",
          "line": 58,
          "content": "router.post('/single', upload.single('image'), (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Upload single image",
            "current": "router.post('/single', upload.single('image'), (req, res) => {",
            "after": "  try {\n    if (!req.file) {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\uploadRoutes.js",
          "line": 91,
          "content": "router.post('/multiple', upload.array('images', 10), (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Upload multiple images",
            "current": "router.post('/multiple', upload.array('images', 10), (req, res) => {",
            "after": "  try {\n    if (!req.files || req.files.length === 0) {"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\uploadRoutes.js",
          "line": 127,
          "content": "router.delete('/file/:filename', (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Delete image",
            "current": "router.delete('/file/:filename', (req, res) => {",
            "after": "  try {\n    const filename = req.params.filename;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\uploadRoutes.js",
          "line": 201,
          "content": "router.post('/conversation-image', conversationUpload.single('image'), (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// Upload image for conversation",
            "current": "router.post('/conversation-image', conversationUpload.single('image'), (req, res) => {",
            "after": "  try {\n    if (!req.file) {"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 4,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\routes\\walletPayment.js": {
      "totalLines": 406,
      "issues": [
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 40,
          "content": "router.get('/wallet-numbers', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// جلب أرقام المحافظ النشطة",
            "current": "router.get('/wallet-numbers', async (req, res) => {",
            "after": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 43,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({",
            "current": "      where: { isActive: true },",
            "after": "      orderBy: { createdAt: 'asc' }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 61,
          "content": "router.get('/invoice/:invoiceId', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// جلب تفاصيل فاتورة للدفع",
            "current": "router.get('/invoice/:invoiceId', async (req, res) => {",
            "after": "  try {\n    const { invoiceId } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 66,
          "content": "where: { id: invoiceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const invoice = await prisma.invoice.findUnique({",
            "current": "      where: { id: invoiceId },",
            "after": "      include: {\n        company: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 111,
          "content": "router.post('/submit-receipt', upload.single('receipt'), async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// رفع إيصال الدفع",
            "current": "router.post('/submit-receipt', upload.single('receipt'), async (req, res) => {",
            "after": "  try {\n    const { invoiceId, walletNumberId } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 124,
          "content": "where: { id: invoiceId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // التحقق من وجود الفاتورة\n    const invoice = await prisma.invoice.findUnique({",
            "current": "      where: { id: invoiceId }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 143,
          "content": "where: { id: walletNumberId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // التحقق من وجود رقم المحفظة\n    const walletNumber = await prisma.walletNumber.findUnique({",
            "current": "      where: { id: walletNumberId }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 180,
          "content": "router.get('/admin/wallet-numbers', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// جلب جميع أرقام المحافظ (للإدارة)",
            "current": "router.get('/admin/wallet-numbers', async (req, res) => {",
            "after": "  try {\n    const walletNumbers = await prisma.walletNumber.findMany({"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 200,
          "content": "router.post('/admin/wallet-numbers', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// إضافة رقم محفظة جديد",
            "current": "router.post('/admin/wallet-numbers', async (req, res) => {",
            "after": "  try {\n    const { name, number, icon, color } = req.body;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 229,
          "content": "router.put('/admin/wallet-numbers/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// تحديث رقم محفظة",
            "current": "router.put('/admin/wallet-numbers/:id', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 235,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const walletNumber = await prisma.walletNumber.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        name,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 260,
          "content": "router.delete('/admin/wallet-numbers/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// حذف رقم محفظة",
            "current": "router.delete('/admin/wallet-numbers/:id', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 265,
          "content": "where: { id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    await prisma.walletNumber.delete({",
            "current": "      where: { id }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 282,
          "content": "router.get('/admin/pending-receipts', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// جلب الإيصالات في الانتظار",
            "current": "router.get('/admin/pending-receipts', async (req, res) => {",
            "after": "  try {\n    const { page = 1, limit = 10 } = req.query;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 288,
          "content": "where: { status: 'PENDING' },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const receipts = await prisma.paymentReceipt.findMany({",
            "current": "      where: { status: 'PENDING' },",
            "after": "      include: {\n        invoice: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 308,
          "content": "where: { status: 'PENDING' }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const total = await prisma.paymentReceipt.count({",
            "current": "      where: { status: 'PENDING' }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 331,
          "content": "router.post('/admin/review-receipt/:id', async (req, res) => {",
          "description": "API route without authentication middleware",
          "severity": "HIGH",
          "category": "AUTHENTICATION",
          "impact": "HIGH",
          "cwe": "CWE-306",
          "context": {
            "before": "\n// مراجعة إيصال الدفع",
            "current": "router.post('/admin/review-receipt/:id', async (req, res) => {",
            "after": "  try {\n    const { id } = req.params;"
          },
          "mitigation": false,
          "riskScore": 7
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 337,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n    const receipt = await prisma.paymentReceipt.findUnique({",
            "current": "      where: { id },",
            "after": "      include: { invoice: true }\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 338,
          "content": "include: { invoice: true }",
          "description": "Prisma include without isolation verification",
          "severity": "MEDIUM",
          "category": "DATA_EXPOSURE",
          "impact": "MEDIUM",
          "cwe": "CWE-200",
          "context": {
            "before": "    const receipt = await prisma.paymentReceipt.findUnique({\n      where: { id },",
            "current": "      include: { invoice: true }",
            "after": "    });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 359,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // تحديث حالة الإيصال\n    await prisma.paymentReceipt.update({",
            "current": "      where: { id },",
            "after": "      data: {\n        status: newStatus,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\routes\\walletPayment.js",
          "line": 371,
          "content": "where: { id: receipt.invoiceId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    if (action === 'approve') {\n      await prisma.invoice.update({",
            "current": "        where: { id: receipt.invoiceId },",
            "after": "        data: {\n          status: 'PAID',"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "HIGH",
      "isolationScore": 20,
      "patterns": {
        "prismaQueries": 15,
        "apiRoutes": 9,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\scripts\\migrateOrders.js": {
      "totalLines": 136,
      "issues": [
        {
          "file": "src\\scripts\\migrateOrders.js",
          "line": 31,
          "content": "where: { orderNumber: orderData.orderNumber }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "            // تحقق من وجود الطلب في قاعدة البيانات\n            const existingOrder = await prisma.order.findUnique({",
            "current": "                where: { orderNumber: orderData.orderNumber }",
            "after": "            });\n            "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\scripts\\migrateOrders.js",
          "line": 57,
          "content": "companyId: 'cmdt8nrjq003vufuss47dqc45' // Company ID الافتراضي",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "                        phone: orderData.customerPhone || '',\n                        email: orderData.customerEmail || '',",
            "current": "                        companyId: 'cmdt8nrjq003vufuss47dqc45' // Company ID الافتراضي",
            "after": "                    }\n                });"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\server-simple.js": {
      "totalLines": 88,
      "issues": [
        {
          "file": "src\\server-simple.js",
          "line": 6,
          "content": "const PORT = process.env.PORT || 3001;",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\nconst app = express();",
            "current": "const PORT = process.env.PORT || 3001;",
            "after": "\n// Middleware"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\adminTaskAutomationService.js": {
      "totalLines": 737,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 18
      }
    },
    "src\\services\\advancedNotificationService.js": {
      "totalLines": 739,
      "issues": [
        {
          "file": "src\\services\\advancedNotificationService.js",
          "line": 439,
          "content": "console.log(`Sending push notification to user ${notification.userId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async sendPushNotification(notification, channel, subscription) {\n    // Mock push notification sending",
            "current": "    console.log(`Sending push notification to user ${notification.userId}`);",
            "after": "    \n    return {"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 2,
        "companyFilters": 15
      }
    },
    "src\\services\\advancedProductService.js": {
      "totalLines": 734,
      "issues": [
        {
          "file": "src\\services\\advancedProductService.js",
          "line": 13,
          "content": "this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  constructor() {\n    this.prisma = new PrismaClient();",
            "current": "    this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\advancedProductService.js",
          "line": 66,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const aiSettings = await this.prisma.aiSettings.findUnique({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          company: {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedProductService.js",
          "line": 127,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if company exists first\n      const company = await this.prisma.company.findUnique({",
            "current": "        where: { id: companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedProductService.js",
          "line": 138,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await this.prisma.aiSettings.upsert({",
            "current": "        where: { companyId },",
            "after": "        update: {\n          defaultProductId: defaultProductId || null,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedProductService.js",
          "line": 210,
          "content": "where: { id: customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (customerId) {\n        const customer = await this.prisma.customer.findUnique({",
            "current": "          where: { id: customerId },",
            "after": "          include: {\n            orders: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 7,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 18
      }
    },
    "src\\services\\advancedPromptService.js": {
      "totalLines": 585,
      "issues": [
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 197,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // First, verify that the company exists\n      const company = await this.prisma.company.findUnique({",
            "current": "        where: { id: companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 210,
          "content": "console.log('Looking for AI settings for company:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      let aiSettings = null;\n      try {",
            "current": "        console.log('Looking for AI settings for company:', companyId);",
            "after": "        aiSettings = await this.prisma.aiSettings.findFirst({\n          where: { companyId }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 212,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        console.log('Looking for AI settings for company:', companyId);\n        aiSettings = await this.prisma.aiSettings.findFirst({",
            "current": "          where: { companyId }",
            "after": "        });\n        console.log('Found AI settings:', aiSettings);"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 334,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // First, verify that the company exists\n      const company = await this.prisma.company.findUnique({",
            "current": "        where: { id: companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 345,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      try {\n        aiSettings = await this.prisma.aiSettings.upsert({",
            "current": "          where: { companyId },",
            "after": "          update: {\n            personalityPrompt: personalityPrompt || null,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 364,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        // Try to find existing record first\n        const existingSettings = await this.prisma.aiSettings.findUnique({",
            "current": "          where: { companyId }",
            "after": "        });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\advancedPromptService.js",
          "line": 370,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // Update existing record\n          aiSettings = await this.prisma.aiSettings.update({",
            "current": "            where: { companyId },",
            "after": "            data: {\n              personalityPrompt: personalityPrompt || null,"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 65,
      "patterns": {
        "prismaQueries": 7,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 26
      }
    },
    "src\\services\\advancedSalesReportsService.js": {
      "totalLines": 689,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 13
      }
    },
    "src\\services\\aiAgentService-backup.js": {
      "totalLines": 357,
      "issues": [
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 19,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // البحث عن المفتاح النشط\n      const activeKey = await prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { priority: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 72,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async findBestAvailableModelInActiveKey(keyId) {\n    try {",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 104,
          "content": "const modelRecord = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async updateModelUsage(modelId) {\n    try {",
            "current": "      const modelRecord = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 117,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "        };\n",
            "current": "        await prisma.$executeRaw`",
            "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 154,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على المفتاح النشط الحالي\n      const currentActiveKey = await prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { priority: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 209,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 227,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 234,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "            \n            // تحديث آخر استخدام",
            "current": "            await prisma.$executeRaw`",
            "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 299,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async findBestModelInKey(keyId) {\n    try {",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 313,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 336,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-backup.js",
          "line": 342,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // تفعيل المفتاح المطلوب",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 0,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\aiAgentService-clean.js": {
      "totalLines": 432,
      "issues": [
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 94,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // البحث عن المفتاح النشط\n      const activeKey = await prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { priority: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 147,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async findBestAvailableModelInActiveKey(keyId) {\n    try {",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 179,
          "content": "const modelRecord = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async updateModelUsage(modelId) {\n    try {",
            "current": "      const modelRecord = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 192,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "        };\n",
            "current": "        await prisma.$executeRaw`",
            "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 229,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على المفتاح النشط الحالي\n      const currentActiveKey = await prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { priority: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 284,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 302,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 309,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "            \n            // تحديث آخر استخدام",
            "current": "            await prisma.$executeRaw`",
            "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 374,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async findBestModelInKey(keyId) {\n    try {",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 388,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 411,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService-clean.js",
          "line": 417,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // تفعيل المفتاح المطلوب",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 0,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\aiAgentService.js": {
      "totalLines": 4055,
      "issues": [
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 161,
          "content": "console.log(`❌ No active Gemini key available for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      if (!geminiConfig) {",
            "current": "        console.log(`❌ No active Gemini key available for company: ${companyId}`);",
            "after": "        return {\n          success: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 182,
          "content": "console.log('🏢 [COMPANY-DEBUG] Final companyId for processing:', finalCompanyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // Get company ID from message data or customer data - NO FALLBACK TO FIRST COMPANY\n      let finalCompanyId = companyId || customerData?.companyId;",
            "current": "      console.log('🏢 [COMPANY-DEBUG] Final companyId for processing:', finalCompanyId);",
            "after": "      if (!finalCompanyId) {\n        console.error('❌ [SECURITY] No companyId provided - rejecting request for security');"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 539,
          "content": "console.log('🏢 [COMPANY-DEBUG] Using companyId:', finalCompanyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // الحصول على معلومات الشركة والـ prompts\n      const finalCompanyId = messageData.companyId || messageData.customerData?.companyId;",
            "current": "      console.log('🏢 [COMPANY-DEBUG] Using companyId:', finalCompanyId);",
            "after": "      const companyPrompts = await this.getCompanyPrompts(finalCompanyId);\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 725,
          "content": "console.log('🔍 Getting company prompts for:', companyId);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "   */\n  async getCompanyPrompts(companyId) {",
            "current": "    console.log('🔍 Getting company prompts for:', companyId);",
            "after": "\n    // Require companyId for security"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 773,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      try {\n        const aiSettings = await prisma.aiSettings.findFirst({",
            "current": "          where: { companyId }",
            "after": "        });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 792,
          "content": "console.log('🔍 Checking company table...');",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      // 3. Fallback to company table",
            "current": "      console.log('🔍 Checking company table...');",
            "after": "      try {\n        const company = await prisma.company.findUnique({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 795,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      try {\n        const company = await prisma.company.findUnique({",
            "current": "          where: { id: companyId }",
            "after": "        });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 799,
          "content": "console.log('✅ Found prompts in company table');",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n        if (company && (company.personalityPrompt || company.responsePrompt)) {",
            "current": "          console.log('✅ Found prompts in company table');",
            "after": "          return {\n            personalityPrompt: company.personalityPrompt,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 807,
          "content": "console.log('❌ No prompts in company table');",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "          };\n        } else {",
            "current": "          console.log('❌ No prompts in company table');",
            "after": "        }\n      } catch (companyError) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 1704,
          "content": "console.log(`🔍 [DEBUG] detectConfirmationWithAI using model: ${geminiConfig?.model} for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // Get active Gemini configuration for the company\n      const geminiConfig = await this.getCurrentActiveModel(companyId);",
            "current": "      console.log(`🔍 [DEBUG] detectConfirmationWithAI using model: ${geminiConfig?.model} for company: ${companyId}`);",
            "after": "      if (!geminiConfig) {\n        console.error(`❌ No active Gemini key found for confirmation detection for company: ${companyId}`);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2475,
          "content": "where: { id: productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const product = await prisma.product.findUnique({",
            "current": "        where: { id: productId },",
            "after": "        include: {\n          variants: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2677,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "    try {\n      // إعادة تحميل البيانات من قاعدة البيانات للتأكد من الحصول على أحدث المعلومات",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\`\n        WHERE \\`keyId\\` = ${keyId}"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2730,
          "content": "const modelRecord = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      console.log(`⚠️ تحديد النموذج ${modelName} كمستنفد بناءً على خطأ 429...`);\n",
            "current": "      const modelRecord = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`model\\` = ${modelName}\n      `;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2748,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "        };\n",
            "current": "        await prisma.$executeRaw`",
            "after": "          UPDATE \\`gemini_key_models\\`\n          SET \\`usage\\` = ${JSON.stringify(exhaustedUsage)}"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2779,
          "content": "const modelRecord = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      console.log(`⚠️ تحديد النموذج ${modelId} كمستنفد...`);\n",
            "current": "      const modelRecord = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2795,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "        };\n",
            "current": "        await prisma.$executeRaw`",
            "after": "          UPDATE \\`gemini_key_models\\`\n          SET \\`usage\\` = ${JSON.stringify(exhaustedUsage)}"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2811,
          "content": "const modelRecord = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async updateModelUsage(modelId) {\n    try {",
            "current": "      const modelRecord = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` WHERE \\`id\\` = ${modelId}\n      `;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2824,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "        };\n",
            "current": "        await prisma.$executeRaw`",
            "after": "          UPDATE \\`gemini_key_models\\` \n          SET "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2931,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // الحصول على جميع النماذج المتاحة لهذا المفتاح",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2968,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 2975,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "            \n            // تحديث آخر استخدام",
            "current": "            await prisma.$executeRaw`",
            "after": "              UPDATE \\`gemini_key_models\\` \n              SET \\`lastUsed\\` = NOW(), \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3020,
          "content": "where: { companyId: targetCompanyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على مفاتيح الشركة المحددة مرتبة حسب الأولوية\n      const allKeys = await prisma.geminiKey.findMany({",
            "current": "        where: { companyId: targetCompanyId },",
            "after": "        orderBy: { priority: 'asc' }\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3055,
          "content": "const availableModels = await prisma.$queryRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "  async findBestModelInKey(keyId) {\n    try {",
            "current": "      const availableModels = await prisma.$queryRaw`",
            "after": "        SELECT * FROM \\`gemini_key_models\\` \n        WHERE \\`keyId\\` = ${keyId} "
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3069,
          "content": "const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        if (currentUsage < maxRequests) {\n          // اختبار صحة النموذج",
            "current": "          const keyRecord = await prisma.geminiKey.findUnique({ where: { id: keyId } });",
            "after": "          const isHealthy = await this.testModelHealth(keyRecord.apiKey, modelRecord.model);\n          "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3092,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // إلغاء تفعيل جميع المفاتيح",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = false, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3098,
          "content": "await prisma.$executeRaw`",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "      \n      // تفعيل المفتاح المطلوب",
            "current": "      await prisma.$executeRaw`",
            "after": "        UPDATE \\`gemini_keys\\` \n        SET \\`isActive\\` = true, \\`updatedAt\\` = NOW()"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3132,
          "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      }\n",
            "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
            "after": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);\n      if (!company) {"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3133,
          "content": "console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      const company = await prisma.company.findUnique({ where: { id: companyId } });",
            "current": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);",
            "after": "      if (!company) {\n        console.log('❌ [aiAgentService] No company found');"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3135,
          "content": "console.log('❌ [aiAgentService] No company found');",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      console.log(`🏢 [aiAgentService] Using specific company: ${companyId}`);\n      if (!company) {",
            "current": "        console.log('❌ [aiAgentService] No company found');",
            "after": "        return {\n          isEnabled: false,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3147,
          "content": "console.log(`🏢 [aiAgentService] Company: ${company.id}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🏢 [aiAgentService] Company: ${company.id}`);",
            "after": "\n      // Get AI settings for the company"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3151,
          "content": "where: { companyId: company.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Get AI settings for the company\n      const aiSettings = await prisma.aiSettings.findFirst({",
            "current": "        where: { companyId: company.id }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3335,
          "content": "where: { id: learningData.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        // تحديث التغذية الراجعة\n        await this.learningService.prisma.learningData.update({",
            "current": "          where: { id: learningData.id },",
            "after": "          data: {\n            feedback: JSON.stringify(feedback),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3360,
          "content": "console.log(`📊 [AIAgent] Monitoring improvement performance for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async monitorImprovementPerformance(companyId) {\n    try {",
            "current": "      console.log(`📊 [AIAgent] Monitoring improvement performance for company: ${companyId}`);",
            "after": "\n      // الحصول على التحسينات النشطة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3944,
          "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      }\n",
            "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
            "after": "      if (!company) {\n        throw new Error(`Company ${companyId} not found`);"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3951,
          "content": "where: { companyId: company.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if AI settings exist\n      let aiSettings = await prisma.aiSettings.findUnique({",
            "current": "        where: { companyId: company.id }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 3957,
          "content": "where: { companyId: company.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        // Update existing settings\n        aiSettings = await prisma.aiSettings.update({",
            "current": "          where: { companyId: company.id },",
            "after": "          data: {\n            autoReplyEnabled: settings.isEnabled !== undefined ? settings.isEnabled : aiSettings.autoReplyEnabled,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 4003,
          "content": "const company = await prisma.company.findUnique({ where: { id: companyId } });",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      }\n",
            "current": "      const company = await prisma.company.findUnique({ where: { id: companyId } });",
            "after": "      if (!company) {\n        console.log(`❌ [aiAgentService] Company ${companyId} not found`);"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 4005,
          "content": "console.log(`❌ [aiAgentService] Company ${companyId} not found`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      const company = await prisma.company.findUnique({ where: { id: companyId } });\n      if (!company) {",
            "current": "        console.log(`❌ [aiAgentService] Company ${companyId} not found`);",
            "after": "        return this.getDefaultSettings();\n      }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 4009,
          "content": "console.log('🏢 [aiAgentService] Company:', company.id);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log('🏢 [aiAgentService] Company:', company.id);",
            "after": "\n      const aiSettings = await prisma.aiSettings.findUnique({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiAgentService.js",
          "line": 4012,
          "content": "where: { companyId: company.id }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await prisma.aiSettings.findUnique({",
            "current": "        where: { companyId: company.id }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 0,
      "patterns": {
        "prismaQueries": 23,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 95
      }
    },
    "src\\services\\aiAgentService_hybrid_backup.js": {
      "totalLines": 49,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\aiQualityEvaluator.js": {
      "totalLines": 2021,
      "issues": [
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 41,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n        const aiSettings = await prisma.aiSettings.findUnique({",
            "current": "          where: { companyId },",
            "after": "          select: { qualityEvaluationEnabled: true }\n        });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 49,
          "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation from DB for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        if (aiSettings !== null) {\n          const isEnabled = aiSettings.qualityEvaluationEnabled !== false;",
            "current": "          console.log(`🔧 [AI-EVALUATOR] Quality evaluation from DB for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
            "after": "          return isEnabled;\n        }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 65,
          "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation from file for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "          const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n          const isEnabled = settings.qualityEvaluationEnabled !== false;",
            "current": "          console.log(`🔧 [AI-EVALUATOR] Quality evaluation from file for company ${companyId}: ${isEnabled ? 'ENABLED' : 'DISABLED'}`);",
            "after": "          return isEnabled;\n        }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 73,
          "content": "console.log(`🔧 [AI-EVALUATOR] Quality evaluation check for company ${companyId}: ENABLED (default)`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      // افتراضياً: مفعل",
            "current": "      console.log(`🔧 [AI-EVALUATOR] Quality evaluation check for company ${companyId}: ENABLED (default)`);",
            "after": "      return true;\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 106,
          "content": "console.log(`⏭️ [AI-EVALUATOR] Quality evaluation disabled for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        const isEvaluationEnabled = await this.isQualityEvaluationEnabled(companyId);\n        if (!isEvaluationEnabled) {",
            "current": "          console.log(`⏭️ [AI-EVALUATOR] Quality evaluation disabled for company: ${companyId}`);",
            "after": "          return {\n            messageId,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\aiQualityEvaluator.js",
          "line": 1973,
          "content": "console.log(`📸 [IMAGE-EVALUATION] Evaluating ${images.length} images for message: \"${userMessage.substring(0, 50)}...\"`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  evaluateImages(userMessage, botResponse, images = []) {\n    try {",
            "current": "      console.log(`📸 [IMAGE-EVALUATION] Evaluating ${images.length} images for message: \"${userMessage.substring(0, 50)}...\"`);",
            "after": "\n      // إذا لم يكن هناك صور"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 10
      }
    },
    "src\\services\\analyticsService.js": {
      "totalLines": 963,
      "issues": [
        {
          "file": "src\\services\\analyticsService.js",
          "line": 676,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const products = await this.prisma.product.findMany({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          orders: {"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 12,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 17
      }
    },
    "src\\services\\appointmentService.js": {
      "totalLines": 542,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\authService.ts": {
      "totalLines": 449,
      "issues": [
        {
          "file": "src\\services\\authService.ts",
          "line": 39,
          "content": "where: { email: data.email },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Check if user already exists\n      const existingUser = await this.prisma.user.findUnique({",
            "current": "        where: { email: data.email },",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 136,
          "content": "where: { email: credentials.email },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Find user with company\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { email: credentials.email },",
            "after": "        include: {\n          company: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 169,
          "content": "where: { id: user.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update last login\n      await this.prisma.user.update({",
            "current": "        where: { id: user.id },",
            "after": "        data: { lastLoginAt: new Date() },\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 208,
          "content": "where: { id: decoded.userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Find user\n      const user = await this.prisma.user.findUnique({",
            "current": "        where: { id: decoded.userId },",
            "after": "        select: {\n          id: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 239,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async getCurrentUser(userId: string): Promise<User> {\n    const user = await this.prisma.user.findUnique({",
            "current": "      where: { id: userId },",
            "after": "      select: {\n        id: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 275,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Get user with password\n    const user = await this.prisma.user.findUnique({",
            "current": "      where: { id: userId },",
            "after": "      select: { id: true, password: true },\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 294,
          "content": "where: { id: userId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update password\n    await this.prisma.user.update({",
            "current": "      where: { id: userId },",
            "after": "      data: {\n        password: hashedNewPassword,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 309,
          "content": "where: { email },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "  async forgotPassword(email: string): Promise<void> {\n    const user = await this.prisma.user.findUnique({",
            "current": "      where: { email },",
            "after": "      select: { id: true, email: true, firstName: true, lastName: true },\n    });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 324,
          "content": "where: { id: user.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Save reset token (you might want to create a separate table for this)\n    await this.prisma.user.update({",
            "current": "      where: { id: user.id },",
            "after": "      data: {\n        // You'll need to add these fields to your schema"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\authService.ts",
          "line": 359,
          "content": "where: { id: user.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    // Update password and clear reset token\n    await this.prisma.user.update({",
            "current": "      where: { id: user.id },",
            "after": "      data: {\n        password: hashedPassword,"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 50,
      "patterns": {
        "prismaQueries": 11,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 7
      }
    },
    "src\\services\\automationService.js": {
      "totalLines": 556,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\autoPatternDetectionService.js": {
      "totalLines": 321,
      "issues": [
        {
          "file": "src\\services\\autoPatternDetectionService.js",
          "line": 103,
          "content": "console.log(`📊 [AutoPatternService] Processing company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    for (const companyId of this.companies) {\n      try {",
            "current": "        console.log(`📊 [AutoPatternService] Processing company: ${companyId}`);",
            "after": "        \n        const result = await this.detectPatternsForCompany(companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\autoPatternDetectionService.js",
          "line": 110,
          "content": "console.log(`🎉 [AutoPatternService] Found ${result.newPatterns} new patterns for ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        if (result.success && result.newPatterns > 0) {\n          totalNewPatterns += result.newPatterns;",
            "current": "          console.log(`🎉 [AutoPatternService] Found ${result.newPatterns} new patterns for ${companyId}`);",
            "after": "        }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\autoPatternDetectionService.js",
          "line": 149,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // فحص آخر مرة تم اكتشاف أنماط فيها\n      const lastPattern = await this.prisma.successPattern.findFirst({",
            "current": "        where: { companyId },",
            "after": "        orderBy: { createdAt: 'desc' }\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\autoPatternDetectionService.js",
          "line": 287,
          "content": "console.log(`✅ [AutoPatternService] Added company ${companyId} to monitoring`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    if (!this.companies.includes(companyId)) {\n      this.companies.push(companyId);",
            "current": "      console.log(`✅ [AutoPatternService] Added company ${companyId} to monitoring`);",
            "after": "    }\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\autoPatternDetectionService.js",
          "line": 298,
          "content": "console.log(`✅ [AutoPatternService] Removed company ${companyId} from monitoring`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    if (index > -1) {\n      this.companies.splice(index, 1);",
            "current": "      console.log(`✅ [AutoPatternService] Removed company ${companyId} from monitoring`);",
            "after": "    }\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 2,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 21
      }
    },
    "src\\services\\autoResponseScenariosService.js": {
      "totalLines": 765,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 12
      }
    },
    "src\\services\\billingNotificationService.js": {
      "totalLines": 675,
      "issues": [
        {
          "file": "src\\services\\billingNotificationService.js",
          "line": 434,
          "content": "console.log(`📧 Overdue invoice notification sent to ${invoice.company.email}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      try {\n        // TODO: Implement email sending",
            "current": "        console.log(`📧 Overdue invoice notification sent to ${invoice.company.email}`);",
            "after": "        \n        // Log the notification"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\billingNotificationService.js",
          "line": 490,
          "content": "console.log(`📧 Trial expired notification sent to ${subscription.company.email}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      try {\n        // TODO: Implement email sending",
            "current": "        console.log(`📧 Trial expired notification sent to ${subscription.company.email}`);",
            "after": "        \n        // Log the notification"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\billingNotificationService.js",
          "line": 517,
          "content": "console.log(`📧 Failed payment notification sent to ${payment.company.email}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      try {\n        // TODO: Implement email sending",
            "current": "        console.log(`📧 Failed payment notification sent to ${payment.company.email}`);",
            "after": "        \n        // Log the notification"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 16,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 5
      }
    },
    "src\\services\\cacheService.js": {
      "totalLines": 186,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 4
      }
    },
    "src\\services\\cartService.js": {
      "totalLines": 616,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\clvService.js": {
      "totalLines": 464,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\cmsService.js": {
      "totalLines": 577,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 16,
        "companyFilters": 0
      }
    },
    "src\\services\\companyService.js": {
      "totalLines": 382,
      "issues": [
        {
          "file": "src\\services\\companyService.js",
          "line": 177,
          "content": "console.log('Creating company:', company);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      // In real implementation, save to database",
            "current": "      console.log('Creating company:', company);",
            "after": "      \n      return {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\companyService.js",
          "line": 222,
          "content": "console.log('Updating subscription for company:', companyId, subscription);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      // In real implementation, update database",
            "current": "      console.log('Updating subscription for company:', companyId, subscription);",
            "after": "\n      return {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\companyService.js",
          "line": 286,
          "content": "console.log(`Updating usage for company ${companyId}: ${resource} +${amount}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    try {\n      // In real implementation, update database",
            "current": "      console.log(`Updating usage for company ${companyId}: ${resource} +${amount}`);",
            "after": "      \n      return {"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 10
      }
    },
    "src\\services\\conflictDetectionService.js": {
      "totalLines": 335,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 5
      }
    },
    "src\\services\\continuousLearningServiceV2.js": {
      "totalLines": 421,
      "issues": [
        {
          "file": "src\\services\\continuousLearningServiceV2.js",
          "line": 90,
          "content": "console.log(`🔍 [ContinuousLearning] Analyzing patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async analyzeAndDiscoverPatterns(companyId) {\n    try {",
            "current": "      console.log(`🔍 [ContinuousLearning] Analyzing patterns for company: ${companyId}`);",
            "after": "\n      // جلب البيانات الحديثة للتحليل"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\continuousLearningServiceV2.js",
          "line": 330,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      return await this.prisma.company.findMany({",
            "current": "        where: { isActive: true },",
            "after": "        select: { id: true, name: true }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 5,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 10
      }
    },
    "src\\services\\conversationAnalysisService.js": {
      "totalLines": 551,
      "issues": [
        {
          "file": "src\\services\\conversationAnalysisService.js",
          "line": 274,
          "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "        type: 'conversation_learning',\n        source: learning.type,",
            "current": "        companyId: 'cmdt8nrjq003vufuss47dqc45'",
            "after": "      }, {\n        success: true,"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\services\\conversationDistributionService.js": {
      "totalLines": 661,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 21
      }
    },
    "src\\services\\conversationReportsService.js": {
      "totalLines": 680,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 11
      }
    },
    "src\\services\\conversationService.js": {
      "totalLines": 711,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\customerBehaviorService.js": {
      "totalLines": 682,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\services\\customerPersonalizationService.js": {
      "totalLines": 587,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\customKPIService.js": {
      "totalLines": 715,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 20
      }
    },
    "src\\services\\dashboardService.js": {
      "totalLines": 899,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 6,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 13
      }
    },
    "src\\services\\discountService.js": {
      "totalLines": 627,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\emailService.js": {
      "totalLines": 535,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\emailService.ts": {
      "totalLines": 369,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 3,
        "companyFilters": 0
      }
    },
    "src\\services\\enhancedOrderService.js": {
      "totalLines": 1101,
      "issues": [
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 82,
          "content": "where: { id: data.customerId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (data.customerId) {\n        customer = await this.prisma.customer.findUnique({",
            "current": "          where: { id: data.customerId }",
            "after": "        });\n      }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 89,
          "content": "where: { facebookId: data.customerId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (!customer && data.customerId && data.customerId.match(/^\\d+$/)) {\n        customer = await this.prisma.customer.findUnique({",
            "current": "          where: { facebookId: data.customerId }",
            "after": "        });\n      }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 168,
          "content": "where: { id: conversationId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const conversation = await this.prisma.conversation.findUnique({",
            "current": "        where: { id: conversationId }",
            "after": "      });\n      "
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 388,
          "content": "where: { id: order.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // إعادة جلب الطلب مع العناصر\n      const completeOrder = await this.prisma.order.findUnique({",
            "current": "        where: { id: order.id },",
            "after": "        include: {\n          customer: true,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 536,
          "content": "where: { id: conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const updatedConversation = await this.prisma.conversation.update({",
            "current": "        where: { id: conversationId },",
            "after": "        data: updateData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 576,
          "content": "where: { id: conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const updatedConversation = await this.prisma.conversation.update({",
            "current": "        where: { id: conversationId },",
            "after": "        data: updateData,\n        include: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 827,
          "content": "where: { ...where, confidence: { not: null } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        // متوسط الثقة\n        this.prisma.order.aggregate({",
            "current": "          where: { ...where, confidence: { not: null } },",
            "after": "          _avg: { confidence: true }\n        }),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 848,
          "content": "where: { ...where, city: { not: null } },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        this.prisma.order.groupBy({\n          by: ['city'],",
            "current": "          where: { ...where, city: { not: null } },",
            "after": "          _count: true,\n          orderBy: { _count: { city: 'desc' } },"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\enhancedOrderService.js",
          "line": 1018,
          "content": "where: { id: orderId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const order = await this.prisma.order.findUnique({",
            "current": "        where: { id: orderId },",
            "after": "        include: {\n          items: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 55,
      "patterns": {
        "prismaQueries": 32,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 22
      }
    },
    "src\\services\\escalationRulesService.js": {
      "totalLines": 720,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 28
      }
    },
    "src\\services\\FacebookMessengerService.ts": {
      "totalLines": 510,
      "issues": [
        {
          "file": "src\\services\\FacebookMessengerService.ts",
          "line": 27,
          "content": "this.pageAccessToken = process.env.FACEBOOK_PAGE_ACCESS_TOKEN || '';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n  constructor() {",
            "current": "    this.pageAccessToken = process.env.FACEBOOK_PAGE_ACCESS_TOKEN || '';",
            "after": "    this.baseUrl = `https://graph.facebook.com/${this.apiVersion}`;\n    "
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\FacebookMessengerService.ts",
          "line": 436,
          "content": "const appSecret = process.env.FACEBOOK_APP_SECRET || '';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    try {\n      const crypto = require('crypto');",
            "current": "      const appSecret = process.env.FACEBOOK_APP_SECRET || '';",
            "after": "      \n      if (!appSecret) {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\FacebookMessengerService.ts",
          "line": 506,
          "content": "hasAppSecret: !!process.env.FACEBOOK_APP_SECRET",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      configured: this.isConfigured(),\n      hasPageToken: !!this.pageAccessToken,",
            "current": "      hasAppSecret: !!process.env.FACEBOOK_APP_SECRET",
            "after": "    };\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\fallbackProductsService.js": {
      "totalLines": 311,
      "issues": [
        {
          "file": "src\\services\\fallbackProductsService.js",
          "line": 264,
          "content": "console.log(`🏢 معرف الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    try {\n      console.log(`🔄 النظام البديل - توليد رد للرسالة: \"${message}\"`);",
            "current": "      console.log(`🏢 معرف الشركة: ${companyId}`);",
            "after": "      \n      const response = await this.buildResponse(message, companyId);"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 5
      }
    },
    "src\\services\\followUpAutomationService.js": {
      "totalLines": 797,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 23
      }
    },
    "src\\services\\functionCallHandler.js": {
      "totalLines": 252,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 21
      }
    },
    "src\\services\\intelligentChatService.js": {
      "totalLines": 291,
      "issues": [
        {
          "file": "src\\services\\intelligentChatService.js",
          "line": 30,
          "content": "console.log(`🏢 Company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      console.log('🧠 [IntelligentChat] Processing intelligent response...');\n      console.log(`📝 Message: \"${message}\"`);",
            "current": "      console.log(`🏢 Company: ${companyId}`);",
            "after": "      console.log(`👤 Customer: ${customerId}`);\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\intelligentChatService.js",
          "line": 117,
          "content": "console.log(`🧠 [IntelligentChat] Getting conversation memory for customer ${customerId} in company ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🧠 [IntelligentChat] Getting conversation memory for customer ${customerId} in company ${companyId}`);",
            "after": "\n      // محاولة الحصول على الذاكرة من memoryService"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 18
      }
    },
    "src\\services\\inventoryService.js": {
      "totalLines": 709,
      "issues": [
        {
          "file": "src\\services\\inventoryService.js",
          "line": 29,
          "content": "const company = await prisma.company.findFirst();",
          "description": "Prisma findFirst without filters - CRITICAL DATA EXPOSURE",
          "severity": "CRITICAL",
          "category": "DATA_EXPOSURE",
          "impact": "HIGH",
          "cwe": "CWE-200",
          "context": {
            "before": "      if (warehouseCount === 0) {\n        // Get first company for demo data",
            "current": "        const company = await prisma.company.findFirst();",
            "after": "        if (!company) return;\n"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\inventoryService.js",
          "line": 67,
          "content": "const products = await prisma.product.findMany();",
          "description": "Prisma findMany without any filters - CRITICAL DATA EXPOSURE",
          "severity": "CRITICAL",
          "category": "DATA_EXPOSURE",
          "impact": "HIGH",
          "cwe": "CWE-200",
          "context": {
            "before": "  async initializeProductInventory() {\n    try {",
            "current": "      const products = await prisma.product.findMany();",
            "after": "      const warehouses = await prisma.warehouse.findMany();\n"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\inventoryService.js",
          "line": 68,
          "content": "const warehouses = await prisma.warehouse.findMany();",
          "description": "Prisma findMany without any filters - CRITICAL DATA EXPOSURE",
          "severity": "CRITICAL",
          "category": "DATA_EXPOSURE",
          "impact": "HIGH",
          "cwe": "CWE-200",
          "context": {
            "before": "    try {\n      const products = await prisma.product.findMany();",
            "current": "      const warehouses = await prisma.warehouse.findMany();",
            "after": "\n      for (const product of products) {"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\inventoryService.js",
          "line": 209,
          "content": "where: { productId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const inventory = await prisma.inventory.findMany({",
            "current": "        where: { productId },",
            "after": "        include: {\n          product: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 10,
      "patterns": {
        "prismaQueries": 21,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 2
      }
    },
    "src\\services\\inventoryService.old.js": {
      "totalLines": 715,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\mediaService.js": {
      "totalLines": 560,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 7
      }
    },
    "src\\services\\memoryService.js": {
      "totalLines": 715,
      "issues": [
        {
          "file": "src\\services\\memoryService.js",
          "line": 78,
          "content": "console.log(`🧠 [MEMORY-DEBUG] ConversationId: ${conversationId}, SenderId: ${senderId}, CompanyId: ${companyId}, Limit: ${limit}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    console.log(`🧠 [MEMORY-DEBUG] Looking for memory with key: ${memoryKey}`);",
            "current": "    console.log(`🧠 [MEMORY-DEBUG] ConversationId: ${conversationId}, SenderId: ${senderId}, CompanyId: ${companyId}, Limit: ${limit}`);",
            "after": "\n    try {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\memoryService.js",
          "line": 371,
          "content": "console.log(`🧹 Cleaned up ${totalCleaned} old memory records${companyInfo} (${deletedMemoryCount.count} from DB, ${cleanedShortTermCount} from cache)`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      const totalCleaned = deletedMemoryCount.count + cleanedShortTermCount;\n      const companyInfo = companyId ? ` for company ${companyId}` : ' (all companies)';",
            "current": "      console.log(`🧹 Cleaned up ${totalCleaned} old memory records${companyInfo} (${deletedMemoryCount.count} from DB, ${cleanedShortTermCount} from cache)`);",
            "after": "\n      return {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\memoryService.js",
          "line": 469,
          "content": "console.log(`🗑️ Cleared memory for customer ${senderId} in company ${companyId}: ${deletedMemoryCount.count} records`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      }\n",
            "current": "      console.log(`🗑️ Cleared memory for customer ${senderId} in company ${companyId}: ${deletedMemoryCount.count} records`);",
            "after": "      return deletedMemoryCount.count;\n"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 14,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 58
      }
    },
    "src\\services\\messageSchedulingService.js": {
      "totalLines": 772,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 20
      }
    },
    "src\\services\\modelTrainingService.js": {
      "totalLines": 956,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 13
      }
    },
    "src\\services\\multimodalService.js": {
      "totalLines": 713,
      "issues": [
        {
          "file": "src\\services\\multimodalService.js",
          "line": 52,
          "content": "console.log(`🔐 [MULTIMODAL] Filtering products for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      if (companyId) {\n        whereClause.companyId = companyId;",
            "current": "        console.log(`🔐 [MULTIMODAL] Filtering products for company: ${companyId}`);",
            "after": "      }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\multimodalService.js",
          "line": 59,
          "content": "where: { isActive: true }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        include: {\n          variants: {",
            "current": "            where: { isActive: true }",
            "after": "          }\n        }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\multimodalService.js",
          "line": 97,
          "content": "console.log(`🔐 [MULTIMODAL] Filtering products array for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      if (companyId) {\n        whereClause.companyId = companyId;",
            "current": "        console.log(`🔐 [MULTIMODAL] Filtering products array for company: ${companyId}`);",
            "after": "      }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\multimodalService.js",
          "line": 104,
          "content": "where: { isActive: true }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        include: {\n          variants: {",
            "current": "            where: { isActive: true }",
            "after": "          }\n        }"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 2,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 12
      }
    },
    "src\\services\\naturalConversationService.js": {
      "totalLines": 392,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\services\\notificationService.js": {
      "totalLines": 613,
      "issues": [
        {
          "file": "src\\services\\notificationService.js",
          "line": 61,
          "content": "console.log(`User ${userId} subscribed to notifications`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    this.subscribers.get(userId).add(connection);\n    ",
            "current": "    console.log(`User ${userId} subscribed to notifications`);",
            "after": "    \n    // Send pending notifications"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\notificationService.js",
          "line": 80,
          "content": "console.log(`User ${userId} unsubscribed from notifications`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n    ",
            "current": "    console.log(`User ${userId} unsubscribed from notifications`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\notificationService.js",
          "line": 151,
          "content": "console.log(`Push notification sent to user ${userId}:`, notification.title);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // await this.sendWebPushNotification(userId, notification);\n",
            "current": "      console.log(`Push notification sent to user ${userId}:`, notification.title);",
            "after": "      \n      return { success: true, notification };"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\notificationService.js",
          "line": 347,
          "content": "const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "   */\n  getNotificationUrl(type, data) {",
            "current": "    const baseUrl = process.env.FRONTEND_URL || 'http://localhost:3000';",
            "after": "    \n    switch (type) {"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\notificationSettingsService.js": {
      "totalLines": 683,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 11
      }
    },
    "src\\services\\opportunityService.js": {
      "totalLines": 541,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\orderService.js": {
      "totalLines": 329,
      "issues": [
        {
          "file": "src\\services\\orderService.js",
          "line": 64,
          "content": "where: { id: order.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // جلب الطلب مع بيانات العميل\n      const orderWithCustomer = await prisma.order.findUnique({",
            "current": "        where: { id: order.id },",
            "after": "        include: {\n          customer: true"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 149,
          "content": "where: { id: customerId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // التحقق من وجود العميل أولاً\n      const customer = await prisma.customer.findUnique({",
            "current": "        where: { id: customerId }",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 154,
          "content": "where: { id: customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (customer) {\n        await prisma.customer.update({",
            "current": "          where: { id: customerId },",
            "after": "          data: {\n            orderCount: { increment: 1 },"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 172,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const orders = await prisma.order.findMany({",
            "current": "        where: { customerId },",
            "after": "        include: {\n          items: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 195,
          "content": "where: { orderNumber },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const order = await prisma.order.findUnique({",
            "current": "        where: { orderNumber },",
            "after": "        include: {\n          items: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 217,
          "content": "where: { orderNumber },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const order = await prisma.order.update({",
            "current": "        where: { orderNumber },",
            "after": "        data: {\n          status,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 241,
          "content": "where: { orderNumber },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const order = await prisma.order.update({",
            "current": "        where: { orderNumber },",
            "after": "        data: {\n          status: 'CONFIRMED',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 269,
          "content": "where: { orderNumber },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const order = await prisma.order.update({",
            "current": "        where: { orderNumber },",
            "after": "        data: {\n          status: 'CANCELLED',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\orderService.js",
          "line": 279,
          "content": "where: { id: order.customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث إحصائيات العميل (تقليل العدد والمبلغ)\n      await prisma.customer.update({",
            "current": "        where: { id: order.customerId },",
            "after": "        data: {\n          orderCount: { decrement: 1 },"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 55,
      "patterns": {
        "prismaQueries": 13,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 7
      }
    },
    "src\\services\\outcomeTracker.js": {
      "totalLines": 477,
      "issues": [
        {
          "file": "src\\services\\outcomeTracker.js",
          "line": 98,
          "content": "where: { conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // جلب رسائل المحادثة\n      const messages = await this.prisma.message.findMany({",
            "current": "        where: { conversationId },",
            "after": "        orderBy: { createdAt: 'asc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\outcomeTracker.js",
          "line": 350,
          "content": "where: { id: existing.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        // تحديث الموجود\n        return await this.prisma.responseEffectiveness.update({",
            "current": "          where: { id: existing.id },",
            "after": "          data: {\n            effectivenessScore: effectivenessData.effectivenessScore,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\outcomeTracker.js",
          "line": 395,
          "content": "where: { id: conversationId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const conversation = await this.prisma.conversation.findUnique({",
            "current": "        where: { id: conversationId },",
            "after": "        select: { companyId: true }\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 8,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 11
      }
    },
    "src\\services\\patternApplicationService.js": {
      "totalLines": 766,
      "issues": [
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 29,
          "content": "console.log(`📋 [PatternApplication] Using cached patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      if (this.patternCache.has(cacheKey) && (now - lastUpdate) < this.cacheExpiry) {",
            "current": "        console.log(`📋 [PatternApplication] Using cached patterns for company: ${companyId}`);",
            "after": "        return this.patternCache.get(cacheKey);\n      }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 61,
          "content": "console.log(`✅ [PatternApplication] Loaded ${processedPatterns.length} approved patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      this.lastCacheUpdate.set(cacheKey, now);\n",
            "current": "      console.log(`✅ [PatternApplication] Loaded ${processedPatterns.length} approved patterns for company: ${companyId}`);",
            "after": "      return processedPatterns;\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 319,
          "content": "where: { id: patternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (!companyId) {\n        const pattern = await this.prisma.successPattern.findUnique({",
            "current": "          where: { id: patternId },",
            "after": "          select: { companyId: true }\n        });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 358,
          "content": "where: { patternId, companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // البحث عن سجل الأداء الموجود أو إنشاء واحد جديد\n      let performance = await this.prisma.patternPerformance.findFirst({",
            "current": "        where: { patternId, companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 381,
          "content": "where: { id: performance.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث سجل الأداء\n      await this.prisma.patternPerformance.update({",
            "current": "        where: { id: performance.id },",
            "after": "        data: {\n          usageCount: usageStats.totalUsage,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 470,
          "content": "console.log(`🎯 [PatternApplication] Applying patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async applyAllPatterns(text, companyId, conversationId = null) {\n    try {",
            "current": "      console.log(`🎯 [PatternApplication] Applying patterns for company: ${companyId}`);",
            "after": "      \n      // جلب الأنماط المعتمدة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 476,
          "content": "console.log(`⚠️ [PatternApplication] No approved patterns found for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      \n      if (patterns.length === 0) {",
            "current": "        console.log(`⚠️ [PatternApplication] No approved patterns found for company: ${companyId}`);",
            "after": "        return text;\n      }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 628,
          "content": "console.log(`🧹 [PatternApplication] Cleared cache for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      this.patternCache.delete(cacheKey);\n      this.lastCacheUpdate.delete(cacheKey);",
            "current": "      console.log(`🧹 [PatternApplication] Cleared cache for company: ${companyId}`);",
            "after": "    } else {\n      this.patternCache.clear();"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 664,
          "content": "where: { id: patternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // إذا لم توجد نتيجة، استخدم تقدير بناءً على معدل النجاح العام للنمط\n          const pattern = await this.prisma.successPattern.findUnique({",
            "current": "            where: { id: patternId },",
            "after": "            select: { successRate: true }\n          });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\patternApplicationService.js",
          "line": 690,
          "content": "where: { id: patternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // الحصول على معلومات النمط\n      const pattern = await this.prisma.successPattern.findUnique({",
            "current": "        where: { id: patternId },",
            "after": "        select: {\n          patternType: true,"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 50,
      "patterns": {
        "prismaQueries": 15,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 37
      }
    },
    "src\\services\\patternCleanupService.js": {
      "totalLines": 286,
      "issues": [
        {
          "file": "src\\services\\patternCleanupService.js",
          "line": 41,
          "content": "console.log(`🔍 [PatternCleanup] Finding duplicate patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async findDuplicatePatterns(companyId) {\n    try {",
            "current": "      console.log(`🔍 [PatternCleanup] Finding duplicate patterns for company: ${companyId}`);",
            "after": "\n      const patterns = await this.prisma.successPattern.findMany({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternCleanupService.js",
          "line": 44,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const patterns = await this.prisma.successPattern.findMany({",
            "current": "        where: { companyId },",
            "after": "        orderBy: { createdAt: 'desc' }\n      });"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\patternCleanupService.js",
          "line": 126,
          "content": "where: { id: bestPattern.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث النمط الأفضل\n      const updatedPattern = await this.prisma.successPattern.update({",
            "current": "        where: { id: bestPattern.id },",
            "after": "        data: {\n          successRate: weightedSuccessRate,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\patternCleanupService.js",
          "line": 174,
          "content": "console.log(`🧹 [PatternCleanup] Starting comprehensive cleanup for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async cleanupDuplicatePatterns(companyId) {\n    try {",
            "current": "      console.log(`🧹 [PatternCleanup] Starting comprehensive cleanup for company: ${companyId}`);",
            "after": "\n      const startTime = Date.now();"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternCleanupService.js",
          "line": 245,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const patterns = await this.prisma.successPattern.findMany({",
            "current": "        where: { companyId },",
            "after": "        select: {\n          id: true,"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 4,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\services\\patternDetector.js": {
      "totalLines": 1396,
      "issues": [
        {
          "file": "src\\services\\patternDetector.js",
          "line": 91,
          "content": "console.log(`🔍 [PatternDetector] Detecting patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async detectNewPatterns(companyId, timeRange = 7) {\n    try {",
            "current": "      console.log(`🔍 [PatternDetector] Detecting patterns for company: ${companyId}`);",
            "after": "\n      // التأكد من وجود Prisma client"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 142,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      console.log(`🔍 [PatternDetector] Filtering duplicates from detected patterns...`);\n      const existingPatterns = await this.prisma.successPattern.findMany({",
            "current": "        where: { companyId },",
            "after": "        select: {\n          id: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 195,
          "content": "await this.prisma.$queryRaw`SELECT 1`;",
          "description": "Raw SQL query without company isolation verification",
          "severity": "CRITICAL",
          "category": "SQL_INJECTION",
          "impact": "HIGH",
          "cwe": "CWE-89",
          "context": {
            "before": "\n      // اختبار الاتصال بقاعدة البيانات",
            "current": "      await this.prisma.$queryRaw`SELECT 1`;",
            "after": "      console.log('✅ [PatternDetector] Database connection verified');\n      return true;"
          },
          "mitigation": false,
          "riskScore": 10
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 957,
          "content": "where: { id: existingPatternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const updatedPattern = await this.prisma.successPattern.update({",
            "current": "        where: { id: existingPatternId },",
            "after": "        data: {\n          // تحديث معدل النجاح بالمتوسط المرجح"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 961,
          "content": "where: { id: existingPatternId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // تحديث معدل النجاح بالمتوسط المرجح\n          successRate: (newPattern.strength + (await this.prisma.successPattern.findUnique({",
            "current": "            where: { id: existingPatternId },",
            "after": "            select: { successRate: true }\n          })).successRate) / 2,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 1028,
          "content": "console.log(`⚠️ [PatternDetector] Skipping pattern creation - no companyId provided`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "          // التحقق من وجود الشركة قبل إنشاء النمط\n          if (!companyId) {",
            "current": "            console.log(`⚠️ [PatternDetector] Skipping pattern creation - no companyId provided`);",
            "after": "            continue;\n          }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 1034,
          "content": "where: { id: companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          // التحقق من وجود الشركة في قاعدة البيانات\n          const companyExists = await this.prisma.company.findUnique({",
            "current": "            where: { id: companyId }",
            "after": "          });\n"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\patternDetector.js",
          "line": 1038,
          "content": "console.log(`⚠️ [PatternDetector] Skipping pattern creation - company ${companyId} not found`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n          if (!companyExists) {",
            "current": "            console.log(`⚠️ [PatternDetector] Skipping pattern creation - company ${companyId} not found`);",
            "after": "            continue;\n          }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "CRITICAL",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 10,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 20
      }
    },
    "src\\services\\paymentService.js": {
      "totalLines": 627,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\performanceMonitor.js": {
      "totalLines": 297,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\planLimitsService.js": {
      "totalLines": 251,
      "issues": [
        {
          "file": "src\\services\\planLimitsService.js",
          "line": 51,
          "content": "where: { id: companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const company = await prisma.company.findUnique({",
            "current": "        where: { id: companyId },",
            "after": "        include: {\n          _count: {"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\services\\predictionService.js": {
      "totalLines": 544,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 10
      }
    },
    "src\\services\\productRecommendationService.js": {
      "totalLines": 1024,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\productSearchService.js": {
      "totalLines": 488,
      "issues": [
        {
          "file": "src\\services\\productSearchService.js",
          "line": 207,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          category: true,\n          variants: {",
            "current": "            where: { isActive: true },",
            "after": "            orderBy: { sortOrder: 'asc' }\n          }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 259,
          "content": "console.log(`🔥 جلب المنتجات الشائعة للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async getPopularProducts(companyId, limit = 5) {\n    try {",
            "current": "      console.log(`🔥 جلب المنتجات الشائعة للشركة: ${companyId}`);",
            "after": "\n      const products = await this.prisma.product.findMany({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 312,
          "content": "console.log(`🆕 جلب المنتجات الجديدة للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async getNewProducts(companyId, limit = 5) {\n    try {",
            "current": "      console.log(`🆕 جلب المنتجات الجديدة للشركة: ${companyId}`);",
            "after": "\n      const products = await this.prisma.product.findMany({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 404,
          "content": "console.log(`📂 جلب الفئات المتاحة للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async getAvailableCategories(companyId) {\n    try {",
            "current": "      console.log(`📂 جلب الفئات المتاحة للشركة: ${companyId}`);",
            "after": "\n      const categories = await this.prisma.category.findMany({"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 456,
          "content": "console.log(`📊 جلب إحصائيات المنتجات للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async getProductStats(companyId) {\n    try {",
            "current": "      console.log(`📊 جلب إحصائيات المنتجات للشركة: ${companyId}`);",
            "after": "\n      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all(["
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 459,
          "content": "this.prisma.product.count({ where: { companyId } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all([",
            "current": "        this.prisma.product.count({ where: { companyId } }),",
            "after": "        this.prisma.product.count({ where: { companyId, isActive: true } }),\n        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 460,
          "content": "this.prisma.product.count({ where: { companyId, isActive: true } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      const [totalProducts, activeProducts, outOfStock, categories] = await Promise.all([\n        this.prisma.product.count({ where: { companyId } }),",
            "current": "        this.prisma.product.count({ where: { companyId, isActive: true } }),",
            "after": "        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),\n        this.prisma.category.count({ where: { companyId } })"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 461,
          "content": "this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        this.prisma.product.count({ where: { companyId } }),\n        this.prisma.product.count({ where: { companyId, isActive: true } }),",
            "current": "        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
            "after": "        this.prisma.category.count({ where: { companyId } })\n      ]);"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\productSearchService.js",
          "line": 462,
          "content": "this.prisma.category.count({ where: { companyId } })",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "        this.prisma.product.count({ where: { companyId, isActive: true } }),\n        this.prisma.product.count({ where: { companyId, isActive: true, stock: { lte: 0 } } }),",
            "current": "        this.prisma.category.count({ where: { companyId } })",
            "after": "      ]);\n"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 55,
      "patterns": {
        "prismaQueries": 11,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 26
      }
    },
    "src\\services\\productsPromptBuilder.js": {
      "totalLines": 244,
      "issues": [
        {
          "file": "src\\services\\productsPromptBuilder.js",
          "line": 7,
          "content": "this.baseUrl = process.env.BASE_URL || 'http://localhost:3001';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "class ProductsPromptBuilder {\n  constructor() {",
            "current": "    this.baseUrl = process.env.BASE_URL || 'http://localhost:3001';",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productsPromptBuilder.js",
          "line": 15,
          "content": "console.log(`📦 جلب منتجات الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async fetchCompanyProducts(companyId) {\n    try {",
            "current": "      console.log(`📦 جلب منتجات الشركة: ${companyId}`);",
            "after": "      \n      const fetch = (await import('node-fetch')).default;"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\productsPromptBuilder.js",
          "line": 50,
          "content": "where: { companyId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      \n      const products = await prisma.product.findMany({",
            "current": "        where: { companyId },",
            "after": "        include: {\n          category: true,"
          },
          "mitigation": true,
          "riskScore": 2
        },
        {
          "file": "src\\services\\productsPromptBuilder.js",
          "line": 54,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "          category: true,\n          variants: {",
            "current": "            where: { isActive: true },",
            "after": "            orderBy: { sortOrder: 'asc' }\n          }"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 12
      }
    },
    "src\\services\\promptEnhancementService.js": {
      "totalLines": 554,
      "issues": [
        {
          "file": "src\\services\\promptEnhancementService.js",
          "line": 160,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await prisma.aiSettings.findFirst({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\services\\promptManagementService.js": {
      "totalLines": 853,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 12
      }
    },
    "src\\services\\qualityMonitor.js": {
      "totalLines": 755,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\qualityMonitorService.js": {
      "totalLines": 476,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\ragService.js": {
      "totalLines": 1448,
      "issues": [
        {
          "file": "src\\services\\ragService.js",
          "line": 49,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const activeKey = await prisma.geminiKey.findFirst({",
            "current": "        where: { isActive: true },",
            "after": "        orderBy: { createdAt: 'desc' }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 64,
          "content": "console.log(`🏢 [RAG] Initializing for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    console.log('🧠 Initializing RAG Knowledge Base...');\n    if (companyId) {",
            "current": "      console.log(`🏢 [RAG] Initializing for company: ${companyId}`);",
            "after": "    }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 113,
          "content": "console.log('⚠️ [RAG] لا يمكن تحميل منتجات بدون companyId');",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async loadProductsForCompany(companyId) {\n    if (!companyId) {",
            "current": "      console.log('⚠️ [RAG] لا يمكن تحميل منتجات بدون companyId');",
            "after": "      return;\n    }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 124,
          "content": "console.log(`🔐 [RAG] تحميل منتجات الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    }\n",
            "current": "    console.log(`🔐 [RAG] تحميل منتجات الشركة: ${companyId}`);",
            "after": "    await this.loadProducts(companyId);\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 141,
          "content": "console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        if (companyId) {\n          whereClause.companyId = companyId;",
            "current": "          console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);",
            "after": "        } else {\n          console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 143,
          "content": "console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "          console.log(`🏢 [RAG] تحميل منتجات الشركة: ${companyId}`);\n        } else {",
            "current": "          console.log(`⚠️ [RAG] تحميل جميع المنتجات (لا يوجد companyId)`);",
            "after": "        }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 151,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "            category: true,\n            variants: {",
            "current": "              where: { isActive: true },",
            "after": "              orderBy: { sortOrder: 'asc' }\n            }"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 345,
          "content": "console.log(`🏢 [RAG] تحميل FAQs للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    if (companyId) {",
            "current": "      console.log(`🏢 [RAG] تحميل FAQs للشركة: ${companyId}`);",
            "after": "    }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 379,
          "content": "console.log(`🏢 [RAG] تحميل Policies للشركة: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    if (companyId) {",
            "current": "      console.log(`🏢 [RAG] تحميل Policies للشركة: ${companyId}`);",
            "after": "    }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 399,
          "content": "console.log(`🏢 [RAG] Filtering data for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    console.log(`🔍 RAG retrieving data for query: \"${query}\" with intent: ${intent}`);\n    if (companyId) {",
            "current": "      console.log(`🏢 [RAG] Filtering data for company: ${companyId}`);",
            "after": "    }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 407,
          "content": "console.log(`🔐 [RAG] Loading products for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    // 🔐 تحميل منتجات الشركة المحددة فقط عند الطلب\n    if (companyId && (intent === 'product_inquiry' || intent === 'price_inquiry')) {",
            "current": "      console.log(`🔐 [RAG] Loading products for company: ${companyId}`);",
            "after": "      await this.loadProductsForCompany(companyId);\n    }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 450,
          "content": "console.log(`🚨 [RAG] Blocked product from wrong company: ${item.metadata?.name} (company: ${item.metadata?.companyId})`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "            const isCorrectCompany = item.metadata?.companyId === companyId;\n            if (!isCorrectCompany) {",
            "current": "              console.log(`🚨 [RAG] Blocked product from wrong company: ${item.metadata?.name} (company: ${item.metadata?.companyId})`);",
            "after": "            }\n            return isCorrectCompany;"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 457,
          "content": "console.log(`🔐 [RAG] Filtered ${relevantData.length} → ${filteredData.length} items for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        });\n",
            "current": "        console.log(`🔐 [RAG] Filtered ${relevantData.length} → ${filteredData.length} items for company: ${companyId}`);",
            "after": "        relevantData = filteredData;\n      }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 763,
          "content": "where: { customerId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const orders = await prisma.order.findMany({",
            "current": "        where: { customerId },",
            "after": "        orderBy: { createdAt: 'desc' },\n        take: 3,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 853,
          "content": "console.log(`🔍 [CONTEXT] Found product in user message: \"${match.trim()}\"`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "            if (!productKeywords.includes(match.trim())) {\n              productKeywords.push(match.trim());",
            "current": "              console.log(`🔍 [CONTEXT] Found product in user message: \"${match.trim()}\"`);",
            "after": "            }\n          });"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 891,
          "content": "console.log(`🔐 [RAG] Loading products for specific search - company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    // 🔐 تحميل منتجات الشركة المحددة فقط\n    if (companyId) {",
            "current": "      console.log(`🔐 [RAG] Loading products for specific search - company: ${companyId}`);",
            "after": "      await this.loadProductsForCompany(companyId);\n    }"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 915,
          "content": "console.log(`🏢 [RAG] Filtered products for company ${companyId}: ${availableProducts.length} products`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      if (companyId) {",
            "current": "        console.log(`🏢 [RAG] Filtered products for company ${companyId}: ${availableProducts.length} products`);",
            "after": "      }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 956,
          "content": "console.log(`🔐 [RAG] Final isolation check - no products found for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // 🔐 تحقق نهائي من العزل قبل الإرجاع\n      if (companyId) {",
            "current": "        console.log(`🔐 [RAG] Final isolation check - no products found for company: ${companyId}`);",
            "after": "      }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 1016,
          "content": "console.log(`🔄 [CONTEXT-PENALTY] Requesting different product, reducing bonus for recent mention: ${userBonus}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "        if (requestingDifferentProduct && index === 0) {\n          userBonus = Math.max(5, userBonus * 0.3); // تقليل كبير للتفاعل الأخير",
            "current": "          console.log(`🔄 [CONTEXT-PENALTY] Requesting different product, reducing bonus for recent mention: ${userBonus}`);",
            "after": "        }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\ragService.js",
          "line": 1020,
          "content": "console.log(`🧠 [CONTEXT-BONUS] Product mentioned in user message (interaction ${index + 1}): +${userBonus}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n        bonus += userBonus;",
            "current": "        console.log(`🧠 [CONTEXT-BONUS] Product mentioned in user message (interaction ${index + 1}): +${userBonus}`);",
            "after": "      }\n"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 3,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 50
      }
    },
    "src\\services\\redisService.js": {
      "totalLines": 399,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\reminderService.js": {
      "totalLines": 663,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 14
      }
    },
    "src\\services\\reportExportService.js": {
      "totalLines": 632,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 16
      }
    },
    "src\\services\\reportGenerator.js": {
      "totalLines": 464,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\responseOptimizationService.js": {
      "totalLines": 737,
      "issues": [
        {
          "file": "src\\services\\responseOptimizationService.js",
          "line": 596,
          "content": "companyId: 'cmdt8nrjq003vufuss47dqc45'",
          "description": "Hardcoded company ID - security risk",
          "severity": "HIGH",
          "category": "HARDCODED_SECRETS",
          "impact": "MEDIUM",
          "cwe": "CWE-798",
          "context": {
            "before": "        type: 'template_optimization',\n        category: category,",
            "current": "        companyId: 'cmdt8nrjq003vufuss47dqc45'",
            "after": "      }, {\n        success: true,"
          },
          "mitigation": false,
          "riskScore": 7
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\services\\responseOptimizer.js": {
      "totalLines": 690,
      "issues": [
        {
          "file": "src\\services\\responseOptimizer.js",
          "line": 488,
          "content": "where: { companyId }",
          "description": "Where clause potentially missing companyId filter",
          "severity": "LOW",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const aiSettings = await prisma.aiSettings.findFirst({",
            "current": "        where: { companyId }",
            "after": "      });\n"
          },
          "mitigation": true,
          "riskScore": 2
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 5
      }
    },
    "src\\services\\responseStatsService.js": {
      "totalLines": 720,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\returnService.js": {
      "totalLines": 724,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\reviewService.js": {
      "totalLines": 639,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\salesReportService.js": {
      "totalLines": 860,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\scheduledPatternMaintenanceService.js": {
      "totalLines": 404,
      "issues": [
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 71,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // جلب جميع الشركات\n      const companies = await this.prisma.company.findMany({",
            "current": "        where: { isActive: true },",
            "after": "        select: { id: true, name: true }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 79,
          "content": "console.log(`🏢 [ScheduledMaintenance] Processing company: ${company.name} (${company.id})`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n      for (const company of companies) {",
            "current": "        console.log(`🏢 [ScheduledMaintenance] Processing company: ${company.name} (${company.id})`);",
            "after": "        \n        // تنظيف الأنماط المكررة"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 147,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const companies = await this.prisma.company.findMany({",
            "current": "        where: { isActive: true },",
            "after": "        select: { id: true, name: true }\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 213,
          "content": "console.log(`🗑️ [ScheduledMaintenance] Deactivated ${unusedPatterns.length} unused patterns for company ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      });\n",
            "current": "      console.log(`🗑️ [ScheduledMaintenance] Deactivated ${unusedPatterns.length} unused patterns for company ${companyId}`);",
            "after": "      return { deletedCount: unusedPatterns.length };\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 271,
          "content": "console.log(`📦 [ScheduledMaintenance] Archived ${oldPatterns.length} old patterns for company ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      });\n",
            "current": "      console.log(`📦 [ScheduledMaintenance] Archived ${oldPatterns.length} old patterns for company ${companyId}`);",
            "after": "      return oldPatterns.length;\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 289,
          "content": "where: { isActive: true },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // تحديث معدلات النجاح بناءً على الاستخدام الحديث\n      const patterns = await this.prisma.successPattern.findMany({",
            "current": "        where: { isActive: true },",
            "after": "        include: {\n          PatternUsage: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\scheduledPatternMaintenanceService.js",
          "line": 311,
          "content": "where: { id: pattern.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n          await this.prisma.successPattern.update({",
            "current": "            where: { id: pattern.id },",
            "after": "            data: { successRate: weightedRate }\n          });"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 65,
      "patterns": {
        "prismaQueries": 10,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 8
      }
    },
    "src\\services\\securityMonitoringService.js": {
      "totalLines": 307,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 0
      }
    },
    "src\\services\\sentimentAnalysisService.js": {
      "totalLines": 875,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\services\\shippingService.js": {
      "totalLines": 631,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\simpleAlerts.js": {
      "totalLines": 706,
      "issues": [
        {
          "file": "src\\services\\simpleAlerts.js",
          "line": 342,
          "content": "console.log(`📧 [EMAIL] To: admin@company.com`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      // محاكاة إرسال البريد الإلكتروني\n      console.log(`📧 [EMAIL] Sending alert email...`);",
            "current": "      console.log(`📧 [EMAIL] To: admin@company.com`);",
            "after": "      console.log(`📧 [EMAIL] Subject: ${alert.severity === 'critical' ? '🚨 CRITICAL' : '⚠️ WARNING'} - ${alert.message}`);\n      console.log(`📧 [EMAIL] Body: ${message}`);"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\simpleMonitor.js": {
      "totalLines": 523,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\services\\simpleOrderService.js": {
      "totalLines": 555,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 2
      }
    },
    "src\\services\\smartProductService.js": {
      "totalLines": 288,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 1,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 3
      }
    },
    "src\\services\\smsService.js": {
      "totalLines": 544,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\socketService.js": {
      "totalLines": 328,
      "issues": [
        {
          "file": "src\\services\\socketService.js",
          "line": 104,
          "content": "console.log(`👤 User ${userName} (${userId}) joined`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    });\n",
            "current": "    console.log(`👤 User ${userName} (${userId}) joined`);",
            "after": "\n    // إرسال قائمة المستخدمين المتصلين"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 181,
          "content": "console.log(`✍️ User ${userInfo.userName} started typing in ${conversationId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    });\n",
            "current": "    console.log(`✍️ User ${userInfo.userName} started typing in ${conversationId}`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 207,
          "content": "console.log(`🛑 User ${userInfo.userName} stopped typing in ${conversationId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    });\n",
            "current": "    console.log(`🛑 User ${userInfo.userName} stopped typing in ${conversationId}`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 224,
          "content": "console.log(`👁️ Message ${messageId} marked as read by ${userInfo.userName}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    });\n",
            "current": "    console.log(`👁️ Message ${messageId} marked as read by ${userInfo.userName}`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 235,
          "content": "console.log(`🏠 User ${userInfo.userName} joined conversation ${conversationId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "\n    socket.join(`conversation_${conversationId}`);",
            "current": "    console.log(`🏠 User ${userInfo.userName} joined conversation ${conversationId}`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 250,
          "content": "console.log(`🚪 User ${userInfo.userName} left conversation ${conversationId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    this.handleStopTyping(socket, { conversationId });\n    ",
            "current": "    console.log(`🚪 User ${userInfo.userName} left conversation ${conversationId}`);",
            "after": "  }\n"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 282,
          "content": "console.log(`👋 User ${userName} (${userId}) disconnected`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      });\n",
            "current": "      console.log(`👋 User ${userName} (${userId}) disconnected`);",
            "after": "    } else {\n      console.log(`🔌 Anonymous user ${socket.id} disconnected`);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\socketService.js",
          "line": 284,
          "content": "console.log(`🔌 Anonymous user ${socket.id} disconnected`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      console.log(`👋 User ${userName} (${userId}) disconnected`);\n    } else {",
            "current": "      console.log(`🔌 Anonymous user ${socket.id} disconnected`);",
            "after": "    }\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 60,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 0
      }
    },
    "src\\services\\subscriptionRenewalService.js": {
      "totalLines": 399,
      "issues": [
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 68,
          "content": "console.log(`🔄 Renewing subscription ${subscription.id} for ${subscription.company.name}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "  async renewSubscription(subscription) {\n    try {",
            "current": "      console.log(`🔄 Renewing subscription ${subscription.id} for ${subscription.company.name}`);",
            "after": "\n      // Calculate next billing date"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 81,
          "content": "where: { id: subscription.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update subscription\n      await prisma.subscription.update({",
            "current": "        where: { id: subscription.id },",
            "after": "        data: {\n          nextBillingDate,"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 209,
          "content": "console.log(`📧 Renewal confirmation sent to ${subscription.company.email}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    try {\n      // TODO: Implement email sending",
            "current": "      console.log(`📧 Renewal confirmation sent to ${subscription.company.email}`);",
            "after": "      console.log(`   📄 Invoice: ${invoice.invoiceNumber}`);\n      console.log(`   💰 Amount: ${invoice.totalAmount} ${invoice.currency}`);"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 242,
          "content": "where: { id: subscription.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      // Update subscription with failure info\n      await prisma.subscription.update({",
            "current": "        where: { id: subscription.id },",
            "after": "        data: {\n          metadata: {"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 257,
          "content": "where: { id: subscription.id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "      if (failureCount >= 3) {\n        await prisma.subscription.update({",
            "current": "          where: { id: subscription.id },",
            "after": "          data: {\n            status: 'SUSPENDED',"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 285,
          "content": "console.log(`📧 Renewal failure notification sent to ${subscription.company.email}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "    try {\n      // TODO: Implement email sending",
            "current": "      console.log(`📧 Renewal failure notification sent to ${subscription.company.email}`);",
            "after": "      \n      // Log the notification"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\services\\subscriptionRenewalService.js",
          "line": 311,
          "content": "where: { id: subscriptionId },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const subscription = await prisma.subscription.findUnique({",
            "current": "        where: { id: subscriptionId },",
            "after": "        include: {\n          company: {"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 65,
      "patterns": {
        "prismaQueries": 7,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 3
      }
    },
    "src\\services\\successAnalyzer.js": {
      "totalLines": 403,
      "issues": [
        {
          "file": "src\\services\\successAnalyzer.js",
          "line": 31,
          "content": "console.log(`🔍 [SuccessAnalyzer] Analyzing patterns for company: ${companyId}`);",
          "description": "Logging sensitive authentication data",
          "severity": "LOW",
          "category": "INFORMATION_DISCLOSURE",
          "impact": "LOW",
          "cwe": "CWE-532",
          "context": {
            "before": "      } = options;\n",
            "current": "      console.log(`🔍 [SuccessAnalyzer] Analyzing patterns for company: ${companyId}`);",
            "after": "\n      // جلب البيانات من قاعدة البيانات"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 3,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 6
      }
    },
    "src\\services\\taskService.js": {
      "totalLines": 573,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\services\\templateService.js": {
      "totalLines": 718,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 17
      }
    },
    "src\\shared\\base\\BaseController.ts": {
      "totalLines": 237,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 1
      }
    },
    "src\\shared\\base\\BaseRepository.ts": {
      "totalLines": 302,
      "issues": [
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 44,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const entity = await this.model.findUnique({",
            "current": "        where: { id },",
            "after": "        ...this.getDefaultIncludes(),\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 141,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      const entity = await this.model.update({",
            "current": "        where: { id },",
            "after": "        data: this.preprocessUpdateData(data),\n        ...this.getDefaultIncludes(),"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 166,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "\n      await this.model.delete({",
            "current": "        where: { id },",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 197,
          "content": "where: { [field]: value },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const entities = await this.model.findMany({",
            "current": "        where: { [field]: value },",
            "after": "        ...this.getDefaultIncludes(),\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 214,
          "content": "where: { [field]: value },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const entity = await this.model.findFirst({",
            "current": "        where: { [field]: value },",
            "after": "        ...this.getDefaultIncludes(),\n      });"
          },
          "mitigation": false,
          "riskScore": 4
        },
        {
          "file": "src\\shared\\base\\BaseRepository.ts",
          "line": 260,
          "content": "where: { id },",
          "description": "Where clause potentially missing companyId filter",
          "severity": "MEDIUM",
          "category": "ISOLATION",
          "impact": "MEDIUM",
          "cwe": "CWE-284",
          "context": {
            "before": "    try {\n      const count = await this.model.count({",
            "current": "        where: { id },",
            "after": "      });\n      return count > 0;"
          },
          "mitigation": false,
          "riskScore": 4
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 70,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\shared\\errors\\AppError.ts": {
      "totalLines": 232,
      "issues": [
        {
          "file": "src\\shared\\errors\\AppError.ts",
          "line": 49,
          "content": "...(process.env.NODE_ENV === 'development' && { stack: this.stack }),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      details: this.details,\n      timestamp: this.timestamp.toISOString(),",
            "current": "      ...(process.env.NODE_ENV === 'development' && { stack: this.stack }),",
            "after": "    };\n  }"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 5,
        "companyFilters": 0
      }
    },
    "src\\shared\\types\\common.ts": {
      "totalLines": 248,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 1
      }
    },
    "src\\shared\\utils\\logger.ts": {
      "totalLines": 251,
      "issues": [
        {
          "file": "src\\shared\\utils\\logger.ts",
          "line": 39,
          "content": "level: process.env.LOG_LEVEL || 'info',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "// Create the logger\nexport const logger = winston.createLogger({",
            "current": "  level: process.env.LOG_LEVEL || 'info',",
            "after": "  format: customFormat,\n  defaultMeta: { "
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\shared\\utils\\logger.ts",
          "line": 43,
          "content": "version: process.env.npm_package_version || '1.0.0',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  defaultMeta: { \n    service: 'communication-platform-api',",
            "current": "    version: process.env.npm_package_version || '1.0.0',",
            "after": "    environment: process.env.NODE_ENV || 'development'\n  },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\shared\\utils\\logger.ts",
          "line": 44,
          "content": "environment: process.env.NODE_ENV || 'development'",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    service: 'communication-platform-api',\n    version: process.env.npm_package_version || '1.0.0',",
            "current": "    environment: process.env.NODE_ENV || 'development'",
            "after": "  },\n  transports: ["
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\shared\\utils\\logger.ts",
          "line": 80,
          "content": "if (process.env.NODE_ENV !== 'production') {",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "\n// Console logging for development",
            "current": "if (process.env.NODE_ENV !== 'production') {",
            "after": "  logger.add(new winston.transports.Console({\n    format: consoleFormat,"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\test-server.js": {
      "totalLines": 200,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\types\\shared.ts": {
      "totalLines": 172,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 2
      }
    },
    "src\\utils\\logger.js": {
      "totalLines": 415,
      "issues": [
        {
          "file": "src\\utils\\logger.js",
          "line": 14,
          "content": "this.logDir = process.env.LOG_DIR || './logs';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "class AdvancedLogger {\n  constructor() {",
            "current": "    this.logDir = process.env.LOG_DIR || './logs';",
            "after": "    this.logLevel = process.env.LOG_LEVEL || 'info';\n    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\logger.js",
          "line": 15,
          "content": "this.logLevel = process.env.LOG_LEVEL || 'info';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  constructor() {\n    this.logDir = process.env.LOG_DIR || './logs';",
            "current": "    this.logLevel = process.env.LOG_LEVEL || 'info';",
            "after": "    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;\n    this.enableConsole = process.env.NODE_ENV !== 'production';"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\logger.js",
          "line": 16,
          "content": "this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    this.logDir = process.env.LOG_DIR || './logs';\n    this.logLevel = process.env.LOG_LEVEL || 'info';",
            "current": "    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
            "after": "    this.enableConsole = process.env.NODE_ENV !== 'production';\n    "
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\logger.js",
          "line": 17,
          "content": "this.enableConsole = process.env.NODE_ENV !== 'production';",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    this.logLevel = process.env.LOG_LEVEL || 'info';\n    this.logRetentionDays = parseInt(process.env.LOG_RETENTION_DAYS) || 30;",
            "current": "    this.enableConsole = process.env.NODE_ENV !== 'production';",
            "after": "    \n    this.createLogDirectory();"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 1
      }
    },
    "src\\utils\\logger.ts": {
      "totalLines": 312,
      "issues": [],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 1,
        "companyFilters": 0
      }
    },
    "src\\utils\\performanceOptimizer.js": {
      "totalLines": 446,
      "issues": [
        {
          "file": "src\\utils\\performanceOptimizer.js",
          "line": 29,
          "content": "host: process.env.REDIS_HOST || 'localhost',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    try {\n      this.redis = Redis.createClient({",
            "current": "        host: process.env.REDIS_HOST || 'localhost',",
            "after": "        port: process.env.REDIS_PORT || 6379,\n        password: process.env.REDIS_PASSWORD,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\performanceOptimizer.js",
          "line": 30,
          "content": "port: process.env.REDIS_PORT || 6379,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      this.redis = Redis.createClient({\n        host: process.env.REDIS_HOST || 'localhost',",
            "current": "        port: process.env.REDIS_PORT || 6379,",
            "after": "        password: process.env.REDIS_PASSWORD,\n      });"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\performanceOptimizer.js",
          "line": 31,
          "content": "password: process.env.REDIS_PASSWORD,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "        host: process.env.REDIS_HOST || 'localhost',\n        port: process.env.REDIS_PORT || 6379,",
            "current": "        password: process.env.REDIS_PASSWORD,",
            "after": "      });\n"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "LOW",
      "isolationScore": 100,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    },
    "src\\utils\\validateEnv.ts": {
      "totalLines": 342,
      "issues": [
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 269,
          "content": "nodeEnv: process.env.NODE_ENV,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  // Log configuration summary (without sensitive data)\n  const configSummary = {",
            "current": "    nodeEnv: process.env.NODE_ENV,",
            "after": "    port: process.env.PORT,\n    logLevel: process.env.LOG_LEVEL,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 270,
          "content": "port: process.env.PORT,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "  const configSummary = {\n    nodeEnv: process.env.NODE_ENV,",
            "current": "    port: process.env.PORT,",
            "after": "    logLevel: process.env.LOG_LEVEL,\n    corsOrigin: process.env.CORS_ORIGIN,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 271,
          "content": "logLevel: process.env.LOG_LEVEL,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    nodeEnv: process.env.NODE_ENV,\n    port: process.env.PORT,",
            "current": "    logLevel: process.env.LOG_LEVEL,",
            "after": "    corsOrigin: process.env.CORS_ORIGIN,\n    features: {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 272,
          "content": "corsOrigin: process.env.CORS_ORIGIN,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    port: process.env.PORT,\n    logLevel: process.env.LOG_LEVEL,",
            "current": "    corsOrigin: process.env.CORS_ORIGIN,",
            "after": "    features: {\n      ai: process.env.ENABLE_AI_FEATURES === 'true',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 274,
          "content": "ai: process.env.ENABLE_AI_FEATURES === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    corsOrigin: process.env.CORS_ORIGIN,\n    features: {",
            "current": "      ai: process.env.ENABLE_AI_FEATURES === 'true',",
            "after": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',\n      analytics: process.env.ENABLE_ANALYTICS === 'true',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 275,
          "content": "ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    features: {\n      ai: process.env.ENABLE_AI_FEATURES === 'true',",
            "current": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
            "after": "      analytics: process.env.ENABLE_ANALYTICS === 'true',\n      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 276,
          "content": "analytics: process.env.ENABLE_ANALYTICS === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      ai: process.env.ENABLE_AI_FEATURES === 'true',\n      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',",
            "current": "      analytics: process.env.ENABLE_ANALYTICS === 'true',",
            "after": "      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 277,
          "content": "notifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      ecommerce: process.env.ENABLE_ECOMMERCE === 'true',\n      analytics: process.env.ENABLE_ANALYTICS === 'true',",
            "current": "      notifications: process.env.ENABLE_NOTIFICATIONS === 'true',",
            "after": "    },\n    integrations: {"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 280,
          "content": "facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    },\n    integrations: {",
            "current": "      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
            "after": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,\n      stripe: !!process.env.STRIPE_SECRET_KEY,"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 281,
          "content": "gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "    integrations: {\n      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),",
            "current": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
            "after": "      stripe: !!process.env.STRIPE_SECRET_KEY,\n      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 282,
          "content": "stripe: !!process.env.STRIPE_SECRET_KEY,",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      facebook: !!(process.env.FACEBOOK_APP_ID && process.env.FACEBOOK_APP_SECRET),\n      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,",
            "current": "      stripe: !!process.env.STRIPE_SECRET_KEY,",
            "after": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),\n      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 283,
          "content": "paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      gemini: !!process.env.GOOGLE_GEMINI_API_KEY,\n      stripe: !!process.env.STRIPE_SECRET_KEY,",
            "current": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
            "after": "      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),\n      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 284,
          "content": "twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      stripe: !!process.env.STRIPE_SECRET_KEY,\n      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),",
            "current": "      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
            "after": "      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),\n    },"
          },
          "mitigation": false,
          "riskScore": 1
        },
        {
          "file": "src\\utils\\validateEnv.ts",
          "line": 285,
          "content": "email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),",
          "description": "Environment variable usage - verify no secrets in logs",
          "severity": "LOW",
          "category": "CONFIGURATION",
          "impact": "LOW",
          "cwe": "CWE-209",
          "context": {
            "before": "      paypal: !!(process.env.PAYPAL_CLIENT_ID && process.env.PAYPAL_CLIENT_SECRET),\n      twilio: !!(process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN),",
            "current": "      email: !!(process.env.SMTP_USER && process.env.SMTP_PASS),",
            "after": "    },\n  };"
          },
          "mitigation": false,
          "riskScore": 1
        }
      ],
      "riskLevel": "MEDIUM",
      "isolationScore": 40,
      "patterns": {
        "prismaQueries": 0,
        "apiRoutes": 0,
        "authChecks": 0,
        "companyFilters": 0
      }
    }
  },
  "recommendations": [
    {
      "priority": "URGENT",
      "category": "CRITICAL_FIXES",
      "title": "Fix Critical Security Issues Immediately",
      "description": "Found 39 critical security issues that could lead to data breaches.",
      "actions": [
        "Review all Prisma queries without companyId filters",
        "Add company isolation to bulk operations",
        "Secure raw SQL queries with proper filtering",
        "Implement authentication middleware on unprotected routes"
      ]
    },
    {
      "priority": "HIGH",
      "category": "AUTHENTICATION",
      "title": "Strengthen Authentication & Authorization",
      "description": "Found 295 high-risk authentication issues.",
      "actions": [
        "Add authentication middleware to all API routes",
        "Remove hardcoded company IDs",
        "Implement proper user context validation",
        "Add role-based access control"
      ]
    }
  ]
}