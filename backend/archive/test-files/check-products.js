const { PrismaClient } = require('@prisma/client');

async function checkProducts() {
  const prisma = new PrismaClient();

  try {
    console.log('๐ ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช...\n');

    // Get all companies
    const companies = await prisma.company.findMany({
      select: {
        id: true,
        name: true,
        _count: {
          select: {
            products: true,
            categories: true
          }
        }
      }
    });
    
    console.log('๐ ุงูุดุฑูุงุช ุงูููุฌูุฏุฉ:');
    companies.forEach((company, index) => {
      console.log(`${index + 1}. ${company.name} (ID: ${company.id})`);
      console.log(`   ุนุฏุฏ ุงูููุชุฌุงุช: ${company._count.products}`);
      console.log(`   ุนุฏุฏ ุงููุฆุงุช: ${company._count.categories}`);
    });
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Get products for "ุดุฑูุฉ ุงูุชูุงุตู ุงูุชุฌุฑูุจูุฉ"
    const testCompany = companies.find(c => c.name.includes('ุงูุชูุงุตู') || c.name.includes('ุชุฌุฑูุจูุฉ'));
    
    if (testCompany) {
      console.log(`๐ข ุชูุงุตูู ${testCompany.name}:`);
      console.log(`๐ฆ ุนุฏุฏ ุงูููุชุฌุงุช: ${testCompany._count.products}`);
      console.log(`๐ท๏ธ ุนุฏุฏ ุงููุฆุงุช: ${testCompany._count.categories}`);

      // Get categories first
      const categories = await prisma.category.findMany({
        where: {
          companyId: testCompany.id
        },
        include: {
          _count: {
            select: {
              products: true
            }
          }
        },
        orderBy: {
          name: 'asc'
        }
      });

      console.log('\n๐ท๏ธ ูุงุฆูุฉ ุงููุฆุงุช:');
      if (categories.length > 0) {
        categories.forEach((category, index) => {
          console.log(`${index + 1}. ${category.name} (ID: ${category.id})`);
          console.log(`   ุนุฏุฏ ุงูููุชุฌุงุช: ${category._count.products}`);
          console.log(`   ุงููุตู: ${category.description || 'ูุง ููุฌุฏ'}`);
        });
      } else {
        console.log('   ูุง ุชูุฌุฏ ูุฆุงุช');
      }

      // Get detailed products
      const products = await prisma.product.findMany({
        where: {
          companyId: testCompany.id
        },
        include: {
          category: true,
          variants: true
        },
        orderBy: {
          createdAt: 'desc'
        }
      });
      
      console.log('\n๐ ูุงุฆูุฉ ุงูููุชุฌุงุช:');
      products.forEach((product, index) => {
        console.log(`\n${index + 1}. ${product.name}`);
        console.log(`   SKU: ${product.sku}`);
        console.log(`   ุงูุณุนุฑ: ${product.price} ุฌููู`);
        console.log(`   ุงููุฆุฉ: ${product.category?.name || 'ุบูุฑ ูุญุฏุฏ'}`);
        console.log(`   ุงููุฎุฒูู: ${product.stock}`);
        console.log(`   ุงูุญุงูุฉ: ${product.isActive ? 'ูุดุท' : 'ุบูุฑ ูุดุท'}`);
        console.log(`   ุนุฏุฏ ุงููุชุบูุฑุงุช: ${product.variants?.length || 0}`);
        console.log(`   ุงูุตูุฑ: ${product.images === '[]' ? 'ูุง ุชูุฌุฏ' : 'ูุชููุฑุฉ'}`);
      });
      
      // Statistics
      const activeProducts = products.filter(p => p.isActive).length;
      const inactiveProducts = products.filter(p => !p.isActive).length;
      const totalVariants = products.reduce((sum, p) => sum + (p.variants?.length || 0), 0);
      const productsWithImages = products.filter(p => p.images && p.images !== '[]').length;
      
      console.log('\n๐ ุฅุญุตุงุฆูุงุช:');
      console.log(`   ุงูููุชุฌุงุช ุงููุดุทุฉ: ${activeProducts}`);
      console.log(`   ุงูููุชุฌุงุช ุบูุฑ ุงููุดุทุฉ: ${inactiveProducts}`);
      console.log(`   ุฅุฌูุงูู ุงููุชุบูุฑุงุช: ${totalVariants}`);
      console.log(`   ุงูููุชุฌุงุช ุจุตูุฑ: ${productsWithImages}`);
      
    } else {
      console.log('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุดุฑูุฉ ุงูุชูุงุตู ุงูุชุฌุฑูุจูุฉ');
    }
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุณุชุนูุงู:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkProducts();
