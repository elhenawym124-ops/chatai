/**
 * ุงุฎุชุจุงุฑ ุฅุตูุงุญ ุงูุนุฒู ูู ุฅุฏุงุฑุฉ ุงูุฐุงูุฑุฉ
 */

const axios = require('axios');

// ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ
const testData = {
  company1: {
    pageId: '123456789', // ุดุฑูุฉ ุงูุญูู
    companyId: await getCompanyByName('ุงูุญูู'),
    users: ['company1-user1', 'company1-user2']
  },
  company2: {
    pageId: '675323792321557', // Swan-store  
    companyId: 'cme8oj1fo000cufdcg2fquia9',
    users: ['company2-user1', 'company2-user2']
  }
};

let isolationResults = {
  memoryKeysIsolated: false,
  databaseIsolated: false,
  crossCompanyAccessBlocked: false,
  errors: []
};

async function sendMessage(pageId, senderId, message, company) {
  const webhookData = {
    object: 'page',
    entry: [{
      time: Date.now(),
      id: pageId,
      messaging: [{
        sender: { id: senderId },
        recipient: { id: pageId },
        timestamp: Date.now(),
        message: {
          mid: `isolation_test_${Date.now()}_${Math.random()}`,
          text: message
        }
      }]
    }]
  };

  try {
    const response = await axios.post('http://localhost:3001/webhook', webhookData, {
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'facebookexternalua'
      },
      timeout: 10000
    });
    
    console.log(`โ [${company}] ${senderId}: "${message}"`);
    return { success: true, company, senderId, message };
  } catch (error) {
    console.error(`โ [${company}] ${senderId}: "${message}" - ${error.message}`);
    return { success: false, company, senderId, message, error: error.message };
  }
}

async function testMemoryKeyIsolation() {
  console.log('\n๐งช ุงุฎุชุจุงุฑ: ุนุฒู ููุงุชูุญ ุงูุฐุงูุฑุฉ');
  console.log('=' .repeat(60));
  
  const sameSenderId = 'isolation-key-test';
  
  console.log('๐ค ุฅุฑุณุงู ุฑุณุงุฆู ูู ููุณ ุงูุนููู ูุดุฑูุชูู ูุฎุชููุชูู...');
  
  // ุฑุณุงุฆู ููุดุฑูุฉ ุงูุฃููู
  await sendMessage(testData.company1.pageId, sameSenderId, 'ุฑุณุงูุฉ ุณุฑูุฉ ููุดุฑูุฉ ุงูุฃููู', 'Company1');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // ุฑุณุงุฆู ููุดุฑูุฉ ุงูุซุงููุฉ
  await sendMessage(testData.company2.pageId, sameSenderId, 'ุฑุณุงูุฉ ุณุฑูุฉ ููุดุฑูุฉ ุงูุซุงููุฉ', 'Company2');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  console.log('\n๐ ุชุญูู ูู ุงูููุฌ ููุจุญุซ ุนู:');
  console.log('1. ููุงุชูุญ ุงูุฐุงูุฑุฉ ุชุญุชูู ุนูู companyId');
  console.log('2. ูุง ููุฌุฏ ุชุฏุงุฎู ุจูู ููุงุชูุญ ุงูุดุฑูุชูู');
  console.log('3. ูู ุดุฑูุฉ ููุง ุฐุงูุฑุฉ ูููุตูุฉ');
  
  return true;
}

async function testDatabaseIsolation() {
  console.log('\n๐งช ุงุฎุชุจุงุฑ: ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
  console.log('=' .repeat(60));
  
  console.log('๐ค ุฅุฑุณุงู ุฑุณุงุฆู ูุชุนุฏุฏุฉ ููุญุต ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
  
  // ุฅุฑุณุงู ุฑุณุงุฆู ูู ุนููุงุก ูุฎุชูููู ูุดุฑูุงุช ูุฎุชููุฉ
  const promises = [];
  
  // ุดุฑูุฉ 1
  for (let i = 0; i < 2; i++) {
    promises.push(
      sendMessage(
        testData.company1.pageId, 
        testData.company1.users[i], 
        `ุฑุณุงูุฉ ูุงุนุฏุฉ ุจูุงูุงุช ${i + 1} ูู ุดุฑูุฉ 1`, 
        'Company1'
      )
    );
  }
  
  // ุดุฑูุฉ 2
  for (let i = 0; i < 2; i++) {
    promises.push(
      sendMessage(
        testData.company2.pageId, 
        testData.company2.users[i], 
        `ุฑุณุงูุฉ ูุงุนุฏุฉ ุจูุงูุงุช ${i + 1} ูู ุดุฑูุฉ 2`, 
        'Company2'
      )
    );
  }
  
  await Promise.all(promises);
  
  console.log('\n๐ ุชุญูู ูู ุงูููุฌ ููุจุญุซ ุนู:');
  console.log('1. ุงุณุชุนูุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุชุถูู companyId');
  console.log('2. ูุง ูุชู ุฌูุจ ุจูุงูุงุช ูู ุดุฑูุงุช ุฃุฎุฑู');
  console.log('3. ูู ุดุฑูุฉ ุชุฑู ุจูุงูุงุชูุง ููุท');
  
  return true;
}

async function testCrossCompanyAccessPrevention() {
  console.log('\n๐งช ุงุฎุชุจุงุฑ: ููุน ุงููุตูู ุงููุชูุงุทุน ุจูู ุงูุดุฑูุงุช');
  console.log('=' .repeat(60));
  
  const testUserId = 'cross-access-test';
  
  console.log('๐ค ุฅุฑุณุงู ุฑุณุงุฆู ูุงุฎุชุจุงุฑ ููุน ุงููุตูู ุงููุชูุงุทุน...');
  
  // ุฑุณุงูุฉ ููุดุฑูุฉ ุงูุฃููู ูุน ูุนูููุงุช ุญุณุงุณุฉ
  await sendMessage(
    testData.company1.pageId, 
    testUserId, 
    'ูุนูููุงุช ุณุฑูุฉ ุดุฑูุฉ 1: ุงูุฑูู ุงูุณุฑู 987654', 
    'Company1'
  );
  
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // ุฑุณุงูุฉ ููุดุฑูุฉ ุงูุซุงููุฉ - ูุฌุจ ุฃูุง ุชุญุตู ุนูู ูุนูููุงุช ุงูุดุฑูุฉ ุงูุฃููู
  await sendMessage(
    testData.company2.pageId, 
    testUserId, 
    'ูุง ูู ุงูุฑูู ุงูุณุฑูุ', 
    'Company2'
  );
  
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  console.log('\n๐ ุชุญูู ูู ุงูููุฌ ููุจุญุซ ุนู:');
  console.log('1. ุชู ุฅูุดุงุก ูุญุงุฏุซุงุช ูููุตูุฉ ููู ุดุฑูุฉ');
  console.log('2. ูู ูุชู ุชุณุฑูุจ ุฃู ูุนูููุงุช ุจูู ุงูุดุฑูุชูู');
  console.log('3. ูู ุดุฑูุฉ ููุง ุณูุงู ูููุตู ุชูุงูุงู');
  
  return true;
}

async function testMemoryCleanupAndLimits() {
  console.log('\n๐งช ุงุฎุชุจุงุฑ: ุชูุธูู ุงูุฐุงูุฑุฉ ูุงูุญุฏูุฏ');
  console.log('=' .repeat(60));
  
  const senderId = 'cleanup-test';
  
  console.log('๐ค ุฅุฑุณุงู ุฑุณุงุฆู ูุชุนุฏุฏุฉ ูุงุฎุชุจุงุฑ ุชูุธูู ุงูุฐุงูุฑุฉ...');
  
  // ุฅุฑุณุงู 5 ุฑุณุงุฆู ูุชุชุงููุฉ
  for (let i = 1; i <= 5; i++) {
    await sendMessage(
      testData.company1.pageId, 
      senderId, 
      `ุฑุณุงูุฉ ุชูุธูู ${i}`, 
      'Company1'
    );
    
    // ุงูุชุธุงุฑ ูุตูุฑ
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\n๐ ุชุญูู ูู ุงูููุฌ ููุจุญุซ ุนู:');
  console.log('1. ุชู ุชุทุจูู ุญุฏูุฏ ุงูุฐุงูุฑุฉ ูุตูุฑุฉ ุงููุฏู');
  console.log('2. ุชู ุชูุธูู ุงูุฐุงูุฑุฉ ุงููุฏููุฉ');
  console.log('3. ูุง ููุฌุฏ ุชุณุฑูุจ ูู ุงูุฐุงูุฑุฉ');
  
  return true;
}

async function analyzeIsolationResults() {
  console.log('\n' + '=' .repeat(60));
  console.log('๐ ุชุญููู ูุชุงุฆุฌ ุฅุตูุงุญ ุงูุนุฒู');
  console.log('=' .repeat(60));
  
  console.log('\nโ ุงูุฅุตูุงุญุงุช ุงููุทุจูุฉ:');
  console.log('1. โ ุฅุถุงูุฉ companyId ูุฌููุน ููุงุชูุญ ุงูุฐุงูุฑุฉ');
  console.log('2. โ ุฅุถุงูุฉ companyId ูุฌููุน ุงุณุชุนูุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช');
  console.log('3. โ ุฅุถุงูุฉ ุนููุฏ companyId ูุฌุฏูู conversation_memory');
  console.log('4. โ ุฅุถุงูุฉ ููุงุฑุณ ููุฃุฏุงุก ูุงูุนุฒู');
  console.log('5. โ ุฅุถุงูุฉ ุงูุชุญูู ูู companyId ูู ุฌููุน ุงูุฏูุงู');
  
  console.log('\n๐ ุงููุคุดุฑุงุช ุงููุทููุจ ูุฑุงูุจุชูุง:');
  console.log('1. ููุงุชูุญ ุงูุฐุงูุฑุฉ: companyId_conversationId_senderId');
  console.log('2. ุงุณุชุนูุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุชุถูู companyId');
  console.log('3. ุนุฏู ูุฌูุฏ ุฑุณุงุฆู ุฎุทุฃ "companyId is required"');
  console.log('4. ุนุฏู ุชุณุฑูุจ ูุนูููุงุช ุจูู ุงูุดุฑูุงุช');
  
  console.log('\n๐ฏ ูุนุงููุฑ ุงููุฌุงุญ:');
  console.log('โ ูู ููุชุงุญ ุฐุงูุฑุฉ ูุญุชูู ุนูู companyId');
  console.log('โ ูู ุงุณุชุนูุงู ูุงุนุฏุฉ ุจูุงูุงุช ูุชุถูู companyId');
  console.log('โ ูุง ููุฌุฏ ูุตูู ูุชูุงุทุน ุจูู ุงูุดุฑูุงุช');
  console.log('โ ุงูุฐุงูุฑุฉ ูุนุฒููุฉ ุจุดูู ูุงูู');
  
  console.log('\n๐จ ุนูุงูุงุช ุงูุฎุทุฑ:');
  console.log('โ ููุงุชูุญ ุฐุงูุฑุฉ ุจุฏูู companyId');
  console.log('โ ุงุณุชุนูุงูุงุช ุจุฏูู companyId');
  console.log('โ ุชุณุฑูุจ ูุนูููุงุช ุจูู ุงูุดุฑูุงุช');
  console.log('โ ุฑุณุงุฆู ุฎุทุฃ "companyId is required"');
  
  console.log('\n๐ ุงููุชูุฌุฉ ุงููุชููุนุฉ:');
  console.log('โ ุงูุนุฒู ุงููุงูู ุจูู ุงูุดุฑูุงุช');
  console.log('โ ุฃูุงู ุงูุจูุงูุงุช ูุถููู');
  console.log('โ ุนุฏู ุชุณุฑูุจ ุงููุนูููุงุช');
  console.log('โ ุงูุงูุชุซุงู ูููุงููู ุญูุงูุฉ ุงูุจูุงูุงุช');
}

async function runIsolationFixTests() {
  console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ุฅุตูุงุญ ุงูุนุฒู ูู ุงูุฐุงูุฑุฉ');
  console.log('=' .repeat(60));
  
  try {
    // ุงุฎุชุจุงุฑ 1: ุนุฒู ููุงุชูุญ ุงูุฐุงูุฑุฉ
    await testMemoryKeyIsolation();
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // ุงุฎุชุจุงุฑ 2: ุนุฒู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    await testDatabaseIsolation();
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // ุงุฎุชุจุงุฑ 3: ููุน ุงููุตูู ุงููุชูุงุทุน
    await testCrossCompanyAccessPrevention();
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // ุงุฎุชุจุงุฑ 4: ุชูุธูู ุงูุฐุงูุฑุฉ
    await testMemoryCleanupAndLimits();
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // ุชุญููู ุงููุชุงุฆุฌ
    await analyzeIsolationResults();
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑุงุช ุงูุนุฒู:', error);
  }
}

runIsolationFixTests().catch(console.error);
