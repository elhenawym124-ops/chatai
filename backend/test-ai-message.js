const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testAIMessage() {
  try {
    console.log('๐งช ุงุฎุชุจุงุฑ ุฑุณุงูุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู...\n');

    // ุงูุจุญุซ ุนู ุดุฑูุฉ ูุฏููุง ููุชุงุญ ูุดุท
    const activeKey = await prisma.geminiKey.findFirst({
      where: { isActive: true },
      include: { company: true }
    });

    if (!activeKey) {
      console.log('โ ูุง ุชูุฌุฏ ููุงุชูุญ ูุดุทุฉ');
      return;
    }

    console.log(`โ ุงุณุชุฎุฏุงู ุดุฑูุฉ: ${activeKey.company.name}`);
    console.log(`โ ููุชุงุญ Gemini: ${activeKey.id}`);

    const conversationId = 'test-conversation-' + Date.now();
    const customerId = 'test-customer-' + Date.now();

    // ุฅูุดุงุก ุนููู ุฃููุงู
    const customer = await prisma.customer.create({
      data: {
        id: customerId,
        firstName: 'ุนููู',
        lastName: 'ุชุฌุฑูุจู',
        phone: '+201234567890',
        companyId: activeKey.companyId,
        facebookId: 'test-facebook-' + Date.now()
      }
    });

    // ุฅูุดุงุก ูุญุงุฏุซุฉ
    const conversation = await prisma.conversation.create({
      data: {
        id: conversationId,
        customerId: customerId,
        companyId: activeKey.companyId,
        channel: 'FACEBOOK',
        status: 'ACTIVE'
      }
    });

    // ุฅูุดุงุก ุฑุณุงูุฉ ุงุฎุชุจุงุฑ
    const testMessage = await prisma.message.create({
      data: {
        conversationId: conversationId,
        content: 'ูุฑุญุจุงูุ ุฃุฑูุฏ ูุนุฑูุฉ ุงููุฒูุฏ ุนู ููุชุฌุงุชูู',
        type: 'TEXT',
        isFromCustomer: true,
        metadata: JSON.stringify({
          companyId: activeKey.companyId,
          customerId: customerId,
          customerName: 'ุนููู ุชุฌุฑูุจู',
          customerPhone: '+201234567890'
        })
      }
    });

    console.log(`โ ุชู ุฅูุดุงุก ุฑุณุงูุฉ ุงุฎุชุจุงุฑ: ${testMessage.id}`);
    console.log(`๐ ุงููุญุชูู: ${testMessage.content}`);
    
    // ุงูุชุธุงุฑ ูููู ููุนุงูุฌุฉ ุงูุฑุณุงูุฉ
    console.log('\nโณ ุงูุชุธุงุฑ ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // ูุญุต ุฅุฐุง ุชู ุฅูุดุงุก ุฑุฏ AI
    const aiInteraction = await prisma.aiInteraction.findFirst({
      where: {
        customerId: customerId,
        companyId: activeKey.companyId
      },
      orderBy: { createdAt: 'desc' }
    });

    if (aiInteraction) {
      console.log('\nโ ุชู ุฅูุดุงุก ุฑุฏ ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู!');
      console.log(`๐ค ุงูุฑุฏ: ${aiInteraction.response}`);
      console.log(`โก ุงููููุฐุฌ: ${aiInteraction.model}`);
      console.log(`๐ฏ ุงูุซูุฉ: ${aiInteraction.confidence}`);
    } else {
      console.log('\nโ ูู ูุชู ุฅูุดุงุก ุฑุฏ ูู ุงูุฐูุงุก ุงูุงุตุทูุงุนู');
      
      // ูุญุต ุงูุฑุณุงุฆู ุงูุฃุฎูุฑุฉ ูู ุงูููุฌ
      console.log('\n๐ ูุญุต ุขุฎุฑ ุฑุณุงุฆู ุงูููุฌ...');
    }

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAIMessage();
