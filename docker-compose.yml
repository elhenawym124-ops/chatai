version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: communication-platform-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: communication_platform
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - communication-platform
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 30s
      timeout: 10s
      retries: 3

  # phpMyAdmin (Database Management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: communication-platform-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: password
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - communication-platform

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: communication-platform-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - communication-platform
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: communication-platform-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/communication_platform
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_EXPIRES_IN: 30d
      SESSION_SECRET: super-secret-session-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
      FROM_EMAIL: noreply@communication-platform.local
      FROM_NAME: Communication Platform
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - communication-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: communication-platform-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001/api/v1
      REACT_APP_WS_URL: ws://localhost:3001
      REACT_APP_APP_NAME: Communication Platform
      REACT_APP_APP_VERSION: 1.0.0
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - communication-platform

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: communication-platform-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - communication-platform

  # Adminer (Database management)
  adminer:
    image: adminer:latest
    container_name: communication-platform-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - communication-platform
    profiles:
      - development

  # Redis Commander (Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: communication-platform-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - communication-platform
    profiles:
      - development

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

networks:
  communication-platform:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
